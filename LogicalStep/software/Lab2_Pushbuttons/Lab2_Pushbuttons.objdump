
Lab2_Pushbuttons.elf:     file format elf32-littlenios2
Lab2_Pushbuttons.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00800248

Program Header:
    LOAD off    0x00001000 vaddr 0x00800000 paddr 0x00800000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00800020 paddr 0x00800020 align 2**12
         filesz 0x00010a70 memsz 0x00010a70 flags r-x
    LOAD off    0x00011a90 vaddr 0x00810a90 paddr 0x00811798 align 2**12
         filesz 0x00000d08 memsz 0x00000d08 flags rw-
    LOAD off    0x000134a0 vaddr 0x008124a0 paddr 0x008124a0 align 2**12
         filesz 0x00000000 memsz 0x00000168 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00800000  00800000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000228  00800020  00800020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00010274  00800248  00800248  00001248  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000005d4  008104bc  008104bc  000114bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000d08  00810a90  00811798  00011a90  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000168  008124a0  008124a0  000134a0  2**2
                  ALLOC, SMALL_DATA
  6 .new_sdram_controller_0 00000000  00812608  00812608  00012798  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00012798  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000f48  00000000  00000000  000127c0  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00023de3  00000000  00000000  00013708  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000092b6  00000000  00000000  000374eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000bc19  00000000  00000000  000407a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000022c4  00000000  00000000  0004c3bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00003d59  00000000  00000000  0004e680  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00017751  00000000  00000000  000523d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000060  00000000  00000000  00069b2c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001878  00000000  00000000  00069b90  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0006e88e  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  0006e891  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0006e89d  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0006e89e  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0006e89f  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0006e8a3  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0006e8a7  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  0006e8ab  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  0006e8b6  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  0006e8c1  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000003  00000000  00000000  0006e8cc  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000002c  00000000  00000000  0006e8cf  2**0
                  CONTENTS, READONLY
 29 .jdi          00005cd2  00000000  00000000  0006e8fb  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     0008f6c5  00000000  00000000  000745cd  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00800000 l    d  .entry	00000000 .entry
00800020 l    d  .exceptions	00000000 .exceptions
00800248 l    d  .text	00000000 .text
008104bc l    d  .rodata	00000000 .rodata
00810a90 l    d  .rwdata	00000000 .rwdata
008124a0 l    d  .bss	00000000 .bss
00812608 l    d  .new_sdram_controller_0	00000000 .new_sdram_controller_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../Lab2_Pushbuttons_bsp//obj/HAL/src/crt0.o
00800290 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
0081174c l     O .rwdata	00000004 button_value
008124a0 l     O .bss	00000004 counter
008124a4 l     O .bss	00000004 button_pressed
0080035c l     F .text	000000e4 handle_timer_interrupt
00800440 l     F .text	00000058 btn_interrupt
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 vfprintf.c
00810512 l     O .rodata	00000010 zeroes.4404
00802718 l     F .text	000000bc __sbprintf
00810522 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00802928 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00804458 l     F .text	00000008 __fp_unlock
0080446c l     F .text	0000019c __sinit.part.1
00804608 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00810a90 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
00810ed4 l     O .rwdata	00000020 lc_ctype_charset
00810eb4 l     O .rwdata	00000020 lc_message_charset
00810ef4 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
00810554 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00806f20 l     F .text	000000fc __sprint_r.part.0
00810688 l     O .rodata	00000010 blanks.4348
00810678 l     O .rodata	00000010 zeroes.4349
008084ac l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0080cce4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0080cdf0 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0080ce1c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
0080d088 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0080d168 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0080d254 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0080d428 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00811784 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0080d674 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0080d7a8 l     F .text	00000034 alt_dev_reg
008114dc l     O .rwdata	0000002c jtag_uart_0
00811508 l     O .rwdata	00000120 lcd_display
00811628 l     O .rwdata	000000c4 uart
008116ec l     O .rwdata	00000030 audio_i2c_config
0081171c l     O .rwdata	00000030 Audio
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207.c
00811788 l     O .rwdata	00000004 colstart
0080daf4 l     F .text	000000b8 lcd_write_command
0080dbac l     F .text	000000d8 lcd_write_data
0080dc84 l     F .text	000000d0 lcd_clear_screen
0080dd54 l     F .text	000001ec lcd_repaint_screen
0080df40 l     F .text	000000cc lcd_scroll_up
0080e00c l     F .text	000002ac lcd_handle_escape
0080e790 l     F .text	000000ac alt_lcd_16207_timeout
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0080e9d0 l     F .text	0000007c alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
0080ec74 l     F .text	000000a0 altera_avalon_uart_irq
0080ed14 l     F .text	000000e4 altera_avalon_uart_rxirq
0080edf8 l     F .text	00000148 altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
0080ef94 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
0080f1ac l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0080f508 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0080f6dc l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
0080f81c l     F .text	0000003c alt_get_errno
0080f858 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 ctype_.c
00810910 l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
008124dc g     O .bss	00000004 alt_instruction_exception_handler
00806a30 g     F .text	00000074 _mprec_log10
00806b1c g     F .text	0000008c __any_on
00808f04 g     F .text	00000054 _isatty_r
00810560 g     O .rodata	00000028 __mprec_tinytens
0080d364 g     F .text	0000007c alt_main
00812508 g     O .bss	00000100 alt_irq
00808f58 g     F .text	00000060 _lseek_r
00811798 g       *ABS*	00000000 __flash_rwdata_start
0080b810 g     F .text	00000088 .hidden __eqdf2
00812608 g       *ABS*	00000000 __alt_heap_start
008004c8 g     F .text	0000003c printf
00809830 g     F .text	0000009c _wcrtomb_r
00806d48 g     F .text	0000005c __sseek
008047a8 g     F .text	00000010 __sinit
008096d8 g     F .text	00000140 __swbuf_r
00804db4 g     F .text	0000007c _setlocale_r
00804610 g     F .text	00000068 __sfmoreglue
0080d404 g     F .text	00000024 __malloc_unlock
00808fb8 g     F .text	0000015c memmove
00804790 g     F .text	00000018 _cleanup
00805bac g     F .text	000000a8 _Balloc
0080b898 g     F .text	000000dc .hidden __gtdf2
0080fc44 g     F .text	00000024 altera_nios2_gen2_irq_init
00800000 g     F .entry	0000001c __reset
00800020 g       *ABS*	00000000 __flash_exceptions_start
008089ec g     F .text	0000005c _fstat_r
008124c0 g     O .bss	00000004 errno
00806cc4 g     F .text	00000008 __seofread
008124cc g     O .bss	00000004 alt_argv
0081974c g       *ABS*	00000000 _gp
0080fc14 g     F .text	00000030 usleep
0081135c g     O .rwdata	00000180 alt_fd_list
0080fdc0 g     F .text	00000090 alt_find_dev
0080593c g     F .text	00000148 memcpy
00804460 g     F .text	0000000c _cleanup_r
0080cafc g     F .text	000000dc .hidden __floatsidf
0080f7a0 g     F .text	0000007c alt_io_redirect
0080b974 g     F .text	000000f4 .hidden __ltdf2
008104bc g       *ABS*	00000000 __DTOR_END__
0081008c g     F .text	0000009c alt_exception_cause_generated_bad_addr
00806ba8 g     F .text	00000074 __fpclassifyd
0080698c g     F .text	000000a4 __ratio
00808490 g     F .text	0000001c __vfiprintf_internal
0080d974 g     F .text	000000ec altera_avalon_jtag_uart_read
00800498 g     F .text	00000030 _printf_r
0080a5c0 g     F .text	00000064 .hidden __udivsi3
0080d0c4 g     F .text	000000a4 isatty
008105b0 g     O .rodata	000000c8 __mprec_tens
00804e30 g     F .text	0000000c __locale_charset
0080fffc g     F .text	00000090 alt_icache_flush
008124bc g     O .bss	00000004 __malloc_top_pad
00811758 g     O .rwdata	00000004 __mb_cur_max
00804e60 g     F .text	0000000c _localeconv_r
00808a48 g     F .text	000004bc __sfvwrite_r
00805fb8 g     F .text	0000003c __i2b
00806c1c g     F .text	00000054 _sbrk_r
00809114 g     F .text	00000060 _read_r
00811778 g     O .rwdata	00000004 alt_max_fd
008086e0 g     F .text	000000f0 _fclose_r
00804428 g     F .text	00000030 fflush
008124b8 g     O .bss	00000004 __malloc_max_sbrked_mem
0080cf08 g     F .text	00000180 alt_irq_register
0080a67c g     F .text	000008ac .hidden __adddf3
00806734 g     F .text	0000010c __b2d
00809f90 g     F .text	00000538 .hidden __umoddi3
0080d290 g     F .text	000000d4 lseek
00811750 g     O .rwdata	00000004 _global_impure_ptr
00809174 g     F .text	00000564 _realloc_r
00812608 g       *ABS*	00000000 __bss_end
0080fb0c g     F .text	00000108 alt_tick
00809a18 g     F .text	00000578 .hidden __udivdi3
00808948 g     F .text	00000024 _fputwc_r
00810588 g     O .rodata	00000028 __mprec_bigtens
00805d9c g     F .text	00000104 __s2b
0080cbd8 g     F .text	000000a8 .hidden __floatunsidf
00806474 g     F .text	00000060 __mcmp
0080ebd0 g     F .text	000000a4 altera_avalon_uart_init
008047c8 g     F .text	00000018 __fp_lock_all
0080fa70 g     F .text	0000009c alt_alarm_stop
008124c4 g     O .bss	00000004 alt_irq_active
008000fc g     F .exceptions	000000d8 alt_irq_handler
00811334 g     O .rwdata	00000028 alt_dev_null
0080f4c0 g     F .text	00000048 alt_dcache_flush_all
00805ea0 g     F .text	00000068 __hi0bits
0080ca7c g     F .text	00000080 .hidden __fixdfsi
00811798 g       *ABS*	00000000 __ram_rwdata_end
00811770 g     O .rwdata	00000008 alt_dev_list
0080d6b0 g     F .text	000000f8 write
00810a90 g       *ABS*	00000000 __ram_rodata_end
0080ce58 g     F .text	000000b0 fstat
0080b974 g     F .text	000000f4 .hidden __ledf2
008061ec g     F .text	00000140 __pow5mult
00807034 g     F .text	0000145c ___vfiprintf_internal_r
008124b0 g     O .bss	00000004 __nlocale_changed
0080a624 g     F .text	00000058 .hidden __umodsi3
00812608 g       *ABS*	00000000 end
0080e2b8 g     F .text	000004d8 altera_avalon_lcd_16207_write
0080f1e8 g     F .text	000001ac altera_avalon_uart_write
008001d4 g     F .exceptions	00000074 alt_instruction_exception_entry
008104bc g       *ABS*	00000000 __CTOR_LIST__
01000000 g       *ABS*	00000000 __alt_stack_pointer
0080ea4c g     F .text	00000074 alt_avalon_timer_sc_init
0080eb20 g     F .text	00000060 altera_avalon_uart_write_fd
0080cc80 g     F .text	00000064 .hidden __clzsi2
0080eb80 g     F .text	00000050 altera_avalon_uart_close_fd
0080da60 g     F .text	00000094 altera_avalon_jtag_uart_write
008047b8 g     F .text	00000004 __sfp_lock_acquire
00805858 g     F .text	000000e4 memchr
00800504 g     F .text	000021f8 ___vfprintf_internal_r
0080491c g     F .text	00000310 _free_r
00804e3c g     F .text	00000010 __locale_mb_cur_max
00810308 g     F .text	00000180 __call_exitprocs
008124ac g     O .bss	00000004 __mlocale_changed
0081175c g     O .rwdata	00000004 __malloc_sbrk_base
00800248 g     F .text	0000004c _start
008124d4 g     O .bss	00000004 _alt_tick_rate
0080632c g     F .text	00000148 __lshift
008124d8 g     O .bss	00000004 _alt_nticks
0080d464 g     F .text	000000fc read
0080d814 g     F .text	000000a0 alt_sys_init
008101f0 g     F .text	00000118 __register_exitproc
00805ff4 g     F .text	000001f8 __multiply
00810a90 g       *ABS*	00000000 __ram_rwdata_start
008104bc g       *ABS*	00000000 __ram_rodata_start
008124e0 g     O .bss	00000028 __malloc_current_mallinfo
00806840 g     F .text	0000014c __d2b
0080d8b4 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0080ff58 g     F .text	000000a4 alt_get_fd
0080fc68 g     F .text	00000158 alt_busy_sleep
008085c8 g     F .text	00000054 _close_r
00810174 g     F .text	0000007c memcmp
00812608 g       *ABS*	00000000 __alt_stack_base
008027d4 g     F .text	00000154 __swsetup_r
0080af28 g     F .text	000008e8 .hidden __divdf3
00804678 g     F .text	00000118 __sfp
00806aa4 g     F .text	00000078 __copybits
00810f2c g     O .rwdata	00000408 __malloc_av_
008047c4 g     F .text	00000004 __sinit_lock_release
0080ba68 g     F .text	00000718 .hidden __muldf3
00806c70 g     F .text	00000054 __sread
0080fe50 g     F .text	00000108 alt_find_file
0080f544 g     F .text	000000a4 alt_dev_llist_insert
0080d3e0 g     F .text	00000024 __malloc_lock
0080d5c4 g     F .text	000000b0 sbrk
008043cc g     F .text	0000005c _fflush_r
0080861c g     F .text	000000c4 _calloc_r
008124a0 g       *ABS*	00000000 __bss_start
00805a84 g     F .text	00000128 memset
00800294 g     F .text	000000c8 main
008124d0 g     O .bss	00000004 alt_envp
008124b4 g     O .bss	00000004 __malloc_max_total_mem
0080d914 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00809818 g     F .text	00000018 __swbuf
0080e83c g     F .text	00000134 altera_avalon_lcd_16207_init
00806da4 g     F .text	00000008 __sclose
01000000 g       *ABS*	00000000 __alt_heap_limit
008087d0 g     F .text	00000014 fclose
00802b28 g     F .text	00001688 _dtoa_r
0080504c g     F .text	0000080c _malloc_r
0080998c g     F .text	00000030 __ascii_wctomb
0081177c g     O .rwdata	00000004 alt_errno
00804c2c g     F .text	000000c4 _fwalk
0080a4c8 g     F .text	00000084 .hidden __divsi3
008047f8 g     F .text	00000124 _malloc_trim_r
008104bc g       *ABS*	00000000 __CTOR_END__
00806dac g     F .text	000000dc strcmp
008104bc g       *ABS*	00000000 __flash_rodata_start
008104bc g       *ABS*	00000000 __DTOR_LIST__
0080b810 g     F .text	00000088 .hidden __nedf2
0080d7dc g     F .text	00000038 alt_irq_init
0080d560 g     F .text	00000064 alt_release_fd
00810698 g     O .rodata	00000100 .hidden __clz_tab
008124a8 g     O .bss	00000004 _PathLocale
00810128 g     F .text	00000014 atexit
00808568 g     F .text	00000060 _write_r
00804e6c g     F .text	00000018 setlocale
00811754 g     O .rwdata	00000004 _impure_ptr
008124c8 g     O .bss	00000004 alt_argc
008041b0 g     F .text	0000021c __sflush_r
0080f648 g     F .text	00000060 _do_dtors
00804e58 g     F .text	00000008 __locale_cjk_lang
00800020 g       .exceptions	00000000 alt_irq_entry
008066d0 g     F .text	00000064 __ulp
008047e0 g     F .text	00000018 __fp_unlock_all
0080e970 g     F .text	00000060 altera_avalon_lcd_16207_write_fd
00811768 g     O .rwdata	00000008 alt_fs_list
00800020 g       *ABS*	00000000 __ram_exceptions_start
00804e84 g     F .text	0000000c localeconv
00800000 g       *ABS*	00000000 __alt_mem_new_sdram_controller_0
00811798 g       *ABS*	00000000 _edata
0080eac0 g     F .text	00000060 altera_avalon_uart_read_fd
00812608 g       *ABS*	00000000 _end
008087e4 g     F .text	00000164 __fputwc
00800248 g       *ABS*	00000000 __ram_exceptions_end
00806ccc g     F .text	0000007c __swrite
00811760 g     O .rwdata	00000004 __malloc_trim_threshold
00804e4c g     F .text	0000000c __locale_msgcharset
0081013c g     F .text	00000038 exit
00804cf0 g     F .text	000000c4 _fwalk_reent
008064d4 g     F .text	000001fc __mdiff
0080a54c g     F .text	00000074 .hidden __modsi3
00811794 g     O .rwdata	00000004 __ctype_ptr__
01000000 g       *ABS*	00000000 __alt_data_end
00800020 g     F .exceptions	00000000 alt_exception
008047bc g     F .text	00000004 __sfp_lock_release
0081080f g     O .rodata	00000101 _ctype_
0080ef40 g     F .text	00000054 altera_avalon_uart_close
00810488 g     F .text	00000034 _exit
0080f394 g     F .text	0000012c alt_alarm_start
00804e90 g     F .text	000001bc __smakebuf_r
00806e88 g     F .text	00000098 strlen
0080f91c g     F .text	00000154 open
0080b898 g     F .text	000000dc .hidden __gedf2
00811764 g     O .rwdata	00000004 __wctomb
0080701c g     F .text	00000018 __sprint_r
0080f6a8 g     F .text	00000034 alt_icache_flush_all
00811780 g     O .rwdata	00000004 alt_priority_mask
008026fc g     F .text	0000001c __vfprintf_internal
0080efd0 g     F .text	000001dc altera_avalon_uart_read
008099bc g     F .text	0000005c _wctomb_r
0080c180 g     F .text	000008fc .hidden __subdf3
00805f08 g     F .text	000000b0 __lo0bits
0081178c g     O .rwdata	00000008 alt_alarm_list
0080f5e8 g     F .text	00000060 _do_ctors
008098cc g     F .text	000000c0 wcrtomb
0080cd20 g     F .text	000000d0 close
0080d1d0 g     F .text	00000084 alt_load
0080896c g     F .text	00000080 fputwc
008047c0 g     F .text	00000004 __sinit_lock_acquire
00805c7c g     F .text	00000120 __multadd
00805c54 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00800000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
  800000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
  800004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
  800008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  80000c:	00bffd16 	blt	zero,r2,800004 <__alt_data_end+0xff800004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  800010:	00402034 	movhi	at,128
    ori r1, r1, %lo(_start)
  800014:	08409214 	ori	at,at,584
    jmp r1
  800018:	0800683a 	jmp	at
  80001c:	00000000 	call	0 <__alt_mem_new_sdram_controller_0-0x800000>

Disassembly of section .exceptions:

00800020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  800020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  800024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  800028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  80002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  800030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  800034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  800038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  80003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  800040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  800044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  800048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  80004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  800050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  800054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  800058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  80005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  800060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  800064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  800068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  80006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  800070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  800074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  800078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  80007c:	10000326 	beq	r2,zero,80008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  800080:	20000226 	beq	r4,zero,80008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  800084:	08000fc0 	call	8000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  800088:	00000706 	br	8000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  80008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  800090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  800094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  800098:	08001d40 	call	8001d4 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  80009c:	1000021e 	bne	r2,zero,8000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  8000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  8000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  8000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  8000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  8000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  8000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  8000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  8000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  8000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  8000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  8000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  8000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  8000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  8000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  8000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  8000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  8000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  8000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  8000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  8000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  8000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  8000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  8000f8:	ef80083a 	eret

008000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  8000fc:	defff904 	addi	sp,sp,-28
  800100:	dfc00615 	stw	ra,24(sp)
  800104:	df000515 	stw	fp,20(sp)
  800108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
  80010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  800110:	0005313a 	rdctl	r2,ipending
  800114:	e0bffe15 	stw	r2,-8(fp)

  return active;
  800118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
  80011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
  800120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
  800124:	00800044 	movi	r2,1
  800128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  80012c:	e0fffb17 	ldw	r3,-20(fp)
  800130:	e0bffc17 	ldw	r2,-16(fp)
  800134:	1884703a 	and	r2,r3,r2
  800138:	10001526 	beq	r2,zero,800190 <alt_irq_handler+0x94>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
  80013c:	00802074 	movhi	r2,129
  800140:	10894204 	addi	r2,r2,9480
  800144:	e0fffd17 	ldw	r3,-12(fp)
  800148:	180690fa 	slli	r3,r3,3
  80014c:	10c5883a 	add	r2,r2,r3
  800150:	10c00017 	ldw	r3,0(r2)
  800154:	00802074 	movhi	r2,129
  800158:	10894204 	addi	r2,r2,9480
  80015c:	e13ffd17 	ldw	r4,-12(fp)
  800160:	200890fa 	slli	r4,r4,3
  800164:	1105883a 	add	r2,r2,r4
  800168:	10800104 	addi	r2,r2,4
  80016c:	10800017 	ldw	r2,0(r2)
  800170:	e17ffd17 	ldw	r5,-12(fp)
  800174:	1009883a 	mov	r4,r2
  800178:	183ee83a 	callr	r3
#endif
        break;
  80017c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  800180:	0005313a 	rdctl	r2,ipending
  800184:	e0bfff15 	stw	r2,-4(fp)

  return active;
  800188:	e0bfff17 	ldw	r2,-4(fp)
  80018c:	00000706 	br	8001ac <alt_irq_handler+0xb0>
      }
      mask <<= 1;
  800190:	e0bffc17 	ldw	r2,-16(fp)
  800194:	1085883a 	add	r2,r2,r2
  800198:	e0bffc15 	stw	r2,-16(fp)
      i++;
  80019c:	e0bffd17 	ldw	r2,-12(fp)
  8001a0:	10800044 	addi	r2,r2,1
  8001a4:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
  8001a8:	003fe006 	br	80012c <__alt_data_end+0xff80012c>

    active = alt_irq_pending ();
  8001ac:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
  8001b0:	e0bffb17 	ldw	r2,-20(fp)
  8001b4:	103fda1e 	bne	r2,zero,800120 <__alt_data_end+0xff800120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
  8001b8:	0001883a 	nop
}
  8001bc:	0001883a 	nop
  8001c0:	e037883a 	mov	sp,fp
  8001c4:	dfc00117 	ldw	ra,4(sp)
  8001c8:	df000017 	ldw	fp,0(sp)
  8001cc:	dec00204 	addi	sp,sp,8
  8001d0:	f800283a 	ret

008001d4 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
  8001d4:	defffb04 	addi	sp,sp,-20
  8001d8:	dfc00415 	stw	ra,16(sp)
  8001dc:	df000315 	stw	fp,12(sp)
  8001e0:	df000304 	addi	fp,sp,12
  8001e4:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
  8001e8:	000531fa 	rdctl	r2,exception
  8001ec:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
  8001f0:	e0bffd17 	ldw	r2,-12(fp)
  8001f4:	10801f0c 	andi	r2,r2,124
  8001f8:	1004d0ba 	srli	r2,r2,2
  8001fc:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
  800200:	0005333a 	rdctl	r2,badaddr
  800204:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
  800208:	d0a36417 	ldw	r2,-29296(gp)
  80020c:	10000726 	beq	r2,zero,80022c <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
  800210:	d0a36417 	ldw	r2,-29296(gp)
  800214:	e0fffd17 	ldw	r3,-12(fp)
  800218:	e1bffe17 	ldw	r6,-8(fp)
  80021c:	e17fff17 	ldw	r5,-4(fp)
  800220:	1809883a 	mov	r4,r3
  800224:	103ee83a 	callr	r2
  800228:	00000206 	br	800234 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
  80022c:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
  800230:	0005883a 	mov	r2,zero
}
  800234:	e037883a 	mov	sp,fp
  800238:	dfc00117 	ldw	ra,4(sp)
  80023c:	df000017 	ldw	fp,0(sp)
  800240:	dec00204 	addi	sp,sp,8
  800244:	f800283a 	ret

Disassembly of section .text:

00800248 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
  800248:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
  80024c:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
  800250:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
  800254:	00bffd16 	blt	zero,r2,80024c <__alt_data_end+0xff80024c>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  800258:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
  80025c:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
  800260:	06802074 	movhi	gp,129
    ori gp, gp, %lo(_gp)
  800264:	d6a5d314 	ori	gp,gp,38732
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  800268:	00802074 	movhi	r2,129
    ori r2, r2, %lo(__bss_start)
  80026c:	10892814 	ori	r2,r2,9376

    movhi r3, %hi(__bss_end)
  800270:	00c02074 	movhi	r3,129
    ori r3, r3, %lo(__bss_end)
  800274:	18c98214 	ori	r3,r3,9736

    beq r2, r3, 1f
  800278:	10c00326 	beq	r2,r3,800288 <_start+0x40>

0:
    stw zero, (r2)
  80027c:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  800280:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  800284:	10fffd36 	bltu	r2,r3,80027c <__alt_data_end+0xff80027c>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  800288:	080d1d00 	call	80d1d0 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  80028c:	080d3640 	call	80d364 <alt_main>

00800290 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  800290:	003fff06 	br	800290 <__alt_data_end+0xff800290>

00800294 <main>:
static int button_value = 0xF;
static int counter = 0;
static int button_pressed = 0;

int main()
{
  800294:	defffd04 	addi	sp,sp,-12
  800298:	dfc00215 	stw	ra,8(sp)
  80029c:	df000115 	stw	fp,4(sp)
  8002a0:	df000104 	addi	fp,sp,4
	//IOWR(BUTTON_PIO_BASE, 3, 0);
	//IOWR(TIMER_0_BASE, 0, 0);


	//IOWR(TIMER_0_BASE, 1, 0x0);
	alt_irq_register(TIMER_0_IRQ, (void*)0, handle_timer_interrupt);
  8002a4:	01802034 	movhi	r6,128
  8002a8:	3180d704 	addi	r6,r6,860
  8002ac:	000b883a 	mov	r5,zero
  8002b0:	01000144 	movi	r4,5
  8002b4:	080cf080 	call	80cf08 <alt_irq_register>
	alt_irq_register(BUTTON_PIO_IRQ, (void*)0, btn_interrupt);
  8002b8:	01802034 	movhi	r6,128
  8002bc:	31811004 	addi	r6,r6,1088
  8002c0:	000b883a 	mov	r5,zero
  8002c4:	01000044 	movi	r4,1
  8002c8:	080cf080 	call	80cf08 <alt_irq_register>
	IOWR(BUTTON_PIO_BASE, 3, 0);
  8002cc:	0007883a 	mov	r3,zero
  8002d0:	00804034 	movhi	r2,256
  8002d4:	10844b04 	addi	r2,r2,4396
  8002d8:	10c00035 	stwio	r3,0(r2)
	IOWR(BUTTON_PIO_BASE, 2, 0xF);
  8002dc:	00c003c4 	movi	r3,15
  8002e0:	00804034 	movhi	r2,256
  8002e4:	10844a04 	addi	r2,r2,4392
  8002e8:	10c00035 	stwio	r3,0(r2)
	IOWR(TIMER_0_BASE, 0, 0); // status
  8002ec:	0007883a 	mov	r3,zero
  8002f0:	00804034 	movhi	r2,256
  8002f4:	10841804 	addi	r2,r2,4192
  8002f8:	10c00035 	stwio	r3,0(r2)
	IOWR(TIMER_0_BASE, 1, 0x8); // control (stop is on, ITO is on)
  8002fc:	00c00204 	movi	r3,8
  800300:	00804034 	movhi	r2,256
  800304:	10841904 	addi	r2,r2,4196
  800308:	10c00035 	stwio	r3,0(r2)
	IOWR(TIMER_0_BASE, 2, 0x8F9C); // periodl
  80030c:	00e3e714 	movui	r3,36764
  800310:	00804034 	movhi	r2,256
  800314:	10841a04 	addi	r2,r2,4200
  800318:	10c00035 	stwio	r3,0(r2)
	IOWR(TIMER_0_BASE, 3, 1); // periodh
  80031c:	00c00044 	movi	r3,1
  800320:	00804034 	movhi	r2,256
  800324:	10841b04 	addi	r2,r2,4204
  800328:	10c00035 	stwio	r3,0(r2)

	int x = 0;
  80032c:	e03fff15 	stw	zero,-4(fp)
	while(1){
		if (button_value != 0xF){
  800330:	d0a00017 	ldw	r2,-32768(gp)
  800334:	108003e0 	cmpeqi	r2,r2,15
  800338:	103ffd1e 	bne	r2,zero,800330 <__alt_data_end+0xff800330>
			printf("button value: %d\n", button_value);
  80033c:	d0a00017 	ldw	r2,-32768(gp)
  800340:	100b883a 	mov	r5,r2
  800344:	01002074 	movhi	r4,129
  800348:	21012f04 	addi	r4,r4,1212
  80034c:	08004c80 	call	8004c8 <printf>
			button_value = 0xF;
  800350:	008003c4 	movi	r2,15
  800354:	d0a00015 	stw	r2,-32768(gp)
		}
	}
  800358:	003ff506 	br	800330 <__alt_data_end+0xff800330>

0080035c <handle_timer_interrupt>:

	return 0;
}

static void handle_timer_interrupt(void* context, alt_32 id){
  80035c:	defffc04 	addi	sp,sp,-16
  800360:	df000315 	stw	fp,12(sp)
  800364:	df000304 	addi	fp,sp,12
  800368:	e13ffe15 	stw	r4,-8(fp)
  80036c:	e17fff15 	stw	r5,-4(fp)
	int current_value = IORD(BUTTON_PIO_BASE, 0);
  800370:	00804034 	movhi	r2,256
  800374:	10844804 	addi	r2,r2,4384
  800378:	10800037 	ldwio	r2,0(r2)
  80037c:	e0bffd15 	stw	r2,-12(fp)
	IOWR(LED_PIO_BASE, 0, 0x1);
  800380:	00c00044 	movi	r3,1
  800384:	00804034 	movhi	r2,256
  800388:	10844c04 	addi	r2,r2,4400
  80038c:	10c00035 	stwio	r3,0(r2)

	if (button_pressed == 0 && current_value != 0xF){
  800390:	d0a35617 	ldw	r2,-29352(gp)
  800394:	1000071e 	bne	r2,zero,8003b4 <handle_timer_interrupt+0x58>
  800398:	e0bffd17 	ldw	r2,-12(fp)
  80039c:	108003e0 	cmpeqi	r2,r2,15
  8003a0:	1000041e 	bne	r2,zero,8003b4 <handle_timer_interrupt+0x58>
		button_value = current_value;
  8003a4:	e0bffd17 	ldw	r2,-12(fp)
  8003a8:	d0a00015 	stw	r2,-32768(gp)
		button_pressed = 1;
  8003ac:	00800044 	movi	r2,1
  8003b0:	d0a35615 	stw	r2,-29352(gp)
	}

	if(current_value == 0xF){
  8003b4:	e0bffd17 	ldw	r2,-12(fp)
  8003b8:	108003d8 	cmpnei	r2,r2,15
  8003bc:	10000a1e 	bne	r2,zero,8003e8 <handle_timer_interrupt+0x8c>
		counter += 1;
  8003c0:	d0a35517 	ldw	r2,-29356(gp)
  8003c4:	10800044 	addi	r2,r2,1
  8003c8:	d0a35515 	stw	r2,-29356(gp)
		if (counter < 20){
  8003cc:	d0a35517 	ldw	r2,-29356(gp)
  8003d0:	10800508 	cmpgei	r2,r2,20
  8003d4:	1000041e 	bne	r2,zero,8003e8 <handle_timer_interrupt+0x8c>
			// restart timer
			IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_0_BASE, 0x5);
  8003d8:	00c00144 	movi	r3,5
  8003dc:	00804034 	movhi	r2,256
  8003e0:	10841904 	addi	r2,r2,4196
  8003e4:	10c00035 	stwio	r3,0(r2)
        }
	}

	if (counter > 20){
  8003e8:	d0a35517 	ldw	r2,-29356(gp)
  8003ec:	10800550 	cmplti	r2,r2,21
  8003f0:	10000e1e 	bne	r2,zero,80042c <handle_timer_interrupt+0xd0>
        IOWR(LED_PIO_BASE, 0, 0x0);
  8003f4:	0007883a 	mov	r3,zero
  8003f8:	00804034 	movhi	r2,256
  8003fc:	10844c04 	addi	r2,r2,4400
  800400:	10c00035 	stwio	r3,0(r2)
        IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_0_BASE, 0x8);
  800404:	00c00204 	movi	r3,8
  800408:	00804034 	movhi	r2,256
  80040c:	10841904 	addi	r2,r2,4196
  800410:	10c00035 	stwio	r3,0(r2)
        IOWR(BUTTON_PIO_BASE, 2, 0xF);
  800414:	00c003c4 	movi	r3,15
  800418:	00804034 	movhi	r2,256
  80041c:	10844a04 	addi	r2,r2,4392
  800420:	10c00035 	stwio	r3,0(r2)
        // reset timer variables
        counter = 0;
  800424:	d0235515 	stw	zero,-29356(gp)
        button_pressed = 0;
  800428:	d0235615 	stw	zero,-29352(gp)
	}
}
  80042c:	0001883a 	nop
  800430:	e037883a 	mov	sp,fp
  800434:	df000017 	ldw	fp,0(sp)
  800438:	dec00104 	addi	sp,sp,4
  80043c:	f800283a 	ret

00800440 <btn_interrupt>:

static void btn_interrupt(void *context, alt_32 id){
  800440:	defffd04 	addi	sp,sp,-12
  800444:	df000215 	stw	fp,8(sp)
  800448:	df000204 	addi	fp,sp,8
  80044c:	e13ffe15 	stw	r4,-8(fp)
  800450:	e17fff15 	stw	r5,-4(fp)
	IOWR(BUTTON_PIO_BASE, 3, 0);
  800454:	0007883a 	mov	r3,zero
  800458:	00804034 	movhi	r2,256
  80045c:	10844b04 	addi	r2,r2,4396
  800460:	10c00035 	stwio	r3,0(r2)
	IOWR(BUTTON_PIO_BASE, 2, 0);
  800464:	0007883a 	mov	r3,zero
  800468:	00804034 	movhi	r2,256
  80046c:	10844a04 	addi	r2,r2,4392
  800470:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_0_BASE, 0x5);
  800474:	00c00144 	movi	r3,5
  800478:	00804034 	movhi	r2,256
  80047c:	10841904 	addi	r2,r2,4196
  800480:	10c00035 	stwio	r3,0(r2)
}
  800484:	0001883a 	nop
  800488:	e037883a 	mov	sp,fp
  80048c:	df000017 	ldw	fp,0(sp)
  800490:	dec00104 	addi	sp,sp,4
  800494:	f800283a 	ret

00800498 <_printf_r>:
  800498:	defffd04 	addi	sp,sp,-12
  80049c:	2805883a 	mov	r2,r5
  8004a0:	dfc00015 	stw	ra,0(sp)
  8004a4:	d9800115 	stw	r6,4(sp)
  8004a8:	d9c00215 	stw	r7,8(sp)
  8004ac:	21400217 	ldw	r5,8(r4)
  8004b0:	d9c00104 	addi	r7,sp,4
  8004b4:	100d883a 	mov	r6,r2
  8004b8:	08005040 	call	800504 <___vfprintf_internal_r>
  8004bc:	dfc00017 	ldw	ra,0(sp)
  8004c0:	dec00304 	addi	sp,sp,12
  8004c4:	f800283a 	ret

008004c8 <printf>:
  8004c8:	defffc04 	addi	sp,sp,-16
  8004cc:	dfc00015 	stw	ra,0(sp)
  8004d0:	d9400115 	stw	r5,4(sp)
  8004d4:	d9800215 	stw	r6,8(sp)
  8004d8:	d9c00315 	stw	r7,12(sp)
  8004dc:	00802074 	movhi	r2,129
  8004e0:	1085d504 	addi	r2,r2,5972
  8004e4:	10800017 	ldw	r2,0(r2)
  8004e8:	200b883a 	mov	r5,r4
  8004ec:	d9800104 	addi	r6,sp,4
  8004f0:	11000217 	ldw	r4,8(r2)
  8004f4:	08026fc0 	call	8026fc <__vfprintf_internal>
  8004f8:	dfc00017 	ldw	ra,0(sp)
  8004fc:	dec00404 	addi	sp,sp,16
  800500:	f800283a 	ret

00800504 <___vfprintf_internal_r>:
  800504:	deffb804 	addi	sp,sp,-288
  800508:	dfc04715 	stw	ra,284(sp)
  80050c:	ddc04515 	stw	r23,276(sp)
  800510:	dd404315 	stw	r21,268(sp)
  800514:	d9002c15 	stw	r4,176(sp)
  800518:	282f883a 	mov	r23,r5
  80051c:	302b883a 	mov	r21,r6
  800520:	d9c02d15 	stw	r7,180(sp)
  800524:	df004615 	stw	fp,280(sp)
  800528:	dd804415 	stw	r22,272(sp)
  80052c:	dd004215 	stw	r20,264(sp)
  800530:	dcc04115 	stw	r19,260(sp)
  800534:	dc804015 	stw	r18,256(sp)
  800538:	dc403f15 	stw	r17,252(sp)
  80053c:	dc003e15 	stw	r16,248(sp)
  800540:	0804e600 	call	804e60 <_localeconv_r>
  800544:	10800017 	ldw	r2,0(r2)
  800548:	1009883a 	mov	r4,r2
  80054c:	d8803415 	stw	r2,208(sp)
  800550:	0806e880 	call	806e88 <strlen>
  800554:	d8803715 	stw	r2,220(sp)
  800558:	d8802c17 	ldw	r2,176(sp)
  80055c:	10000226 	beq	r2,zero,800568 <___vfprintf_internal_r+0x64>
  800560:	10800e17 	ldw	r2,56(r2)
  800564:	1000f926 	beq	r2,zero,80094c <___vfprintf_internal_r+0x448>
  800568:	b880030b 	ldhu	r2,12(r23)
  80056c:	10c8000c 	andi	r3,r2,8192
  800570:	1800061e 	bne	r3,zero,80058c <___vfprintf_internal_r+0x88>
  800574:	b9001917 	ldw	r4,100(r23)
  800578:	00f7ffc4 	movi	r3,-8193
  80057c:	10880014 	ori	r2,r2,8192
  800580:	20c6703a 	and	r3,r4,r3
  800584:	b880030d 	sth	r2,12(r23)
  800588:	b8c01915 	stw	r3,100(r23)
  80058c:	10c0020c 	andi	r3,r2,8
  800590:	1800c126 	beq	r3,zero,800898 <___vfprintf_internal_r+0x394>
  800594:	b8c00417 	ldw	r3,16(r23)
  800598:	1800bf26 	beq	r3,zero,800898 <___vfprintf_internal_r+0x394>
  80059c:	1080068c 	andi	r2,r2,26
  8005a0:	00c00284 	movi	r3,10
  8005a4:	10c0c426 	beq	r2,r3,8008b8 <___vfprintf_internal_r+0x3b4>
  8005a8:	d8c00404 	addi	r3,sp,16
  8005ac:	05002074 	movhi	r20,129
  8005b0:	d9001e04 	addi	r4,sp,120
  8005b4:	a5014484 	addi	r20,r20,1298
  8005b8:	d8c01e15 	stw	r3,120(sp)
  8005bc:	d8002015 	stw	zero,128(sp)
  8005c0:	d8001f15 	stw	zero,124(sp)
  8005c4:	d8003315 	stw	zero,204(sp)
  8005c8:	d8003615 	stw	zero,216(sp)
  8005cc:	d8003815 	stw	zero,224(sp)
  8005d0:	1811883a 	mov	r8,r3
  8005d4:	d8003915 	stw	zero,228(sp)
  8005d8:	d8003a15 	stw	zero,232(sp)
  8005dc:	d8002f15 	stw	zero,188(sp)
  8005e0:	d9002815 	stw	r4,160(sp)
  8005e4:	a8800007 	ldb	r2,0(r21)
  8005e8:	10027b26 	beq	r2,zero,800fd8 <___vfprintf_internal_r+0xad4>
  8005ec:	00c00944 	movi	r3,37
  8005f0:	a821883a 	mov	r16,r21
  8005f4:	10c0021e 	bne	r2,r3,800600 <___vfprintf_internal_r+0xfc>
  8005f8:	00001406 	br	80064c <___vfprintf_internal_r+0x148>
  8005fc:	10c00326 	beq	r2,r3,80060c <___vfprintf_internal_r+0x108>
  800600:	84000044 	addi	r16,r16,1
  800604:	80800007 	ldb	r2,0(r16)
  800608:	103ffc1e 	bne	r2,zero,8005fc <__alt_data_end+0xff8005fc>
  80060c:	8563c83a 	sub	r17,r16,r21
  800610:	88000e26 	beq	r17,zero,80064c <___vfprintf_internal_r+0x148>
  800614:	d8c02017 	ldw	r3,128(sp)
  800618:	d8801f17 	ldw	r2,124(sp)
  80061c:	45400015 	stw	r21,0(r8)
  800620:	1c47883a 	add	r3,r3,r17
  800624:	10800044 	addi	r2,r2,1
  800628:	d8c02015 	stw	r3,128(sp)
  80062c:	44400115 	stw	r17,4(r8)
  800630:	d8801f15 	stw	r2,124(sp)
  800634:	00c001c4 	movi	r3,7
  800638:	1880a716 	blt	r3,r2,8008d8 <___vfprintf_internal_r+0x3d4>
  80063c:	42000204 	addi	r8,r8,8
  800640:	d9402f17 	ldw	r5,188(sp)
  800644:	2c4b883a 	add	r5,r5,r17
  800648:	d9402f15 	stw	r5,188(sp)
  80064c:	80800007 	ldb	r2,0(r16)
  800650:	1000a826 	beq	r2,zero,8008f4 <___vfprintf_internal_r+0x3f0>
  800654:	84400047 	ldb	r17,1(r16)
  800658:	00bfffc4 	movi	r2,-1
  80065c:	85400044 	addi	r21,r16,1
  800660:	d8002785 	stb	zero,158(sp)
  800664:	0007883a 	mov	r3,zero
  800668:	000f883a 	mov	r7,zero
  80066c:	d8802915 	stw	r2,164(sp)
  800670:	d8003115 	stw	zero,196(sp)
  800674:	0025883a 	mov	r18,zero
  800678:	01401604 	movi	r5,88
  80067c:	01800244 	movi	r6,9
  800680:	02800a84 	movi	r10,42
  800684:	02401b04 	movi	r9,108
  800688:	ad400044 	addi	r21,r21,1
  80068c:	88bff804 	addi	r2,r17,-32
  800690:	28830436 	bltu	r5,r2,8012a4 <___vfprintf_internal_r+0xda0>
  800694:	100490ba 	slli	r2,r2,2
  800698:	01002034 	movhi	r4,128
  80069c:	2101ab04 	addi	r4,r4,1708
  8006a0:	1105883a 	add	r2,r2,r4
  8006a4:	10800017 	ldw	r2,0(r2)
  8006a8:	1000683a 	jmp	r2
  8006ac:	008011c4 	movi	r2,71
  8006b0:	008012a4 	muli	r2,zero,74
  8006b4:	008012a4 	muli	r2,zero,74
  8006b8:	008011e4 	muli	r2,zero,71
  8006bc:	008012a4 	muli	r2,zero,74
  8006c0:	008012a4 	muli	r2,zero,74
  8006c4:	008012a4 	muli	r2,zero,74
  8006c8:	008012a4 	muli	r2,zero,74
  8006cc:	008012a4 	muli	r2,zero,74
  8006d0:	008012a4 	muli	r2,zero,74
  8006d4:	00800958 	cmpnei	r2,zero,37
  8006d8:	00801100 	call	80110 <__alt_mem_new_sdram_controller_0-0x77fef0>
  8006dc:	008012a4 	muli	r2,zero,74
  8006e0:	00800820 	cmpeqi	r2,zero,32
  8006e4:	00800980 	call	80098 <__alt_mem_new_sdram_controller_0-0x77ff68>
  8006e8:	008012a4 	muli	r2,zero,74
  8006ec:	008009c0 	call	8009c <__alt_mem_new_sdram_controller_0-0x77ff64>
  8006f0:	008009cc 	andi	r2,zero,39
  8006f4:	008009cc 	andi	r2,zero,39
  8006f8:	008009cc 	andi	r2,zero,39
  8006fc:	008009cc 	andi	r2,zero,39
  800700:	008009cc 	andi	r2,zero,39
  800704:	008009cc 	andi	r2,zero,39
  800708:	008009cc 	andi	r2,zero,39
  80070c:	008009cc 	andi	r2,zero,39
  800710:	008009cc 	andi	r2,zero,39
  800714:	008012a4 	muli	r2,zero,74
  800718:	008012a4 	muli	r2,zero,74
  80071c:	008012a4 	muli	r2,zero,74
  800720:	008012a4 	muli	r2,zero,74
  800724:	008012a4 	muli	r2,zero,74
  800728:	008012a4 	muli	r2,zero,74
  80072c:	008012a4 	muli	r2,zero,74
  800730:	008012a4 	muli	r2,zero,74
  800734:	008012a4 	muli	r2,zero,74
  800738:	008012a4 	muli	r2,zero,74
  80073c:	00800a00 	call	800a0 <__alt_mem_new_sdram_controller_0-0x77ff60>
  800740:	00800abc 	xorhi	r2,zero,42
  800744:	008012a4 	muli	r2,zero,74
  800748:	00800abc 	xorhi	r2,zero,42
  80074c:	008012a4 	muli	r2,zero,74
  800750:	008012a4 	muli	r2,zero,74
  800754:	008012a4 	muli	r2,zero,74
  800758:	008012a4 	muli	r2,zero,74
  80075c:	00800b5c 	xori	r2,zero,45
  800760:	008012a4 	muli	r2,zero,74
  800764:	008012a4 	muli	r2,zero,74
  800768:	00800b68 	cmpgeui	r2,zero,45
  80076c:	008012a4 	muli	r2,zero,74
  800770:	008012a4 	muli	r2,zero,74
  800774:	008012a4 	muli	r2,zero,74
  800778:	008012a4 	muli	r2,zero,74
  80077c:	008012a4 	muli	r2,zero,74
  800780:	00800fe0 	cmpeqi	r2,zero,63
  800784:	008012a4 	muli	r2,zero,74
  800788:	008012a4 	muli	r2,zero,74
  80078c:	00801040 	call	80104 <__alt_mem_new_sdram_controller_0-0x77fefc>
  800790:	008012a4 	muli	r2,zero,74
  800794:	008012a4 	muli	r2,zero,74
  800798:	008012a4 	muli	r2,zero,74
  80079c:	008012a4 	muli	r2,zero,74
  8007a0:	008012a4 	muli	r2,zero,74
  8007a4:	008012a4 	muli	r2,zero,74
  8007a8:	008012a4 	muli	r2,zero,74
  8007ac:	008012a4 	muli	r2,zero,74
  8007b0:	008012a4 	muli	r2,zero,74
  8007b4:	008012a4 	muli	r2,zero,74
  8007b8:	00801250 	cmplti	r2,zero,73
  8007bc:	008011f0 	cmpltui	r2,zero,71
  8007c0:	00800abc 	xorhi	r2,zero,42
  8007c4:	00800abc 	xorhi	r2,zero,42
  8007c8:	00800abc 	xorhi	r2,zero,42
  8007cc:	00801200 	call	80120 <__alt_mem_new_sdram_controller_0-0x77fee0>
  8007d0:	008011f0 	cmpltui	r2,zero,71
  8007d4:	008012a4 	muli	r2,zero,74
  8007d8:	008012a4 	muli	r2,zero,74
  8007dc:	0080120c 	andi	r2,zero,72
  8007e0:	008012a4 	muli	r2,zero,74
  8007e4:	0080121c 	xori	r2,zero,72
  8007e8:	008010f0 	cmpltui	r2,zero,67
  8007ec:	0080082c 	andhi	r2,zero,32
  8007f0:	00801110 	cmplti	r2,zero,68
  8007f4:	008012a4 	muli	r2,zero,74
  8007f8:	0080111c 	xori	r2,zero,68
  8007fc:	008012a4 	muli	r2,zero,74
  800800:	00801178 	rdprs	r2,zero,69
  800804:	008012a4 	muli	r2,zero,74
  800808:	008012a4 	muli	r2,zero,74
  80080c:	00801188 	cmpgei	r2,zero,70
  800810:	d9003117 	ldw	r4,196(sp)
  800814:	d8802d15 	stw	r2,180(sp)
  800818:	0109c83a 	sub	r4,zero,r4
  80081c:	d9003115 	stw	r4,196(sp)
  800820:	94800114 	ori	r18,r18,4
  800824:	ac400007 	ldb	r17,0(r21)
  800828:	003f9706 	br	800688 <__alt_data_end+0xff800688>
  80082c:	00800c04 	movi	r2,48
  800830:	d9002d17 	ldw	r4,180(sp)
  800834:	d9402917 	ldw	r5,164(sp)
  800838:	d8802705 	stb	r2,156(sp)
  80083c:	00801e04 	movi	r2,120
  800840:	d8802745 	stb	r2,157(sp)
  800844:	d8002785 	stb	zero,158(sp)
  800848:	20c00104 	addi	r3,r4,4
  80084c:	24c00017 	ldw	r19,0(r4)
  800850:	002d883a 	mov	r22,zero
  800854:	90800094 	ori	r2,r18,2
  800858:	28029a16 	blt	r5,zero,8012c4 <___vfprintf_internal_r+0xdc0>
  80085c:	00bfdfc4 	movi	r2,-129
  800860:	90a4703a 	and	r18,r18,r2
  800864:	d8c02d15 	stw	r3,180(sp)
  800868:	94800094 	ori	r18,r18,2
  80086c:	9802871e 	bne	r19,zero,80128c <___vfprintf_internal_r+0xd88>
  800870:	00802074 	movhi	r2,129
  800874:	10813d04 	addi	r2,r2,1268
  800878:	d8803915 	stw	r2,228(sp)
  80087c:	04401e04 	movi	r17,120
  800880:	d8802917 	ldw	r2,164(sp)
  800884:	0039883a 	mov	fp,zero
  800888:	1001e926 	beq	r2,zero,801030 <___vfprintf_internal_r+0xb2c>
  80088c:	0027883a 	mov	r19,zero
  800890:	002d883a 	mov	r22,zero
  800894:	00020506 	br	8010ac <___vfprintf_internal_r+0xba8>
  800898:	d9002c17 	ldw	r4,176(sp)
  80089c:	b80b883a 	mov	r5,r23
  8008a0:	08027d40 	call	8027d4 <__swsetup_r>
  8008a4:	1005ac1e 	bne	r2,zero,801f58 <___vfprintf_internal_r+0x1a54>
  8008a8:	b880030b 	ldhu	r2,12(r23)
  8008ac:	00c00284 	movi	r3,10
  8008b0:	1080068c 	andi	r2,r2,26
  8008b4:	10ff3c1e 	bne	r2,r3,8005a8 <__alt_data_end+0xff8005a8>
  8008b8:	b880038f 	ldh	r2,14(r23)
  8008bc:	103f3a16 	blt	r2,zero,8005a8 <__alt_data_end+0xff8005a8>
  8008c0:	d9c02d17 	ldw	r7,180(sp)
  8008c4:	d9002c17 	ldw	r4,176(sp)
  8008c8:	a80d883a 	mov	r6,r21
  8008cc:	b80b883a 	mov	r5,r23
  8008d0:	08027180 	call	802718 <__sbprintf>
  8008d4:	00001106 	br	80091c <___vfprintf_internal_r+0x418>
  8008d8:	d9002c17 	ldw	r4,176(sp)
  8008dc:	d9801e04 	addi	r6,sp,120
  8008e0:	b80b883a 	mov	r5,r23
  8008e4:	080701c0 	call	80701c <__sprint_r>
  8008e8:	1000081e 	bne	r2,zero,80090c <___vfprintf_internal_r+0x408>
  8008ec:	da000404 	addi	r8,sp,16
  8008f0:	003f5306 	br	800640 <__alt_data_end+0xff800640>
  8008f4:	d8802017 	ldw	r2,128(sp)
  8008f8:	10000426 	beq	r2,zero,80090c <___vfprintf_internal_r+0x408>
  8008fc:	d9002c17 	ldw	r4,176(sp)
  800900:	d9801e04 	addi	r6,sp,120
  800904:	b80b883a 	mov	r5,r23
  800908:	080701c0 	call	80701c <__sprint_r>
  80090c:	b880030b 	ldhu	r2,12(r23)
  800910:	1080100c 	andi	r2,r2,64
  800914:	1005901e 	bne	r2,zero,801f58 <___vfprintf_internal_r+0x1a54>
  800918:	d8802f17 	ldw	r2,188(sp)
  80091c:	dfc04717 	ldw	ra,284(sp)
  800920:	df004617 	ldw	fp,280(sp)
  800924:	ddc04517 	ldw	r23,276(sp)
  800928:	dd804417 	ldw	r22,272(sp)
  80092c:	dd404317 	ldw	r21,268(sp)
  800930:	dd004217 	ldw	r20,264(sp)
  800934:	dcc04117 	ldw	r19,260(sp)
  800938:	dc804017 	ldw	r18,256(sp)
  80093c:	dc403f17 	ldw	r17,252(sp)
  800940:	dc003e17 	ldw	r16,248(sp)
  800944:	dec04804 	addi	sp,sp,288
  800948:	f800283a 	ret
  80094c:	d9002c17 	ldw	r4,176(sp)
  800950:	08047a80 	call	8047a8 <__sinit>
  800954:	003f0406 	br	800568 <__alt_data_end+0xff800568>
  800958:	d8802d17 	ldw	r2,180(sp)
  80095c:	d9002d17 	ldw	r4,180(sp)
  800960:	10800017 	ldw	r2,0(r2)
  800964:	d8803115 	stw	r2,196(sp)
  800968:	20800104 	addi	r2,r4,4
  80096c:	d9003117 	ldw	r4,196(sp)
  800970:	203fa716 	blt	r4,zero,800810 <__alt_data_end+0xff800810>
  800974:	d8802d15 	stw	r2,180(sp)
  800978:	ac400007 	ldb	r17,0(r21)
  80097c:	003f4206 	br	800688 <__alt_data_end+0xff800688>
  800980:	ac400007 	ldb	r17,0(r21)
  800984:	aac00044 	addi	r11,r21,1
  800988:	8a872826 	beq	r17,r10,80262c <___vfprintf_internal_r+0x2128>
  80098c:	88bff404 	addi	r2,r17,-48
  800990:	0009883a 	mov	r4,zero
  800994:	30867d36 	bltu	r6,r2,80238c <___vfprintf_internal_r+0x1e88>
  800998:	5c400007 	ldb	r17,0(r11)
  80099c:	210002a4 	muli	r4,r4,10
  8009a0:	5d400044 	addi	r21,r11,1
  8009a4:	a817883a 	mov	r11,r21
  8009a8:	2089883a 	add	r4,r4,r2
  8009ac:	88bff404 	addi	r2,r17,-48
  8009b0:	30bff92e 	bgeu	r6,r2,800998 <__alt_data_end+0xff800998>
  8009b4:	2005c916 	blt	r4,zero,8020dc <___vfprintf_internal_r+0x1bd8>
  8009b8:	d9002915 	stw	r4,164(sp)
  8009bc:	003f3306 	br	80068c <__alt_data_end+0xff80068c>
  8009c0:	94802014 	ori	r18,r18,128
  8009c4:	ac400007 	ldb	r17,0(r21)
  8009c8:	003f2f06 	br	800688 <__alt_data_end+0xff800688>
  8009cc:	a809883a 	mov	r4,r21
  8009d0:	d8003115 	stw	zero,196(sp)
  8009d4:	88bff404 	addi	r2,r17,-48
  8009d8:	0017883a 	mov	r11,zero
  8009dc:	24400007 	ldb	r17,0(r4)
  8009e0:	5ac002a4 	muli	r11,r11,10
  8009e4:	ad400044 	addi	r21,r21,1
  8009e8:	a809883a 	mov	r4,r21
  8009ec:	12d7883a 	add	r11,r2,r11
  8009f0:	88bff404 	addi	r2,r17,-48
  8009f4:	30bff92e 	bgeu	r6,r2,8009dc <__alt_data_end+0xff8009dc>
  8009f8:	dac03115 	stw	r11,196(sp)
  8009fc:	003f2306 	br	80068c <__alt_data_end+0xff80068c>
  800a00:	18c03fcc 	andi	r3,r3,255
  800a04:	18072b1e 	bne	r3,zero,8026b4 <___vfprintf_internal_r+0x21b0>
  800a08:	94800414 	ori	r18,r18,16
  800a0c:	9080080c 	andi	r2,r18,32
  800a10:	10037b26 	beq	r2,zero,801800 <___vfprintf_internal_r+0x12fc>
  800a14:	d9402d17 	ldw	r5,180(sp)
  800a18:	28800117 	ldw	r2,4(r5)
  800a1c:	2cc00017 	ldw	r19,0(r5)
  800a20:	29400204 	addi	r5,r5,8
  800a24:	d9402d15 	stw	r5,180(sp)
  800a28:	102d883a 	mov	r22,r2
  800a2c:	10044b16 	blt	r2,zero,801b5c <___vfprintf_internal_r+0x1658>
  800a30:	d9402917 	ldw	r5,164(sp)
  800a34:	df002783 	ldbu	fp,158(sp)
  800a38:	2803bc16 	blt	r5,zero,80192c <___vfprintf_internal_r+0x1428>
  800a3c:	00ffdfc4 	movi	r3,-129
  800a40:	9d84b03a 	or	r2,r19,r22
  800a44:	90e4703a 	and	r18,r18,r3
  800a48:	10017726 	beq	r2,zero,801028 <___vfprintf_internal_r+0xb24>
  800a4c:	b0038326 	beq	r22,zero,80185c <___vfprintf_internal_r+0x1358>
  800a50:	dc402a15 	stw	r17,168(sp)
  800a54:	dc001e04 	addi	r16,sp,120
  800a58:	b023883a 	mov	r17,r22
  800a5c:	402d883a 	mov	r22,r8
  800a60:	9809883a 	mov	r4,r19
  800a64:	880b883a 	mov	r5,r17
  800a68:	01800284 	movi	r6,10
  800a6c:	000f883a 	mov	r7,zero
  800a70:	0809f900 	call	809f90 <__umoddi3>
  800a74:	10800c04 	addi	r2,r2,48
  800a78:	843fffc4 	addi	r16,r16,-1
  800a7c:	9809883a 	mov	r4,r19
  800a80:	880b883a 	mov	r5,r17
  800a84:	80800005 	stb	r2,0(r16)
  800a88:	01800284 	movi	r6,10
  800a8c:	000f883a 	mov	r7,zero
  800a90:	0809a180 	call	809a18 <__udivdi3>
  800a94:	1027883a 	mov	r19,r2
  800a98:	10c4b03a 	or	r2,r2,r3
  800a9c:	1823883a 	mov	r17,r3
  800aa0:	103fef1e 	bne	r2,zero,800a60 <__alt_data_end+0xff800a60>
  800aa4:	d8c02817 	ldw	r3,160(sp)
  800aa8:	dc402a17 	ldw	r17,168(sp)
  800aac:	b011883a 	mov	r8,r22
  800ab0:	1c07c83a 	sub	r3,r3,r16
  800ab4:	d8c02e15 	stw	r3,184(sp)
  800ab8:	00005906 	br	800c20 <___vfprintf_internal_r+0x71c>
  800abc:	18c03fcc 	andi	r3,r3,255
  800ac0:	1806fa1e 	bne	r3,zero,8026ac <___vfprintf_internal_r+0x21a8>
  800ac4:	9080020c 	andi	r2,r18,8
  800ac8:	10048a26 	beq	r2,zero,801cf4 <___vfprintf_internal_r+0x17f0>
  800acc:	d8c02d17 	ldw	r3,180(sp)
  800ad0:	d9002d17 	ldw	r4,180(sp)
  800ad4:	d9402d17 	ldw	r5,180(sp)
  800ad8:	18c00017 	ldw	r3,0(r3)
  800adc:	21000117 	ldw	r4,4(r4)
  800ae0:	29400204 	addi	r5,r5,8
  800ae4:	d8c03615 	stw	r3,216(sp)
  800ae8:	d9003815 	stw	r4,224(sp)
  800aec:	d9402d15 	stw	r5,180(sp)
  800af0:	d9003617 	ldw	r4,216(sp)
  800af4:	d9403817 	ldw	r5,224(sp)
  800af8:	da003d15 	stw	r8,244(sp)
  800afc:	04000044 	movi	r16,1
  800b00:	0806ba80 	call	806ba8 <__fpclassifyd>
  800b04:	da003d17 	ldw	r8,244(sp)
  800b08:	14041f1e 	bne	r2,r16,801b88 <___vfprintf_internal_r+0x1684>
  800b0c:	d9003617 	ldw	r4,216(sp)
  800b10:	d9403817 	ldw	r5,224(sp)
  800b14:	000d883a 	mov	r6,zero
  800b18:	000f883a 	mov	r7,zero
  800b1c:	080b9740 	call	80b974 <__ledf2>
  800b20:	da003d17 	ldw	r8,244(sp)
  800b24:	1005be16 	blt	r2,zero,802220 <___vfprintf_internal_r+0x1d1c>
  800b28:	df002783 	ldbu	fp,158(sp)
  800b2c:	008011c4 	movi	r2,71
  800b30:	1445330e 	bge	r2,r17,802000 <___vfprintf_internal_r+0x1afc>
  800b34:	04002074 	movhi	r16,129
  800b38:	84013504 	addi	r16,r16,1236
  800b3c:	00c000c4 	movi	r3,3
  800b40:	00bfdfc4 	movi	r2,-129
  800b44:	d8c02a15 	stw	r3,168(sp)
  800b48:	90a4703a 	and	r18,r18,r2
  800b4c:	d8c02e15 	stw	r3,184(sp)
  800b50:	d8002915 	stw	zero,164(sp)
  800b54:	d8003215 	stw	zero,200(sp)
  800b58:	00003706 	br	800c38 <___vfprintf_internal_r+0x734>
  800b5c:	94800214 	ori	r18,r18,8
  800b60:	ac400007 	ldb	r17,0(r21)
  800b64:	003ec806 	br	800688 <__alt_data_end+0xff800688>
  800b68:	18c03fcc 	andi	r3,r3,255
  800b6c:	1806db1e 	bne	r3,zero,8026dc <___vfprintf_internal_r+0x21d8>
  800b70:	94800414 	ori	r18,r18,16
  800b74:	9080080c 	andi	r2,r18,32
  800b78:	1002d826 	beq	r2,zero,8016dc <___vfprintf_internal_r+0x11d8>
  800b7c:	d9402d17 	ldw	r5,180(sp)
  800b80:	d8c02917 	ldw	r3,164(sp)
  800b84:	d8002785 	stb	zero,158(sp)
  800b88:	28800204 	addi	r2,r5,8
  800b8c:	2cc00017 	ldw	r19,0(r5)
  800b90:	2d800117 	ldw	r22,4(r5)
  800b94:	18048f16 	blt	r3,zero,801dd4 <___vfprintf_internal_r+0x18d0>
  800b98:	013fdfc4 	movi	r4,-129
  800b9c:	9d86b03a 	or	r3,r19,r22
  800ba0:	d8802d15 	stw	r2,180(sp)
  800ba4:	9124703a 	and	r18,r18,r4
  800ba8:	1802d91e 	bne	r3,zero,801710 <___vfprintf_internal_r+0x120c>
  800bac:	d8c02917 	ldw	r3,164(sp)
  800bb0:	0039883a 	mov	fp,zero
  800bb4:	1805c326 	beq	r3,zero,8022c4 <___vfprintf_internal_r+0x1dc0>
  800bb8:	0027883a 	mov	r19,zero
  800bbc:	002d883a 	mov	r22,zero
  800bc0:	dc001e04 	addi	r16,sp,120
  800bc4:	9806d0fa 	srli	r3,r19,3
  800bc8:	b008977a 	slli	r4,r22,29
  800bcc:	b02cd0fa 	srli	r22,r22,3
  800bd0:	9cc001cc 	andi	r19,r19,7
  800bd4:	98800c04 	addi	r2,r19,48
  800bd8:	843fffc4 	addi	r16,r16,-1
  800bdc:	20e6b03a 	or	r19,r4,r3
  800be0:	80800005 	stb	r2,0(r16)
  800be4:	9d86b03a 	or	r3,r19,r22
  800be8:	183ff61e 	bne	r3,zero,800bc4 <__alt_data_end+0xff800bc4>
  800bec:	90c0004c 	andi	r3,r18,1
  800bf0:	18013b26 	beq	r3,zero,8010e0 <___vfprintf_internal_r+0xbdc>
  800bf4:	10803fcc 	andi	r2,r2,255
  800bf8:	1080201c 	xori	r2,r2,128
  800bfc:	10bfe004 	addi	r2,r2,-128
  800c00:	00c00c04 	movi	r3,48
  800c04:	10c13626 	beq	r2,r3,8010e0 <___vfprintf_internal_r+0xbdc>
  800c08:	80ffffc5 	stb	r3,-1(r16)
  800c0c:	d8c02817 	ldw	r3,160(sp)
  800c10:	80bfffc4 	addi	r2,r16,-1
  800c14:	1021883a 	mov	r16,r2
  800c18:	1887c83a 	sub	r3,r3,r2
  800c1c:	d8c02e15 	stw	r3,184(sp)
  800c20:	d8802e17 	ldw	r2,184(sp)
  800c24:	d9002917 	ldw	r4,164(sp)
  800c28:	1100010e 	bge	r2,r4,800c30 <___vfprintf_internal_r+0x72c>
  800c2c:	2005883a 	mov	r2,r4
  800c30:	d8802a15 	stw	r2,168(sp)
  800c34:	d8003215 	stw	zero,200(sp)
  800c38:	e7003fcc 	andi	fp,fp,255
  800c3c:	e700201c 	xori	fp,fp,128
  800c40:	e73fe004 	addi	fp,fp,-128
  800c44:	e0000326 	beq	fp,zero,800c54 <___vfprintf_internal_r+0x750>
  800c48:	d8c02a17 	ldw	r3,168(sp)
  800c4c:	18c00044 	addi	r3,r3,1
  800c50:	d8c02a15 	stw	r3,168(sp)
  800c54:	90c0008c 	andi	r3,r18,2
  800c58:	d8c02b15 	stw	r3,172(sp)
  800c5c:	18000326 	beq	r3,zero,800c6c <___vfprintf_internal_r+0x768>
  800c60:	d8c02a17 	ldw	r3,168(sp)
  800c64:	18c00084 	addi	r3,r3,2
  800c68:	d8c02a15 	stw	r3,168(sp)
  800c6c:	90c0210c 	andi	r3,r18,132
  800c70:	d8c03015 	stw	r3,192(sp)
  800c74:	1801a31e 	bne	r3,zero,801304 <___vfprintf_internal_r+0xe00>
  800c78:	d9003117 	ldw	r4,196(sp)
  800c7c:	d8c02a17 	ldw	r3,168(sp)
  800c80:	20e7c83a 	sub	r19,r4,r3
  800c84:	04c19f0e 	bge	zero,r19,801304 <___vfprintf_internal_r+0xe00>
  800c88:	02400404 	movi	r9,16
  800c8c:	d8c02017 	ldw	r3,128(sp)
  800c90:	d8801f17 	ldw	r2,124(sp)
  800c94:	4cc50d0e 	bge	r9,r19,8020cc <___vfprintf_internal_r+0x1bc8>
  800c98:	01402074 	movhi	r5,129
  800c9c:	29414884 	addi	r5,r5,1314
  800ca0:	dc403b15 	stw	r17,236(sp)
  800ca4:	d9403515 	stw	r5,212(sp)
  800ca8:	9823883a 	mov	r17,r19
  800cac:	482d883a 	mov	r22,r9
  800cb0:	9027883a 	mov	r19,r18
  800cb4:	070001c4 	movi	fp,7
  800cb8:	8025883a 	mov	r18,r16
  800cbc:	dc002c17 	ldw	r16,176(sp)
  800cc0:	00000306 	br	800cd0 <___vfprintf_internal_r+0x7cc>
  800cc4:	8c7ffc04 	addi	r17,r17,-16
  800cc8:	42000204 	addi	r8,r8,8
  800ccc:	b440130e 	bge	r22,r17,800d1c <___vfprintf_internal_r+0x818>
  800cd0:	01002074 	movhi	r4,129
  800cd4:	18c00404 	addi	r3,r3,16
  800cd8:	10800044 	addi	r2,r2,1
  800cdc:	21014884 	addi	r4,r4,1314
  800ce0:	41000015 	stw	r4,0(r8)
  800ce4:	45800115 	stw	r22,4(r8)
  800ce8:	d8c02015 	stw	r3,128(sp)
  800cec:	d8801f15 	stw	r2,124(sp)
  800cf0:	e0bff40e 	bge	fp,r2,800cc4 <__alt_data_end+0xff800cc4>
  800cf4:	d9801e04 	addi	r6,sp,120
  800cf8:	b80b883a 	mov	r5,r23
  800cfc:	8009883a 	mov	r4,r16
  800d00:	080701c0 	call	80701c <__sprint_r>
  800d04:	103f011e 	bne	r2,zero,80090c <__alt_data_end+0xff80090c>
  800d08:	8c7ffc04 	addi	r17,r17,-16
  800d0c:	d8c02017 	ldw	r3,128(sp)
  800d10:	d8801f17 	ldw	r2,124(sp)
  800d14:	da000404 	addi	r8,sp,16
  800d18:	b47fed16 	blt	r22,r17,800cd0 <__alt_data_end+0xff800cd0>
  800d1c:	9021883a 	mov	r16,r18
  800d20:	9825883a 	mov	r18,r19
  800d24:	8827883a 	mov	r19,r17
  800d28:	dc403b17 	ldw	r17,236(sp)
  800d2c:	d9403517 	ldw	r5,212(sp)
  800d30:	98c7883a 	add	r3,r19,r3
  800d34:	10800044 	addi	r2,r2,1
  800d38:	41400015 	stw	r5,0(r8)
  800d3c:	44c00115 	stw	r19,4(r8)
  800d40:	d8c02015 	stw	r3,128(sp)
  800d44:	d8801f15 	stw	r2,124(sp)
  800d48:	010001c4 	movi	r4,7
  800d4c:	2082a316 	blt	r4,r2,8017dc <___vfprintf_internal_r+0x12d8>
  800d50:	df002787 	ldb	fp,158(sp)
  800d54:	42000204 	addi	r8,r8,8
  800d58:	e0000c26 	beq	fp,zero,800d8c <___vfprintf_internal_r+0x888>
  800d5c:	d8801f17 	ldw	r2,124(sp)
  800d60:	d9002784 	addi	r4,sp,158
  800d64:	18c00044 	addi	r3,r3,1
  800d68:	10800044 	addi	r2,r2,1
  800d6c:	41000015 	stw	r4,0(r8)
  800d70:	01000044 	movi	r4,1
  800d74:	41000115 	stw	r4,4(r8)
  800d78:	d8c02015 	stw	r3,128(sp)
  800d7c:	d8801f15 	stw	r2,124(sp)
  800d80:	010001c4 	movi	r4,7
  800d84:	20823c16 	blt	r4,r2,801678 <___vfprintf_internal_r+0x1174>
  800d88:	42000204 	addi	r8,r8,8
  800d8c:	d8802b17 	ldw	r2,172(sp)
  800d90:	10000c26 	beq	r2,zero,800dc4 <___vfprintf_internal_r+0x8c0>
  800d94:	d8801f17 	ldw	r2,124(sp)
  800d98:	d9002704 	addi	r4,sp,156
  800d9c:	18c00084 	addi	r3,r3,2
  800da0:	10800044 	addi	r2,r2,1
  800da4:	41000015 	stw	r4,0(r8)
  800da8:	01000084 	movi	r4,2
  800dac:	41000115 	stw	r4,4(r8)
  800db0:	d8c02015 	stw	r3,128(sp)
  800db4:	d8801f15 	stw	r2,124(sp)
  800db8:	010001c4 	movi	r4,7
  800dbc:	20823616 	blt	r4,r2,801698 <___vfprintf_internal_r+0x1194>
  800dc0:	42000204 	addi	r8,r8,8
  800dc4:	d9003017 	ldw	r4,192(sp)
  800dc8:	00802004 	movi	r2,128
  800dcc:	20819926 	beq	r4,r2,801434 <___vfprintf_internal_r+0xf30>
  800dd0:	d9402917 	ldw	r5,164(sp)
  800dd4:	d8802e17 	ldw	r2,184(sp)
  800dd8:	28adc83a 	sub	r22,r5,r2
  800ddc:	0580310e 	bge	zero,r22,800ea4 <___vfprintf_internal_r+0x9a0>
  800de0:	07000404 	movi	fp,16
  800de4:	d8801f17 	ldw	r2,124(sp)
  800de8:	e584140e 	bge	fp,r22,801e3c <___vfprintf_internal_r+0x1938>
  800dec:	01402074 	movhi	r5,129
  800df0:	29414484 	addi	r5,r5,1298
  800df4:	dc402915 	stw	r17,164(sp)
  800df8:	d9402b15 	stw	r5,172(sp)
  800dfc:	b023883a 	mov	r17,r22
  800e00:	04c001c4 	movi	r19,7
  800e04:	a82d883a 	mov	r22,r21
  800e08:	902b883a 	mov	r21,r18
  800e0c:	8025883a 	mov	r18,r16
  800e10:	dc002c17 	ldw	r16,176(sp)
  800e14:	00000306 	br	800e24 <___vfprintf_internal_r+0x920>
  800e18:	8c7ffc04 	addi	r17,r17,-16
  800e1c:	42000204 	addi	r8,r8,8
  800e20:	e440110e 	bge	fp,r17,800e68 <___vfprintf_internal_r+0x964>
  800e24:	18c00404 	addi	r3,r3,16
  800e28:	10800044 	addi	r2,r2,1
  800e2c:	45000015 	stw	r20,0(r8)
  800e30:	47000115 	stw	fp,4(r8)
  800e34:	d8c02015 	stw	r3,128(sp)
  800e38:	d8801f15 	stw	r2,124(sp)
  800e3c:	98bff60e 	bge	r19,r2,800e18 <__alt_data_end+0xff800e18>
  800e40:	d9801e04 	addi	r6,sp,120
  800e44:	b80b883a 	mov	r5,r23
  800e48:	8009883a 	mov	r4,r16
  800e4c:	080701c0 	call	80701c <__sprint_r>
  800e50:	103eae1e 	bne	r2,zero,80090c <__alt_data_end+0xff80090c>
  800e54:	8c7ffc04 	addi	r17,r17,-16
  800e58:	d8c02017 	ldw	r3,128(sp)
  800e5c:	d8801f17 	ldw	r2,124(sp)
  800e60:	da000404 	addi	r8,sp,16
  800e64:	e47fef16 	blt	fp,r17,800e24 <__alt_data_end+0xff800e24>
  800e68:	9021883a 	mov	r16,r18
  800e6c:	a825883a 	mov	r18,r21
  800e70:	b02b883a 	mov	r21,r22
  800e74:	882d883a 	mov	r22,r17
  800e78:	dc402917 	ldw	r17,164(sp)
  800e7c:	d9002b17 	ldw	r4,172(sp)
  800e80:	1d87883a 	add	r3,r3,r22
  800e84:	10800044 	addi	r2,r2,1
  800e88:	41000015 	stw	r4,0(r8)
  800e8c:	45800115 	stw	r22,4(r8)
  800e90:	d8c02015 	stw	r3,128(sp)
  800e94:	d8801f15 	stw	r2,124(sp)
  800e98:	010001c4 	movi	r4,7
  800e9c:	2081ee16 	blt	r4,r2,801658 <___vfprintf_internal_r+0x1154>
  800ea0:	42000204 	addi	r8,r8,8
  800ea4:	9080400c 	andi	r2,r18,256
  800ea8:	1001181e 	bne	r2,zero,80130c <___vfprintf_internal_r+0xe08>
  800eac:	d9402e17 	ldw	r5,184(sp)
  800eb0:	d8801f17 	ldw	r2,124(sp)
  800eb4:	44000015 	stw	r16,0(r8)
  800eb8:	1947883a 	add	r3,r3,r5
  800ebc:	10800044 	addi	r2,r2,1
  800ec0:	41400115 	stw	r5,4(r8)
  800ec4:	d8c02015 	stw	r3,128(sp)
  800ec8:	d8801f15 	stw	r2,124(sp)
  800ecc:	010001c4 	movi	r4,7
  800ed0:	2081d316 	blt	r4,r2,801620 <___vfprintf_internal_r+0x111c>
  800ed4:	42000204 	addi	r8,r8,8
  800ed8:	9480010c 	andi	r18,r18,4
  800edc:	90003226 	beq	r18,zero,800fa8 <___vfprintf_internal_r+0xaa4>
  800ee0:	d9403117 	ldw	r5,196(sp)
  800ee4:	d8802a17 	ldw	r2,168(sp)
  800ee8:	28a1c83a 	sub	r16,r5,r2
  800eec:	04002e0e 	bge	zero,r16,800fa8 <___vfprintf_internal_r+0xaa4>
  800ef0:	04400404 	movi	r17,16
  800ef4:	d8801f17 	ldw	r2,124(sp)
  800ef8:	8c04a20e 	bge	r17,r16,802184 <___vfprintf_internal_r+0x1c80>
  800efc:	01402074 	movhi	r5,129
  800f00:	29414884 	addi	r5,r5,1314
  800f04:	d9403515 	stw	r5,212(sp)
  800f08:	048001c4 	movi	r18,7
  800f0c:	dcc02c17 	ldw	r19,176(sp)
  800f10:	00000306 	br	800f20 <___vfprintf_internal_r+0xa1c>
  800f14:	843ffc04 	addi	r16,r16,-16
  800f18:	42000204 	addi	r8,r8,8
  800f1c:	8c00130e 	bge	r17,r16,800f6c <___vfprintf_internal_r+0xa68>
  800f20:	01002074 	movhi	r4,129
  800f24:	18c00404 	addi	r3,r3,16
  800f28:	10800044 	addi	r2,r2,1
  800f2c:	21014884 	addi	r4,r4,1314
  800f30:	41000015 	stw	r4,0(r8)
  800f34:	44400115 	stw	r17,4(r8)
  800f38:	d8c02015 	stw	r3,128(sp)
  800f3c:	d8801f15 	stw	r2,124(sp)
  800f40:	90bff40e 	bge	r18,r2,800f14 <__alt_data_end+0xff800f14>
  800f44:	d9801e04 	addi	r6,sp,120
  800f48:	b80b883a 	mov	r5,r23
  800f4c:	9809883a 	mov	r4,r19
  800f50:	080701c0 	call	80701c <__sprint_r>
  800f54:	103e6d1e 	bne	r2,zero,80090c <__alt_data_end+0xff80090c>
  800f58:	843ffc04 	addi	r16,r16,-16
  800f5c:	d8c02017 	ldw	r3,128(sp)
  800f60:	d8801f17 	ldw	r2,124(sp)
  800f64:	da000404 	addi	r8,sp,16
  800f68:	8c3fed16 	blt	r17,r16,800f20 <__alt_data_end+0xff800f20>
  800f6c:	d9403517 	ldw	r5,212(sp)
  800f70:	1c07883a 	add	r3,r3,r16
  800f74:	10800044 	addi	r2,r2,1
  800f78:	41400015 	stw	r5,0(r8)
  800f7c:	44000115 	stw	r16,4(r8)
  800f80:	d8c02015 	stw	r3,128(sp)
  800f84:	d8801f15 	stw	r2,124(sp)
  800f88:	010001c4 	movi	r4,7
  800f8c:	2080060e 	bge	r4,r2,800fa8 <___vfprintf_internal_r+0xaa4>
  800f90:	d9002c17 	ldw	r4,176(sp)
  800f94:	d9801e04 	addi	r6,sp,120
  800f98:	b80b883a 	mov	r5,r23
  800f9c:	080701c0 	call	80701c <__sprint_r>
  800fa0:	103e5a1e 	bne	r2,zero,80090c <__alt_data_end+0xff80090c>
  800fa4:	d8c02017 	ldw	r3,128(sp)
  800fa8:	d8803117 	ldw	r2,196(sp)
  800fac:	d9002a17 	ldw	r4,168(sp)
  800fb0:	1100010e 	bge	r2,r4,800fb8 <___vfprintf_internal_r+0xab4>
  800fb4:	2005883a 	mov	r2,r4
  800fb8:	d9402f17 	ldw	r5,188(sp)
  800fbc:	288b883a 	add	r5,r5,r2
  800fc0:	d9402f15 	stw	r5,188(sp)
  800fc4:	18019e1e 	bne	r3,zero,801640 <___vfprintf_internal_r+0x113c>
  800fc8:	a8800007 	ldb	r2,0(r21)
  800fcc:	d8001f15 	stw	zero,124(sp)
  800fd0:	da000404 	addi	r8,sp,16
  800fd4:	103d851e 	bne	r2,zero,8005ec <__alt_data_end+0xff8005ec>
  800fd8:	a821883a 	mov	r16,r21
  800fdc:	003d9b06 	br	80064c <__alt_data_end+0xff80064c>
  800fe0:	18c03fcc 	andi	r3,r3,255
  800fe4:	1805c11e 	bne	r3,zero,8026ec <___vfprintf_internal_r+0x21e8>
  800fe8:	94800414 	ori	r18,r18,16
  800fec:	9080080c 	andi	r2,r18,32
  800ff0:	10020c26 	beq	r2,zero,801824 <___vfprintf_internal_r+0x1320>
  800ff4:	d8802d17 	ldw	r2,180(sp)
  800ff8:	d9002917 	ldw	r4,164(sp)
  800ffc:	d8002785 	stb	zero,158(sp)
  801000:	10c00204 	addi	r3,r2,8
  801004:	14c00017 	ldw	r19,0(r2)
  801008:	15800117 	ldw	r22,4(r2)
  80100c:	20040f16 	blt	r4,zero,80204c <___vfprintf_internal_r+0x1b48>
  801010:	013fdfc4 	movi	r4,-129
  801014:	9d84b03a 	or	r2,r19,r22
  801018:	d8c02d15 	stw	r3,180(sp)
  80101c:	9124703a 	and	r18,r18,r4
  801020:	0039883a 	mov	fp,zero
  801024:	103e891e 	bne	r2,zero,800a4c <__alt_data_end+0xff800a4c>
  801028:	d9002917 	ldw	r4,164(sp)
  80102c:	2002c11e 	bne	r4,zero,801b34 <___vfprintf_internal_r+0x1630>
  801030:	d8002915 	stw	zero,164(sp)
  801034:	d8002e15 	stw	zero,184(sp)
  801038:	dc001e04 	addi	r16,sp,120
  80103c:	003ef806 	br	800c20 <__alt_data_end+0xff800c20>
  801040:	18c03fcc 	andi	r3,r3,255
  801044:	18059d1e 	bne	r3,zero,8026bc <___vfprintf_internal_r+0x21b8>
  801048:	01402074 	movhi	r5,129
  80104c:	29413804 	addi	r5,r5,1248
  801050:	d9403915 	stw	r5,228(sp)
  801054:	9080080c 	andi	r2,r18,32
  801058:	10005226 	beq	r2,zero,8011a4 <___vfprintf_internal_r+0xca0>
  80105c:	d8802d17 	ldw	r2,180(sp)
  801060:	14c00017 	ldw	r19,0(r2)
  801064:	15800117 	ldw	r22,4(r2)
  801068:	10800204 	addi	r2,r2,8
  80106c:	d8802d15 	stw	r2,180(sp)
  801070:	9080004c 	andi	r2,r18,1
  801074:	10019026 	beq	r2,zero,8016b8 <___vfprintf_internal_r+0x11b4>
  801078:	9d84b03a 	or	r2,r19,r22
  80107c:	10036926 	beq	r2,zero,801e24 <___vfprintf_internal_r+0x1920>
  801080:	d8c02917 	ldw	r3,164(sp)
  801084:	00800c04 	movi	r2,48
  801088:	d8802705 	stb	r2,156(sp)
  80108c:	dc402745 	stb	r17,157(sp)
  801090:	d8002785 	stb	zero,158(sp)
  801094:	90800094 	ori	r2,r18,2
  801098:	18045d16 	blt	r3,zero,802210 <___vfprintf_internal_r+0x1d0c>
  80109c:	00bfdfc4 	movi	r2,-129
  8010a0:	90a4703a 	and	r18,r18,r2
  8010a4:	94800094 	ori	r18,r18,2
  8010a8:	0039883a 	mov	fp,zero
  8010ac:	d9003917 	ldw	r4,228(sp)
  8010b0:	dc001e04 	addi	r16,sp,120
  8010b4:	988003cc 	andi	r2,r19,15
  8010b8:	b006973a 	slli	r3,r22,28
  8010bc:	2085883a 	add	r2,r4,r2
  8010c0:	9826d13a 	srli	r19,r19,4
  8010c4:	10800003 	ldbu	r2,0(r2)
  8010c8:	b02cd13a 	srli	r22,r22,4
  8010cc:	843fffc4 	addi	r16,r16,-1
  8010d0:	1ce6b03a 	or	r19,r3,r19
  8010d4:	80800005 	stb	r2,0(r16)
  8010d8:	9d84b03a 	or	r2,r19,r22
  8010dc:	103ff51e 	bne	r2,zero,8010b4 <__alt_data_end+0xff8010b4>
  8010e0:	d8c02817 	ldw	r3,160(sp)
  8010e4:	1c07c83a 	sub	r3,r3,r16
  8010e8:	d8c02e15 	stw	r3,184(sp)
  8010ec:	003ecc06 	br	800c20 <__alt_data_end+0xff800c20>
  8010f0:	18c03fcc 	andi	r3,r3,255
  8010f4:	183e9f26 	beq	r3,zero,800b74 <__alt_data_end+0xff800b74>
  8010f8:	d9c02785 	stb	r7,158(sp)
  8010fc:	003e9d06 	br	800b74 <__alt_data_end+0xff800b74>
  801100:	00c00044 	movi	r3,1
  801104:	01c00ac4 	movi	r7,43
  801108:	ac400007 	ldb	r17,0(r21)
  80110c:	003d5e06 	br	800688 <__alt_data_end+0xff800688>
  801110:	94800814 	ori	r18,r18,32
  801114:	ac400007 	ldb	r17,0(r21)
  801118:	003d5b06 	br	800688 <__alt_data_end+0xff800688>
  80111c:	d8c02d17 	ldw	r3,180(sp)
  801120:	d8002785 	stb	zero,158(sp)
  801124:	1c000017 	ldw	r16,0(r3)
  801128:	1cc00104 	addi	r19,r3,4
  80112c:	80041926 	beq	r16,zero,802194 <___vfprintf_internal_r+0x1c90>
  801130:	d9002917 	ldw	r4,164(sp)
  801134:	2003d016 	blt	r4,zero,802078 <___vfprintf_internal_r+0x1b74>
  801138:	200d883a 	mov	r6,r4
  80113c:	000b883a 	mov	r5,zero
  801140:	8009883a 	mov	r4,r16
  801144:	da003d15 	stw	r8,244(sp)
  801148:	08058580 	call	805858 <memchr>
  80114c:	da003d17 	ldw	r8,244(sp)
  801150:	10045426 	beq	r2,zero,8022a4 <___vfprintf_internal_r+0x1da0>
  801154:	1405c83a 	sub	r2,r2,r16
  801158:	d8802e15 	stw	r2,184(sp)
  80115c:	1003cc16 	blt	r2,zero,802090 <___vfprintf_internal_r+0x1b8c>
  801160:	df002783 	ldbu	fp,158(sp)
  801164:	d8802a15 	stw	r2,168(sp)
  801168:	dcc02d15 	stw	r19,180(sp)
  80116c:	d8002915 	stw	zero,164(sp)
  801170:	d8003215 	stw	zero,200(sp)
  801174:	003eb006 	br	800c38 <__alt_data_end+0xff800c38>
  801178:	18c03fcc 	andi	r3,r3,255
  80117c:	183f9b26 	beq	r3,zero,800fec <__alt_data_end+0xff800fec>
  801180:	d9c02785 	stb	r7,158(sp)
  801184:	003f9906 	br	800fec <__alt_data_end+0xff800fec>
  801188:	18c03fcc 	andi	r3,r3,255
  80118c:	1805551e 	bne	r3,zero,8026e4 <___vfprintf_internal_r+0x21e0>
  801190:	01402074 	movhi	r5,129
  801194:	29413d04 	addi	r5,r5,1268
  801198:	d9403915 	stw	r5,228(sp)
  80119c:	9080080c 	andi	r2,r18,32
  8011a0:	103fae1e 	bne	r2,zero,80105c <__alt_data_end+0xff80105c>
  8011a4:	9080040c 	andi	r2,r18,16
  8011a8:	1002de26 	beq	r2,zero,801d24 <___vfprintf_internal_r+0x1820>
  8011ac:	d8c02d17 	ldw	r3,180(sp)
  8011b0:	002d883a 	mov	r22,zero
  8011b4:	1cc00017 	ldw	r19,0(r3)
  8011b8:	18c00104 	addi	r3,r3,4
  8011bc:	d8c02d15 	stw	r3,180(sp)
  8011c0:	003fab06 	br	801070 <__alt_data_end+0xff801070>
  8011c4:	38803fcc 	andi	r2,r7,255
  8011c8:	1080201c 	xori	r2,r2,128
  8011cc:	10bfe004 	addi	r2,r2,-128
  8011d0:	1002d21e 	bne	r2,zero,801d1c <___vfprintf_internal_r+0x1818>
  8011d4:	00c00044 	movi	r3,1
  8011d8:	01c00804 	movi	r7,32
  8011dc:	ac400007 	ldb	r17,0(r21)
  8011e0:	003d2906 	br	800688 <__alt_data_end+0xff800688>
  8011e4:	94800054 	ori	r18,r18,1
  8011e8:	ac400007 	ldb	r17,0(r21)
  8011ec:	003d2606 	br	800688 <__alt_data_end+0xff800688>
  8011f0:	18c03fcc 	andi	r3,r3,255
  8011f4:	183e0526 	beq	r3,zero,800a0c <__alt_data_end+0xff800a0c>
  8011f8:	d9c02785 	stb	r7,158(sp)
  8011fc:	003e0306 	br	800a0c <__alt_data_end+0xff800a0c>
  801200:	94801014 	ori	r18,r18,64
  801204:	ac400007 	ldb	r17,0(r21)
  801208:	003d1f06 	br	800688 <__alt_data_end+0xff800688>
  80120c:	ac400007 	ldb	r17,0(r21)
  801210:	8a438726 	beq	r17,r9,802030 <___vfprintf_internal_r+0x1b2c>
  801214:	94800414 	ori	r18,r18,16
  801218:	003d1b06 	br	800688 <__alt_data_end+0xff800688>
  80121c:	18c03fcc 	andi	r3,r3,255
  801220:	1805341e 	bne	r3,zero,8026f4 <___vfprintf_internal_r+0x21f0>
  801224:	9080080c 	andi	r2,r18,32
  801228:	1002cd26 	beq	r2,zero,801d60 <___vfprintf_internal_r+0x185c>
  80122c:	d9402d17 	ldw	r5,180(sp)
  801230:	d9002f17 	ldw	r4,188(sp)
  801234:	28800017 	ldw	r2,0(r5)
  801238:	2007d7fa 	srai	r3,r4,31
  80123c:	29400104 	addi	r5,r5,4
  801240:	d9402d15 	stw	r5,180(sp)
  801244:	11000015 	stw	r4,0(r2)
  801248:	10c00115 	stw	r3,4(r2)
  80124c:	003ce506 	br	8005e4 <__alt_data_end+0xff8005e4>
  801250:	d8c02d17 	ldw	r3,180(sp)
  801254:	d9002d17 	ldw	r4,180(sp)
  801258:	d8002785 	stb	zero,158(sp)
  80125c:	18800017 	ldw	r2,0(r3)
  801260:	21000104 	addi	r4,r4,4
  801264:	00c00044 	movi	r3,1
  801268:	d8c02a15 	stw	r3,168(sp)
  80126c:	d8801405 	stb	r2,80(sp)
  801270:	d9002d15 	stw	r4,180(sp)
  801274:	d8c02e15 	stw	r3,184(sp)
  801278:	d8002915 	stw	zero,164(sp)
  80127c:	d8003215 	stw	zero,200(sp)
  801280:	dc001404 	addi	r16,sp,80
  801284:	0039883a 	mov	fp,zero
  801288:	003e7206 	br	800c54 <__alt_data_end+0xff800c54>
  80128c:	01002074 	movhi	r4,129
  801290:	21013d04 	addi	r4,r4,1268
  801294:	0039883a 	mov	fp,zero
  801298:	d9003915 	stw	r4,228(sp)
  80129c:	04401e04 	movi	r17,120
  8012a0:	003f8206 	br	8010ac <__alt_data_end+0xff8010ac>
  8012a4:	18c03fcc 	andi	r3,r3,255
  8012a8:	1805061e 	bne	r3,zero,8026c4 <___vfprintf_internal_r+0x21c0>
  8012ac:	883d9126 	beq	r17,zero,8008f4 <__alt_data_end+0xff8008f4>
  8012b0:	00c00044 	movi	r3,1
  8012b4:	d8c02a15 	stw	r3,168(sp)
  8012b8:	dc401405 	stb	r17,80(sp)
  8012bc:	d8002785 	stb	zero,158(sp)
  8012c0:	003fec06 	br	801274 <__alt_data_end+0xff801274>
  8012c4:	01402074 	movhi	r5,129
  8012c8:	29413d04 	addi	r5,r5,1268
  8012cc:	d9403915 	stw	r5,228(sp)
  8012d0:	d8c02d15 	stw	r3,180(sp)
  8012d4:	1025883a 	mov	r18,r2
  8012d8:	04401e04 	movi	r17,120
  8012dc:	9d84b03a 	or	r2,r19,r22
  8012e0:	1000fc1e 	bne	r2,zero,8016d4 <___vfprintf_internal_r+0x11d0>
  8012e4:	0039883a 	mov	fp,zero
  8012e8:	00800084 	movi	r2,2
  8012ec:	10803fcc 	andi	r2,r2,255
  8012f0:	00c00044 	movi	r3,1
  8012f4:	10c20f26 	beq	r2,r3,801b34 <___vfprintf_internal_r+0x1630>
  8012f8:	00c00084 	movi	r3,2
  8012fc:	10fd6326 	beq	r2,r3,80088c <__alt_data_end+0xff80088c>
  801300:	003e2d06 	br	800bb8 <__alt_data_end+0xff800bb8>
  801304:	d8c02017 	ldw	r3,128(sp)
  801308:	003e9306 	br	800d58 <__alt_data_end+0xff800d58>
  80130c:	00801944 	movi	r2,101
  801310:	14407e0e 	bge	r2,r17,80150c <___vfprintf_internal_r+0x1008>
  801314:	d9003617 	ldw	r4,216(sp)
  801318:	d9403817 	ldw	r5,224(sp)
  80131c:	000d883a 	mov	r6,zero
  801320:	000f883a 	mov	r7,zero
  801324:	d8c03c15 	stw	r3,240(sp)
  801328:	da003d15 	stw	r8,244(sp)
  80132c:	080b8100 	call	80b810 <__eqdf2>
  801330:	d8c03c17 	ldw	r3,240(sp)
  801334:	da003d17 	ldw	r8,244(sp)
  801338:	1000f71e 	bne	r2,zero,801718 <___vfprintf_internal_r+0x1214>
  80133c:	d8801f17 	ldw	r2,124(sp)
  801340:	01002074 	movhi	r4,129
  801344:	21014404 	addi	r4,r4,1296
  801348:	18c00044 	addi	r3,r3,1
  80134c:	10800044 	addi	r2,r2,1
  801350:	41000015 	stw	r4,0(r8)
  801354:	01000044 	movi	r4,1
  801358:	41000115 	stw	r4,4(r8)
  80135c:	d8c02015 	stw	r3,128(sp)
  801360:	d8801f15 	stw	r2,124(sp)
  801364:	010001c4 	movi	r4,7
  801368:	2082b816 	blt	r4,r2,801e4c <___vfprintf_internal_r+0x1948>
  80136c:	42000204 	addi	r8,r8,8
  801370:	d8802617 	ldw	r2,152(sp)
  801374:	d9403317 	ldw	r5,204(sp)
  801378:	11400216 	blt	r2,r5,801384 <___vfprintf_internal_r+0xe80>
  80137c:	9080004c 	andi	r2,r18,1
  801380:	103ed526 	beq	r2,zero,800ed8 <__alt_data_end+0xff800ed8>
  801384:	d8803717 	ldw	r2,220(sp)
  801388:	d9003417 	ldw	r4,208(sp)
  80138c:	d9403717 	ldw	r5,220(sp)
  801390:	1887883a 	add	r3,r3,r2
  801394:	d8801f17 	ldw	r2,124(sp)
  801398:	41000015 	stw	r4,0(r8)
  80139c:	41400115 	stw	r5,4(r8)
  8013a0:	10800044 	addi	r2,r2,1
  8013a4:	d8c02015 	stw	r3,128(sp)
  8013a8:	d8801f15 	stw	r2,124(sp)
  8013ac:	010001c4 	movi	r4,7
  8013b0:	20832916 	blt	r4,r2,802058 <___vfprintf_internal_r+0x1b54>
  8013b4:	42000204 	addi	r8,r8,8
  8013b8:	d8803317 	ldw	r2,204(sp)
  8013bc:	143fffc4 	addi	r16,r2,-1
  8013c0:	043ec50e 	bge	zero,r16,800ed8 <__alt_data_end+0xff800ed8>
  8013c4:	04400404 	movi	r17,16
  8013c8:	d8801f17 	ldw	r2,124(sp)
  8013cc:	8c00880e 	bge	r17,r16,8015f0 <___vfprintf_internal_r+0x10ec>
  8013d0:	01402074 	movhi	r5,129
  8013d4:	29414484 	addi	r5,r5,1298
  8013d8:	d9402b15 	stw	r5,172(sp)
  8013dc:	058001c4 	movi	r22,7
  8013e0:	dcc02c17 	ldw	r19,176(sp)
  8013e4:	00000306 	br	8013f4 <___vfprintf_internal_r+0xef0>
  8013e8:	42000204 	addi	r8,r8,8
  8013ec:	843ffc04 	addi	r16,r16,-16
  8013f0:	8c00820e 	bge	r17,r16,8015fc <___vfprintf_internal_r+0x10f8>
  8013f4:	18c00404 	addi	r3,r3,16
  8013f8:	10800044 	addi	r2,r2,1
  8013fc:	45000015 	stw	r20,0(r8)
  801400:	44400115 	stw	r17,4(r8)
  801404:	d8c02015 	stw	r3,128(sp)
  801408:	d8801f15 	stw	r2,124(sp)
  80140c:	b0bff60e 	bge	r22,r2,8013e8 <__alt_data_end+0xff8013e8>
  801410:	d9801e04 	addi	r6,sp,120
  801414:	b80b883a 	mov	r5,r23
  801418:	9809883a 	mov	r4,r19
  80141c:	080701c0 	call	80701c <__sprint_r>
  801420:	103d3a1e 	bne	r2,zero,80090c <__alt_data_end+0xff80090c>
  801424:	d8c02017 	ldw	r3,128(sp)
  801428:	d8801f17 	ldw	r2,124(sp)
  80142c:	da000404 	addi	r8,sp,16
  801430:	003fee06 	br	8013ec <__alt_data_end+0xff8013ec>
  801434:	d9403117 	ldw	r5,196(sp)
  801438:	d8802a17 	ldw	r2,168(sp)
  80143c:	28adc83a 	sub	r22,r5,r2
  801440:	05be630e 	bge	zero,r22,800dd0 <__alt_data_end+0xff800dd0>
  801444:	07000404 	movi	fp,16
  801448:	d8801f17 	ldw	r2,124(sp)
  80144c:	e5838f0e 	bge	fp,r22,80228c <___vfprintf_internal_r+0x1d88>
  801450:	01402074 	movhi	r5,129
  801454:	29414484 	addi	r5,r5,1298
  801458:	dc403015 	stw	r17,192(sp)
  80145c:	d9402b15 	stw	r5,172(sp)
  801460:	b023883a 	mov	r17,r22
  801464:	04c001c4 	movi	r19,7
  801468:	a82d883a 	mov	r22,r21
  80146c:	902b883a 	mov	r21,r18
  801470:	8025883a 	mov	r18,r16
  801474:	dc002c17 	ldw	r16,176(sp)
  801478:	00000306 	br	801488 <___vfprintf_internal_r+0xf84>
  80147c:	8c7ffc04 	addi	r17,r17,-16
  801480:	42000204 	addi	r8,r8,8
  801484:	e440110e 	bge	fp,r17,8014cc <___vfprintf_internal_r+0xfc8>
  801488:	18c00404 	addi	r3,r3,16
  80148c:	10800044 	addi	r2,r2,1
  801490:	45000015 	stw	r20,0(r8)
  801494:	47000115 	stw	fp,4(r8)
  801498:	d8c02015 	stw	r3,128(sp)
  80149c:	d8801f15 	stw	r2,124(sp)
  8014a0:	98bff60e 	bge	r19,r2,80147c <__alt_data_end+0xff80147c>
  8014a4:	d9801e04 	addi	r6,sp,120
  8014a8:	b80b883a 	mov	r5,r23
  8014ac:	8009883a 	mov	r4,r16
  8014b0:	080701c0 	call	80701c <__sprint_r>
  8014b4:	103d151e 	bne	r2,zero,80090c <__alt_data_end+0xff80090c>
  8014b8:	8c7ffc04 	addi	r17,r17,-16
  8014bc:	d8c02017 	ldw	r3,128(sp)
  8014c0:	d8801f17 	ldw	r2,124(sp)
  8014c4:	da000404 	addi	r8,sp,16
  8014c8:	e47fef16 	blt	fp,r17,801488 <__alt_data_end+0xff801488>
  8014cc:	9021883a 	mov	r16,r18
  8014d0:	a825883a 	mov	r18,r21
  8014d4:	b02b883a 	mov	r21,r22
  8014d8:	882d883a 	mov	r22,r17
  8014dc:	dc403017 	ldw	r17,192(sp)
  8014e0:	d9002b17 	ldw	r4,172(sp)
  8014e4:	1d87883a 	add	r3,r3,r22
  8014e8:	10800044 	addi	r2,r2,1
  8014ec:	41000015 	stw	r4,0(r8)
  8014f0:	45800115 	stw	r22,4(r8)
  8014f4:	d8c02015 	stw	r3,128(sp)
  8014f8:	d8801f15 	stw	r2,124(sp)
  8014fc:	010001c4 	movi	r4,7
  801500:	20818e16 	blt	r4,r2,801b3c <___vfprintf_internal_r+0x1638>
  801504:	42000204 	addi	r8,r8,8
  801508:	003e3106 	br	800dd0 <__alt_data_end+0xff800dd0>
  80150c:	d9403317 	ldw	r5,204(sp)
  801510:	00800044 	movi	r2,1
  801514:	18c00044 	addi	r3,r3,1
  801518:	1141530e 	bge	r2,r5,801a68 <___vfprintf_internal_r+0x1564>
  80151c:	dc401f17 	ldw	r17,124(sp)
  801520:	00800044 	movi	r2,1
  801524:	40800115 	stw	r2,4(r8)
  801528:	8c400044 	addi	r17,r17,1
  80152c:	44000015 	stw	r16,0(r8)
  801530:	d8c02015 	stw	r3,128(sp)
  801534:	dc401f15 	stw	r17,124(sp)
  801538:	008001c4 	movi	r2,7
  80153c:	14416b16 	blt	r2,r17,801aec <___vfprintf_internal_r+0x15e8>
  801540:	42000204 	addi	r8,r8,8
  801544:	d8803717 	ldw	r2,220(sp)
  801548:	d9003417 	ldw	r4,208(sp)
  80154c:	8c400044 	addi	r17,r17,1
  801550:	10c7883a 	add	r3,r2,r3
  801554:	40800115 	stw	r2,4(r8)
  801558:	41000015 	stw	r4,0(r8)
  80155c:	d8c02015 	stw	r3,128(sp)
  801560:	dc401f15 	stw	r17,124(sp)
  801564:	008001c4 	movi	r2,7
  801568:	14416916 	blt	r2,r17,801b10 <___vfprintf_internal_r+0x160c>
  80156c:	45800204 	addi	r22,r8,8
  801570:	d9003617 	ldw	r4,216(sp)
  801574:	d9403817 	ldw	r5,224(sp)
  801578:	000d883a 	mov	r6,zero
  80157c:	000f883a 	mov	r7,zero
  801580:	d8c03c15 	stw	r3,240(sp)
  801584:	080b8100 	call	80b810 <__eqdf2>
  801588:	d8c03c17 	ldw	r3,240(sp)
  80158c:	1000bc26 	beq	r2,zero,801880 <___vfprintf_internal_r+0x137c>
  801590:	d9403317 	ldw	r5,204(sp)
  801594:	84000044 	addi	r16,r16,1
  801598:	8c400044 	addi	r17,r17,1
  80159c:	28bfffc4 	addi	r2,r5,-1
  8015a0:	1887883a 	add	r3,r3,r2
  8015a4:	b0800115 	stw	r2,4(r22)
  8015a8:	b4000015 	stw	r16,0(r22)
  8015ac:	d8c02015 	stw	r3,128(sp)
  8015b0:	dc401f15 	stw	r17,124(sp)
  8015b4:	008001c4 	movi	r2,7
  8015b8:	14414316 	blt	r2,r17,801ac8 <___vfprintf_internal_r+0x15c4>
  8015bc:	b5800204 	addi	r22,r22,8
  8015c0:	d9003a17 	ldw	r4,232(sp)
  8015c4:	df0022c4 	addi	fp,sp,139
  8015c8:	8c400044 	addi	r17,r17,1
  8015cc:	20c7883a 	add	r3,r4,r3
  8015d0:	b7000015 	stw	fp,0(r22)
  8015d4:	b1000115 	stw	r4,4(r22)
  8015d8:	d8c02015 	stw	r3,128(sp)
  8015dc:	dc401f15 	stw	r17,124(sp)
  8015e0:	008001c4 	movi	r2,7
  8015e4:	14400e16 	blt	r2,r17,801620 <___vfprintf_internal_r+0x111c>
  8015e8:	b2000204 	addi	r8,r22,8
  8015ec:	003e3a06 	br	800ed8 <__alt_data_end+0xff800ed8>
  8015f0:	01002074 	movhi	r4,129
  8015f4:	21014484 	addi	r4,r4,1298
  8015f8:	d9002b15 	stw	r4,172(sp)
  8015fc:	d9002b17 	ldw	r4,172(sp)
  801600:	1c07883a 	add	r3,r3,r16
  801604:	44000115 	stw	r16,4(r8)
  801608:	41000015 	stw	r4,0(r8)
  80160c:	10800044 	addi	r2,r2,1
  801610:	d8c02015 	stw	r3,128(sp)
  801614:	d8801f15 	stw	r2,124(sp)
  801618:	010001c4 	movi	r4,7
  80161c:	20be2d0e 	bge	r4,r2,800ed4 <__alt_data_end+0xff800ed4>
  801620:	d9002c17 	ldw	r4,176(sp)
  801624:	d9801e04 	addi	r6,sp,120
  801628:	b80b883a 	mov	r5,r23
  80162c:	080701c0 	call	80701c <__sprint_r>
  801630:	103cb61e 	bne	r2,zero,80090c <__alt_data_end+0xff80090c>
  801634:	d8c02017 	ldw	r3,128(sp)
  801638:	da000404 	addi	r8,sp,16
  80163c:	003e2606 	br	800ed8 <__alt_data_end+0xff800ed8>
  801640:	d9002c17 	ldw	r4,176(sp)
  801644:	d9801e04 	addi	r6,sp,120
  801648:	b80b883a 	mov	r5,r23
  80164c:	080701c0 	call	80701c <__sprint_r>
  801650:	103e5d26 	beq	r2,zero,800fc8 <__alt_data_end+0xff800fc8>
  801654:	003cad06 	br	80090c <__alt_data_end+0xff80090c>
  801658:	d9002c17 	ldw	r4,176(sp)
  80165c:	d9801e04 	addi	r6,sp,120
  801660:	b80b883a 	mov	r5,r23
  801664:	080701c0 	call	80701c <__sprint_r>
  801668:	103ca81e 	bne	r2,zero,80090c <__alt_data_end+0xff80090c>
  80166c:	d8c02017 	ldw	r3,128(sp)
  801670:	da000404 	addi	r8,sp,16
  801674:	003e0b06 	br	800ea4 <__alt_data_end+0xff800ea4>
  801678:	d9002c17 	ldw	r4,176(sp)
  80167c:	d9801e04 	addi	r6,sp,120
  801680:	b80b883a 	mov	r5,r23
  801684:	080701c0 	call	80701c <__sprint_r>
  801688:	103ca01e 	bne	r2,zero,80090c <__alt_data_end+0xff80090c>
  80168c:	d8c02017 	ldw	r3,128(sp)
  801690:	da000404 	addi	r8,sp,16
  801694:	003dbd06 	br	800d8c <__alt_data_end+0xff800d8c>
  801698:	d9002c17 	ldw	r4,176(sp)
  80169c:	d9801e04 	addi	r6,sp,120
  8016a0:	b80b883a 	mov	r5,r23
  8016a4:	080701c0 	call	80701c <__sprint_r>
  8016a8:	103c981e 	bne	r2,zero,80090c <__alt_data_end+0xff80090c>
  8016ac:	d8c02017 	ldw	r3,128(sp)
  8016b0:	da000404 	addi	r8,sp,16
  8016b4:	003dc306 	br	800dc4 <__alt_data_end+0xff800dc4>
  8016b8:	d8802917 	ldw	r2,164(sp)
  8016bc:	d8002785 	stb	zero,158(sp)
  8016c0:	103f0616 	blt	r2,zero,8012dc <__alt_data_end+0xff8012dc>
  8016c4:	00ffdfc4 	movi	r3,-129
  8016c8:	9d84b03a 	or	r2,r19,r22
  8016cc:	90e4703a 	and	r18,r18,r3
  8016d0:	103c6b26 	beq	r2,zero,800880 <__alt_data_end+0xff800880>
  8016d4:	0039883a 	mov	fp,zero
  8016d8:	003e7406 	br	8010ac <__alt_data_end+0xff8010ac>
  8016dc:	9080040c 	andi	r2,r18,16
  8016e0:	1001b326 	beq	r2,zero,801db0 <___vfprintf_internal_r+0x18ac>
  8016e4:	d9002d17 	ldw	r4,180(sp)
  8016e8:	d9402917 	ldw	r5,164(sp)
  8016ec:	d8002785 	stb	zero,158(sp)
  8016f0:	20800104 	addi	r2,r4,4
  8016f4:	24c00017 	ldw	r19,0(r4)
  8016f8:	002d883a 	mov	r22,zero
  8016fc:	2801b516 	blt	r5,zero,801dd4 <___vfprintf_internal_r+0x18d0>
  801700:	00ffdfc4 	movi	r3,-129
  801704:	d8802d15 	stw	r2,180(sp)
  801708:	90e4703a 	and	r18,r18,r3
  80170c:	983d2726 	beq	r19,zero,800bac <__alt_data_end+0xff800bac>
  801710:	0039883a 	mov	fp,zero
  801714:	003d2a06 	br	800bc0 <__alt_data_end+0xff800bc0>
  801718:	dc402617 	ldw	r17,152(sp)
  80171c:	0441d30e 	bge	zero,r17,801e6c <___vfprintf_internal_r+0x1968>
  801720:	dc403217 	ldw	r17,200(sp)
  801724:	d8803317 	ldw	r2,204(sp)
  801728:	1440010e 	bge	r2,r17,801730 <___vfprintf_internal_r+0x122c>
  80172c:	1023883a 	mov	r17,r2
  801730:	04400a0e 	bge	zero,r17,80175c <___vfprintf_internal_r+0x1258>
  801734:	d8801f17 	ldw	r2,124(sp)
  801738:	1c47883a 	add	r3,r3,r17
  80173c:	44000015 	stw	r16,0(r8)
  801740:	10800044 	addi	r2,r2,1
  801744:	44400115 	stw	r17,4(r8)
  801748:	d8c02015 	stw	r3,128(sp)
  80174c:	d8801f15 	stw	r2,124(sp)
  801750:	010001c4 	movi	r4,7
  801754:	20826516 	blt	r4,r2,8020ec <___vfprintf_internal_r+0x1be8>
  801758:	42000204 	addi	r8,r8,8
  80175c:	88026116 	blt	r17,zero,8020e4 <___vfprintf_internal_r+0x1be0>
  801760:	d9003217 	ldw	r4,200(sp)
  801764:	2463c83a 	sub	r17,r4,r17
  801768:	04407b0e 	bge	zero,r17,801958 <___vfprintf_internal_r+0x1454>
  80176c:	05800404 	movi	r22,16
  801770:	d8801f17 	ldw	r2,124(sp)
  801774:	b4419d0e 	bge	r22,r17,801dec <___vfprintf_internal_r+0x18e8>
  801778:	01002074 	movhi	r4,129
  80177c:	21014484 	addi	r4,r4,1298
  801780:	d9002b15 	stw	r4,172(sp)
  801784:	070001c4 	movi	fp,7
  801788:	dcc02c17 	ldw	r19,176(sp)
  80178c:	00000306 	br	80179c <___vfprintf_internal_r+0x1298>
  801790:	42000204 	addi	r8,r8,8
  801794:	8c7ffc04 	addi	r17,r17,-16
  801798:	b441970e 	bge	r22,r17,801df8 <___vfprintf_internal_r+0x18f4>
  80179c:	18c00404 	addi	r3,r3,16
  8017a0:	10800044 	addi	r2,r2,1
  8017a4:	45000015 	stw	r20,0(r8)
  8017a8:	45800115 	stw	r22,4(r8)
  8017ac:	d8c02015 	stw	r3,128(sp)
  8017b0:	d8801f15 	stw	r2,124(sp)
  8017b4:	e0bff60e 	bge	fp,r2,801790 <__alt_data_end+0xff801790>
  8017b8:	d9801e04 	addi	r6,sp,120
  8017bc:	b80b883a 	mov	r5,r23
  8017c0:	9809883a 	mov	r4,r19
  8017c4:	080701c0 	call	80701c <__sprint_r>
  8017c8:	103c501e 	bne	r2,zero,80090c <__alt_data_end+0xff80090c>
  8017cc:	d8c02017 	ldw	r3,128(sp)
  8017d0:	d8801f17 	ldw	r2,124(sp)
  8017d4:	da000404 	addi	r8,sp,16
  8017d8:	003fee06 	br	801794 <__alt_data_end+0xff801794>
  8017dc:	d9002c17 	ldw	r4,176(sp)
  8017e0:	d9801e04 	addi	r6,sp,120
  8017e4:	b80b883a 	mov	r5,r23
  8017e8:	080701c0 	call	80701c <__sprint_r>
  8017ec:	103c471e 	bne	r2,zero,80090c <__alt_data_end+0xff80090c>
  8017f0:	d8c02017 	ldw	r3,128(sp)
  8017f4:	df002787 	ldb	fp,158(sp)
  8017f8:	da000404 	addi	r8,sp,16
  8017fc:	003d5606 	br	800d58 <__alt_data_end+0xff800d58>
  801800:	9080040c 	andi	r2,r18,16
  801804:	10016126 	beq	r2,zero,801d8c <___vfprintf_internal_r+0x1888>
  801808:	d8802d17 	ldw	r2,180(sp)
  80180c:	14c00017 	ldw	r19,0(r2)
  801810:	10800104 	addi	r2,r2,4
  801814:	d8802d15 	stw	r2,180(sp)
  801818:	982dd7fa 	srai	r22,r19,31
  80181c:	b005883a 	mov	r2,r22
  801820:	003c8206 	br	800a2c <__alt_data_end+0xff800a2c>
  801824:	9080040c 	andi	r2,r18,16
  801828:	10003526 	beq	r2,zero,801900 <___vfprintf_internal_r+0x13fc>
  80182c:	d9402d17 	ldw	r5,180(sp)
  801830:	d8c02917 	ldw	r3,164(sp)
  801834:	d8002785 	stb	zero,158(sp)
  801838:	28800104 	addi	r2,r5,4
  80183c:	2cc00017 	ldw	r19,0(r5)
  801840:	002d883a 	mov	r22,zero
  801844:	18003716 	blt	r3,zero,801924 <___vfprintf_internal_r+0x1420>
  801848:	00ffdfc4 	movi	r3,-129
  80184c:	d8802d15 	stw	r2,180(sp)
  801850:	90e4703a 	and	r18,r18,r3
  801854:	0039883a 	mov	fp,zero
  801858:	983df326 	beq	r19,zero,801028 <__alt_data_end+0xff801028>
  80185c:	00800244 	movi	r2,9
  801860:	14fc7b36 	bltu	r2,r19,800a50 <__alt_data_end+0xff800a50>
  801864:	d8c02817 	ldw	r3,160(sp)
  801868:	dc001dc4 	addi	r16,sp,119
  80186c:	9cc00c04 	addi	r19,r19,48
  801870:	1c07c83a 	sub	r3,r3,r16
  801874:	dcc01dc5 	stb	r19,119(sp)
  801878:	d8c02e15 	stw	r3,184(sp)
  80187c:	003ce806 	br	800c20 <__alt_data_end+0xff800c20>
  801880:	d8803317 	ldw	r2,204(sp)
  801884:	143fffc4 	addi	r16,r2,-1
  801888:	043f4d0e 	bge	zero,r16,8015c0 <__alt_data_end+0xff8015c0>
  80188c:	07000404 	movi	fp,16
  801890:	e400810e 	bge	fp,r16,801a98 <___vfprintf_internal_r+0x1594>
  801894:	01402074 	movhi	r5,129
  801898:	29414484 	addi	r5,r5,1298
  80189c:	d9402b15 	stw	r5,172(sp)
  8018a0:	01c001c4 	movi	r7,7
  8018a4:	dcc02c17 	ldw	r19,176(sp)
  8018a8:	00000306 	br	8018b8 <___vfprintf_internal_r+0x13b4>
  8018ac:	b5800204 	addi	r22,r22,8
  8018b0:	843ffc04 	addi	r16,r16,-16
  8018b4:	e4007b0e 	bge	fp,r16,801aa4 <___vfprintf_internal_r+0x15a0>
  8018b8:	18c00404 	addi	r3,r3,16
  8018bc:	8c400044 	addi	r17,r17,1
  8018c0:	b5000015 	stw	r20,0(r22)
  8018c4:	b7000115 	stw	fp,4(r22)
  8018c8:	d8c02015 	stw	r3,128(sp)
  8018cc:	dc401f15 	stw	r17,124(sp)
  8018d0:	3c7ff60e 	bge	r7,r17,8018ac <__alt_data_end+0xff8018ac>
  8018d4:	d9801e04 	addi	r6,sp,120
  8018d8:	b80b883a 	mov	r5,r23
  8018dc:	9809883a 	mov	r4,r19
  8018e0:	d9c03c15 	stw	r7,240(sp)
  8018e4:	080701c0 	call	80701c <__sprint_r>
  8018e8:	d9c03c17 	ldw	r7,240(sp)
  8018ec:	103c071e 	bne	r2,zero,80090c <__alt_data_end+0xff80090c>
  8018f0:	d8c02017 	ldw	r3,128(sp)
  8018f4:	dc401f17 	ldw	r17,124(sp)
  8018f8:	dd800404 	addi	r22,sp,16
  8018fc:	003fec06 	br	8018b0 <__alt_data_end+0xff8018b0>
  801900:	9080100c 	andi	r2,r18,64
  801904:	d8002785 	stb	zero,158(sp)
  801908:	10010e26 	beq	r2,zero,801d44 <___vfprintf_internal_r+0x1840>
  80190c:	d9002d17 	ldw	r4,180(sp)
  801910:	d9402917 	ldw	r5,164(sp)
  801914:	002d883a 	mov	r22,zero
  801918:	20800104 	addi	r2,r4,4
  80191c:	24c0000b 	ldhu	r19,0(r4)
  801920:	283fc90e 	bge	r5,zero,801848 <__alt_data_end+0xff801848>
  801924:	d8802d15 	stw	r2,180(sp)
  801928:	0039883a 	mov	fp,zero
  80192c:	9d84b03a 	or	r2,r19,r22
  801930:	103c461e 	bne	r2,zero,800a4c <__alt_data_end+0xff800a4c>
  801934:	00800044 	movi	r2,1
  801938:	003e6c06 	br	8012ec <__alt_data_end+0xff8012ec>
  80193c:	d9002c17 	ldw	r4,176(sp)
  801940:	d9801e04 	addi	r6,sp,120
  801944:	b80b883a 	mov	r5,r23
  801948:	080701c0 	call	80701c <__sprint_r>
  80194c:	103bef1e 	bne	r2,zero,80090c <__alt_data_end+0xff80090c>
  801950:	d8c02017 	ldw	r3,128(sp)
  801954:	da000404 	addi	r8,sp,16
  801958:	d9003217 	ldw	r4,200(sp)
  80195c:	d8802617 	ldw	r2,152(sp)
  801960:	d9403317 	ldw	r5,204(sp)
  801964:	8123883a 	add	r17,r16,r4
  801968:	11400216 	blt	r2,r5,801974 <___vfprintf_internal_r+0x1470>
  80196c:	9100004c 	andi	r4,r18,1
  801970:	20000d26 	beq	r4,zero,8019a8 <___vfprintf_internal_r+0x14a4>
  801974:	d9003717 	ldw	r4,220(sp)
  801978:	d9403417 	ldw	r5,208(sp)
  80197c:	1907883a 	add	r3,r3,r4
  801980:	d9001f17 	ldw	r4,124(sp)
  801984:	41400015 	stw	r5,0(r8)
  801988:	d9403717 	ldw	r5,220(sp)
  80198c:	21000044 	addi	r4,r4,1
  801990:	d8c02015 	stw	r3,128(sp)
  801994:	41400115 	stw	r5,4(r8)
  801998:	d9001f15 	stw	r4,124(sp)
  80199c:	014001c4 	movi	r5,7
  8019a0:	2901e816 	blt	r5,r4,802144 <___vfprintf_internal_r+0x1c40>
  8019a4:	42000204 	addi	r8,r8,8
  8019a8:	d9003317 	ldw	r4,204(sp)
  8019ac:	8121883a 	add	r16,r16,r4
  8019b0:	2085c83a 	sub	r2,r4,r2
  8019b4:	8461c83a 	sub	r16,r16,r17
  8019b8:	1400010e 	bge	r2,r16,8019c0 <___vfprintf_internal_r+0x14bc>
  8019bc:	1021883a 	mov	r16,r2
  8019c0:	04000a0e 	bge	zero,r16,8019ec <___vfprintf_internal_r+0x14e8>
  8019c4:	d9001f17 	ldw	r4,124(sp)
  8019c8:	1c07883a 	add	r3,r3,r16
  8019cc:	44400015 	stw	r17,0(r8)
  8019d0:	21000044 	addi	r4,r4,1
  8019d4:	44000115 	stw	r16,4(r8)
  8019d8:	d8c02015 	stw	r3,128(sp)
  8019dc:	d9001f15 	stw	r4,124(sp)
  8019e0:	014001c4 	movi	r5,7
  8019e4:	2901fb16 	blt	r5,r4,8021d4 <___vfprintf_internal_r+0x1cd0>
  8019e8:	42000204 	addi	r8,r8,8
  8019ec:	8001f716 	blt	r16,zero,8021cc <___vfprintf_internal_r+0x1cc8>
  8019f0:	1421c83a 	sub	r16,r2,r16
  8019f4:	043d380e 	bge	zero,r16,800ed8 <__alt_data_end+0xff800ed8>
  8019f8:	04400404 	movi	r17,16
  8019fc:	d8801f17 	ldw	r2,124(sp)
  801a00:	8c3efb0e 	bge	r17,r16,8015f0 <__alt_data_end+0xff8015f0>
  801a04:	01402074 	movhi	r5,129
  801a08:	29414484 	addi	r5,r5,1298
  801a0c:	d9402b15 	stw	r5,172(sp)
  801a10:	058001c4 	movi	r22,7
  801a14:	dcc02c17 	ldw	r19,176(sp)
  801a18:	00000306 	br	801a28 <___vfprintf_internal_r+0x1524>
  801a1c:	42000204 	addi	r8,r8,8
  801a20:	843ffc04 	addi	r16,r16,-16
  801a24:	8c3ef50e 	bge	r17,r16,8015fc <__alt_data_end+0xff8015fc>
  801a28:	18c00404 	addi	r3,r3,16
  801a2c:	10800044 	addi	r2,r2,1
  801a30:	45000015 	stw	r20,0(r8)
  801a34:	44400115 	stw	r17,4(r8)
  801a38:	d8c02015 	stw	r3,128(sp)
  801a3c:	d8801f15 	stw	r2,124(sp)
  801a40:	b0bff60e 	bge	r22,r2,801a1c <__alt_data_end+0xff801a1c>
  801a44:	d9801e04 	addi	r6,sp,120
  801a48:	b80b883a 	mov	r5,r23
  801a4c:	9809883a 	mov	r4,r19
  801a50:	080701c0 	call	80701c <__sprint_r>
  801a54:	103bad1e 	bne	r2,zero,80090c <__alt_data_end+0xff80090c>
  801a58:	d8c02017 	ldw	r3,128(sp)
  801a5c:	d8801f17 	ldw	r2,124(sp)
  801a60:	da000404 	addi	r8,sp,16
  801a64:	003fee06 	br	801a20 <__alt_data_end+0xff801a20>
  801a68:	9088703a 	and	r4,r18,r2
  801a6c:	203eab1e 	bne	r4,zero,80151c <__alt_data_end+0xff80151c>
  801a70:	dc401f17 	ldw	r17,124(sp)
  801a74:	40800115 	stw	r2,4(r8)
  801a78:	44000015 	stw	r16,0(r8)
  801a7c:	8c400044 	addi	r17,r17,1
  801a80:	d8c02015 	stw	r3,128(sp)
  801a84:	dc401f15 	stw	r17,124(sp)
  801a88:	008001c4 	movi	r2,7
  801a8c:	14400e16 	blt	r2,r17,801ac8 <___vfprintf_internal_r+0x15c4>
  801a90:	45800204 	addi	r22,r8,8
  801a94:	003eca06 	br	8015c0 <__alt_data_end+0xff8015c0>
  801a98:	01002074 	movhi	r4,129
  801a9c:	21014484 	addi	r4,r4,1298
  801aa0:	d9002b15 	stw	r4,172(sp)
  801aa4:	d8802b17 	ldw	r2,172(sp)
  801aa8:	1c07883a 	add	r3,r3,r16
  801aac:	8c400044 	addi	r17,r17,1
  801ab0:	b0800015 	stw	r2,0(r22)
  801ab4:	b4000115 	stw	r16,4(r22)
  801ab8:	d8c02015 	stw	r3,128(sp)
  801abc:	dc401f15 	stw	r17,124(sp)
  801ac0:	008001c4 	movi	r2,7
  801ac4:	147ebd0e 	bge	r2,r17,8015bc <__alt_data_end+0xff8015bc>
  801ac8:	d9002c17 	ldw	r4,176(sp)
  801acc:	d9801e04 	addi	r6,sp,120
  801ad0:	b80b883a 	mov	r5,r23
  801ad4:	080701c0 	call	80701c <__sprint_r>
  801ad8:	103b8c1e 	bne	r2,zero,80090c <__alt_data_end+0xff80090c>
  801adc:	d8c02017 	ldw	r3,128(sp)
  801ae0:	dc401f17 	ldw	r17,124(sp)
  801ae4:	dd800404 	addi	r22,sp,16
  801ae8:	003eb506 	br	8015c0 <__alt_data_end+0xff8015c0>
  801aec:	d9002c17 	ldw	r4,176(sp)
  801af0:	d9801e04 	addi	r6,sp,120
  801af4:	b80b883a 	mov	r5,r23
  801af8:	080701c0 	call	80701c <__sprint_r>
  801afc:	103b831e 	bne	r2,zero,80090c <__alt_data_end+0xff80090c>
  801b00:	d8c02017 	ldw	r3,128(sp)
  801b04:	dc401f17 	ldw	r17,124(sp)
  801b08:	da000404 	addi	r8,sp,16
  801b0c:	003e8d06 	br	801544 <__alt_data_end+0xff801544>
  801b10:	d9002c17 	ldw	r4,176(sp)
  801b14:	d9801e04 	addi	r6,sp,120
  801b18:	b80b883a 	mov	r5,r23
  801b1c:	080701c0 	call	80701c <__sprint_r>
  801b20:	103b7a1e 	bne	r2,zero,80090c <__alt_data_end+0xff80090c>
  801b24:	d8c02017 	ldw	r3,128(sp)
  801b28:	dc401f17 	ldw	r17,124(sp)
  801b2c:	dd800404 	addi	r22,sp,16
  801b30:	003e8f06 	br	801570 <__alt_data_end+0xff801570>
  801b34:	0027883a 	mov	r19,zero
  801b38:	003f4a06 	br	801864 <__alt_data_end+0xff801864>
  801b3c:	d9002c17 	ldw	r4,176(sp)
  801b40:	d9801e04 	addi	r6,sp,120
  801b44:	b80b883a 	mov	r5,r23
  801b48:	080701c0 	call	80701c <__sprint_r>
  801b4c:	103b6f1e 	bne	r2,zero,80090c <__alt_data_end+0xff80090c>
  801b50:	d8c02017 	ldw	r3,128(sp)
  801b54:	da000404 	addi	r8,sp,16
  801b58:	003c9d06 	br	800dd0 <__alt_data_end+0xff800dd0>
  801b5c:	04e7c83a 	sub	r19,zero,r19
  801b60:	9804c03a 	cmpne	r2,r19,zero
  801b64:	05adc83a 	sub	r22,zero,r22
  801b68:	b0adc83a 	sub	r22,r22,r2
  801b6c:	d8802917 	ldw	r2,164(sp)
  801b70:	07000b44 	movi	fp,45
  801b74:	df002785 	stb	fp,158(sp)
  801b78:	10017b16 	blt	r2,zero,802168 <___vfprintf_internal_r+0x1c64>
  801b7c:	00bfdfc4 	movi	r2,-129
  801b80:	90a4703a 	and	r18,r18,r2
  801b84:	003bb106 	br	800a4c <__alt_data_end+0xff800a4c>
  801b88:	d9003617 	ldw	r4,216(sp)
  801b8c:	d9403817 	ldw	r5,224(sp)
  801b90:	da003d15 	stw	r8,244(sp)
  801b94:	0806ba80 	call	806ba8 <__fpclassifyd>
  801b98:	da003d17 	ldw	r8,244(sp)
  801b9c:	1000f026 	beq	r2,zero,801f60 <___vfprintf_internal_r+0x1a5c>
  801ba0:	d9002917 	ldw	r4,164(sp)
  801ba4:	05bff7c4 	movi	r22,-33
  801ba8:	00bfffc4 	movi	r2,-1
  801bac:	8dac703a 	and	r22,r17,r22
  801bb0:	20820026 	beq	r4,r2,8023b4 <___vfprintf_internal_r+0x1eb0>
  801bb4:	008011c4 	movi	r2,71
  801bb8:	b081f726 	beq	r22,r2,802398 <___vfprintf_internal_r+0x1e94>
  801bbc:	d9003817 	ldw	r4,224(sp)
  801bc0:	90c04014 	ori	r3,r18,256
  801bc4:	d8c02b15 	stw	r3,172(sp)
  801bc8:	20021516 	blt	r4,zero,802420 <___vfprintf_internal_r+0x1f1c>
  801bcc:	dcc03817 	ldw	r19,224(sp)
  801bd0:	d8002a05 	stb	zero,168(sp)
  801bd4:	00801984 	movi	r2,102
  801bd8:	8881f926 	beq	r17,r2,8023c0 <___vfprintf_internal_r+0x1ebc>
  801bdc:	00801184 	movi	r2,70
  801be0:	88821c26 	beq	r17,r2,802454 <___vfprintf_internal_r+0x1f50>
  801be4:	00801144 	movi	r2,69
  801be8:	b081ef26 	beq	r22,r2,8023a8 <___vfprintf_internal_r+0x1ea4>
  801bec:	d8c02917 	ldw	r3,164(sp)
  801bf0:	d8802104 	addi	r2,sp,132
  801bf4:	d8800315 	stw	r2,12(sp)
  801bf8:	d9403617 	ldw	r5,216(sp)
  801bfc:	d8802504 	addi	r2,sp,148
  801c00:	d9002c17 	ldw	r4,176(sp)
  801c04:	d8800215 	stw	r2,8(sp)
  801c08:	d8802604 	addi	r2,sp,152
  801c0c:	d8c00015 	stw	r3,0(sp)
  801c10:	d8800115 	stw	r2,4(sp)
  801c14:	01c00084 	movi	r7,2
  801c18:	980d883a 	mov	r6,r19
  801c1c:	d8c03c15 	stw	r3,240(sp)
  801c20:	da003d15 	stw	r8,244(sp)
  801c24:	0802b280 	call	802b28 <_dtoa_r>
  801c28:	1021883a 	mov	r16,r2
  801c2c:	008019c4 	movi	r2,103
  801c30:	d8c03c17 	ldw	r3,240(sp)
  801c34:	da003d17 	ldw	r8,244(sp)
  801c38:	88817126 	beq	r17,r2,802200 <___vfprintf_internal_r+0x1cfc>
  801c3c:	008011c4 	movi	r2,71
  801c40:	88829226 	beq	r17,r2,80268c <___vfprintf_internal_r+0x2188>
  801c44:	80f9883a 	add	fp,r16,r3
  801c48:	d9003617 	ldw	r4,216(sp)
  801c4c:	000d883a 	mov	r6,zero
  801c50:	000f883a 	mov	r7,zero
  801c54:	980b883a 	mov	r5,r19
  801c58:	da003d15 	stw	r8,244(sp)
  801c5c:	080b8100 	call	80b810 <__eqdf2>
  801c60:	da003d17 	ldw	r8,244(sp)
  801c64:	10018d26 	beq	r2,zero,80229c <___vfprintf_internal_r+0x1d98>
  801c68:	d8802117 	ldw	r2,132(sp)
  801c6c:	1700062e 	bgeu	r2,fp,801c88 <___vfprintf_internal_r+0x1784>
  801c70:	01000c04 	movi	r4,48
  801c74:	10c00044 	addi	r3,r2,1
  801c78:	d8c02115 	stw	r3,132(sp)
  801c7c:	11000005 	stb	r4,0(r2)
  801c80:	d8802117 	ldw	r2,132(sp)
  801c84:	173ffb36 	bltu	r2,fp,801c74 <__alt_data_end+0xff801c74>
  801c88:	1405c83a 	sub	r2,r2,r16
  801c8c:	d8803315 	stw	r2,204(sp)
  801c90:	008011c4 	movi	r2,71
  801c94:	b0817626 	beq	r22,r2,802270 <___vfprintf_internal_r+0x1d6c>
  801c98:	00801944 	movi	r2,101
  801c9c:	1442810e 	bge	r2,r17,8026a4 <___vfprintf_internal_r+0x21a0>
  801ca0:	d8c02617 	ldw	r3,152(sp)
  801ca4:	00801984 	movi	r2,102
  801ca8:	d8c03215 	stw	r3,200(sp)
  801cac:	8881fe26 	beq	r17,r2,8024a8 <___vfprintf_internal_r+0x1fa4>
  801cb0:	d8c03217 	ldw	r3,200(sp)
  801cb4:	d9003317 	ldw	r4,204(sp)
  801cb8:	1901dd16 	blt	r3,r4,802430 <___vfprintf_internal_r+0x1f2c>
  801cbc:	9480004c 	andi	r18,r18,1
  801cc0:	90022b1e 	bne	r18,zero,802570 <___vfprintf_internal_r+0x206c>
  801cc4:	1805883a 	mov	r2,r3
  801cc8:	18028016 	blt	r3,zero,8026cc <___vfprintf_internal_r+0x21c8>
  801ccc:	d8c03217 	ldw	r3,200(sp)
  801cd0:	044019c4 	movi	r17,103
  801cd4:	d8c02e15 	stw	r3,184(sp)
  801cd8:	df002a07 	ldb	fp,168(sp)
  801cdc:	e001531e 	bne	fp,zero,80222c <___vfprintf_internal_r+0x1d28>
  801ce0:	df002783 	ldbu	fp,158(sp)
  801ce4:	d8802a15 	stw	r2,168(sp)
  801ce8:	dc802b17 	ldw	r18,172(sp)
  801cec:	d8002915 	stw	zero,164(sp)
  801cf0:	003bd106 	br	800c38 <__alt_data_end+0xff800c38>
  801cf4:	d8802d17 	ldw	r2,180(sp)
  801cf8:	d8c02d17 	ldw	r3,180(sp)
  801cfc:	d9002d17 	ldw	r4,180(sp)
  801d00:	10800017 	ldw	r2,0(r2)
  801d04:	18c00117 	ldw	r3,4(r3)
  801d08:	21000204 	addi	r4,r4,8
  801d0c:	d8803615 	stw	r2,216(sp)
  801d10:	d8c03815 	stw	r3,224(sp)
  801d14:	d9002d15 	stw	r4,180(sp)
  801d18:	003b7506 	br	800af0 <__alt_data_end+0xff800af0>
  801d1c:	ac400007 	ldb	r17,0(r21)
  801d20:	003a5906 	br	800688 <__alt_data_end+0xff800688>
  801d24:	9080100c 	andi	r2,r18,64
  801d28:	1000a826 	beq	r2,zero,801fcc <___vfprintf_internal_r+0x1ac8>
  801d2c:	d9002d17 	ldw	r4,180(sp)
  801d30:	002d883a 	mov	r22,zero
  801d34:	24c0000b 	ldhu	r19,0(r4)
  801d38:	21000104 	addi	r4,r4,4
  801d3c:	d9002d15 	stw	r4,180(sp)
  801d40:	003ccb06 	br	801070 <__alt_data_end+0xff801070>
  801d44:	d8c02d17 	ldw	r3,180(sp)
  801d48:	d9002917 	ldw	r4,164(sp)
  801d4c:	002d883a 	mov	r22,zero
  801d50:	18800104 	addi	r2,r3,4
  801d54:	1cc00017 	ldw	r19,0(r3)
  801d58:	203ebb0e 	bge	r4,zero,801848 <__alt_data_end+0xff801848>
  801d5c:	003ef106 	br	801924 <__alt_data_end+0xff801924>
  801d60:	9080040c 	andi	r2,r18,16
  801d64:	1000921e 	bne	r2,zero,801fb0 <___vfprintf_internal_r+0x1aac>
  801d68:	9480100c 	andi	r18,r18,64
  801d6c:	90013926 	beq	r18,zero,802254 <___vfprintf_internal_r+0x1d50>
  801d70:	d9002d17 	ldw	r4,180(sp)
  801d74:	d9402f17 	ldw	r5,188(sp)
  801d78:	20800017 	ldw	r2,0(r4)
  801d7c:	21000104 	addi	r4,r4,4
  801d80:	d9002d15 	stw	r4,180(sp)
  801d84:	1140000d 	sth	r5,0(r2)
  801d88:	003a1606 	br	8005e4 <__alt_data_end+0xff8005e4>
  801d8c:	9080100c 	andi	r2,r18,64
  801d90:	10008026 	beq	r2,zero,801f94 <___vfprintf_internal_r+0x1a90>
  801d94:	d8c02d17 	ldw	r3,180(sp)
  801d98:	1cc0000f 	ldh	r19,0(r3)
  801d9c:	18c00104 	addi	r3,r3,4
  801da0:	d8c02d15 	stw	r3,180(sp)
  801da4:	982dd7fa 	srai	r22,r19,31
  801da8:	b005883a 	mov	r2,r22
  801dac:	003b1f06 	br	800a2c <__alt_data_end+0xff800a2c>
  801db0:	9080100c 	andi	r2,r18,64
  801db4:	d8002785 	stb	zero,158(sp)
  801db8:	10008a1e 	bne	r2,zero,801fe4 <___vfprintf_internal_r+0x1ae0>
  801dbc:	d9402d17 	ldw	r5,180(sp)
  801dc0:	d8c02917 	ldw	r3,164(sp)
  801dc4:	002d883a 	mov	r22,zero
  801dc8:	28800104 	addi	r2,r5,4
  801dcc:	2cc00017 	ldw	r19,0(r5)
  801dd0:	183e4b0e 	bge	r3,zero,801700 <__alt_data_end+0xff801700>
  801dd4:	9d86b03a 	or	r3,r19,r22
  801dd8:	d8802d15 	stw	r2,180(sp)
  801ddc:	183e4c1e 	bne	r3,zero,801710 <__alt_data_end+0xff801710>
  801de0:	0039883a 	mov	fp,zero
  801de4:	0005883a 	mov	r2,zero
  801de8:	003d4006 	br	8012ec <__alt_data_end+0xff8012ec>
  801dec:	01402074 	movhi	r5,129
  801df0:	29414484 	addi	r5,r5,1298
  801df4:	d9402b15 	stw	r5,172(sp)
  801df8:	d9402b17 	ldw	r5,172(sp)
  801dfc:	1c47883a 	add	r3,r3,r17
  801e00:	10800044 	addi	r2,r2,1
  801e04:	41400015 	stw	r5,0(r8)
  801e08:	44400115 	stw	r17,4(r8)
  801e0c:	d8c02015 	stw	r3,128(sp)
  801e10:	d8801f15 	stw	r2,124(sp)
  801e14:	010001c4 	movi	r4,7
  801e18:	20bec816 	blt	r4,r2,80193c <__alt_data_end+0xff80193c>
  801e1c:	42000204 	addi	r8,r8,8
  801e20:	003ecd06 	br	801958 <__alt_data_end+0xff801958>
  801e24:	d9002917 	ldw	r4,164(sp)
  801e28:	d8002785 	stb	zero,158(sp)
  801e2c:	203d2d16 	blt	r4,zero,8012e4 <__alt_data_end+0xff8012e4>
  801e30:	00bfdfc4 	movi	r2,-129
  801e34:	90a4703a 	and	r18,r18,r2
  801e38:	003a9106 	br	800880 <__alt_data_end+0xff800880>
  801e3c:	01002074 	movhi	r4,129
  801e40:	21014484 	addi	r4,r4,1298
  801e44:	d9002b15 	stw	r4,172(sp)
  801e48:	003c0c06 	br	800e7c <__alt_data_end+0xff800e7c>
  801e4c:	d9002c17 	ldw	r4,176(sp)
  801e50:	d9801e04 	addi	r6,sp,120
  801e54:	b80b883a 	mov	r5,r23
  801e58:	080701c0 	call	80701c <__sprint_r>
  801e5c:	103aab1e 	bne	r2,zero,80090c <__alt_data_end+0xff80090c>
  801e60:	d8c02017 	ldw	r3,128(sp)
  801e64:	da000404 	addi	r8,sp,16
  801e68:	003d4106 	br	801370 <__alt_data_end+0xff801370>
  801e6c:	d8801f17 	ldw	r2,124(sp)
  801e70:	01402074 	movhi	r5,129
  801e74:	01000044 	movi	r4,1
  801e78:	18c00044 	addi	r3,r3,1
  801e7c:	10800044 	addi	r2,r2,1
  801e80:	29414404 	addi	r5,r5,1296
  801e84:	41000115 	stw	r4,4(r8)
  801e88:	41400015 	stw	r5,0(r8)
  801e8c:	d8c02015 	stw	r3,128(sp)
  801e90:	d8801f15 	stw	r2,124(sp)
  801e94:	010001c4 	movi	r4,7
  801e98:	20805c16 	blt	r4,r2,80200c <___vfprintf_internal_r+0x1b08>
  801e9c:	42000204 	addi	r8,r8,8
  801ea0:	8800041e 	bne	r17,zero,801eb4 <___vfprintf_internal_r+0x19b0>
  801ea4:	d8803317 	ldw	r2,204(sp)
  801ea8:	1000021e 	bne	r2,zero,801eb4 <___vfprintf_internal_r+0x19b0>
  801eac:	9080004c 	andi	r2,r18,1
  801eb0:	103c0926 	beq	r2,zero,800ed8 <__alt_data_end+0xff800ed8>
  801eb4:	d9003717 	ldw	r4,220(sp)
  801eb8:	d8801f17 	ldw	r2,124(sp)
  801ebc:	d9403417 	ldw	r5,208(sp)
  801ec0:	20c7883a 	add	r3,r4,r3
  801ec4:	10800044 	addi	r2,r2,1
  801ec8:	41000115 	stw	r4,4(r8)
  801ecc:	41400015 	stw	r5,0(r8)
  801ed0:	d8c02015 	stw	r3,128(sp)
  801ed4:	d8801f15 	stw	r2,124(sp)
  801ed8:	010001c4 	movi	r4,7
  801edc:	20812116 	blt	r4,r2,802364 <___vfprintf_internal_r+0x1e60>
  801ee0:	42000204 	addi	r8,r8,8
  801ee4:	0463c83a 	sub	r17,zero,r17
  801ee8:	0440730e 	bge	zero,r17,8020b8 <___vfprintf_internal_r+0x1bb4>
  801eec:	05800404 	movi	r22,16
  801ef0:	b440860e 	bge	r22,r17,80210c <___vfprintf_internal_r+0x1c08>
  801ef4:	01402074 	movhi	r5,129
  801ef8:	29414484 	addi	r5,r5,1298
  801efc:	d9402b15 	stw	r5,172(sp)
  801f00:	070001c4 	movi	fp,7
  801f04:	dcc02c17 	ldw	r19,176(sp)
  801f08:	00000306 	br	801f18 <___vfprintf_internal_r+0x1a14>
  801f0c:	42000204 	addi	r8,r8,8
  801f10:	8c7ffc04 	addi	r17,r17,-16
  801f14:	b440800e 	bge	r22,r17,802118 <___vfprintf_internal_r+0x1c14>
  801f18:	18c00404 	addi	r3,r3,16
  801f1c:	10800044 	addi	r2,r2,1
  801f20:	45000015 	stw	r20,0(r8)
  801f24:	45800115 	stw	r22,4(r8)
  801f28:	d8c02015 	stw	r3,128(sp)
  801f2c:	d8801f15 	stw	r2,124(sp)
  801f30:	e0bff60e 	bge	fp,r2,801f0c <__alt_data_end+0xff801f0c>
  801f34:	d9801e04 	addi	r6,sp,120
  801f38:	b80b883a 	mov	r5,r23
  801f3c:	9809883a 	mov	r4,r19
  801f40:	080701c0 	call	80701c <__sprint_r>
  801f44:	103a711e 	bne	r2,zero,80090c <__alt_data_end+0xff80090c>
  801f48:	d8c02017 	ldw	r3,128(sp)
  801f4c:	d8801f17 	ldw	r2,124(sp)
  801f50:	da000404 	addi	r8,sp,16
  801f54:	003fee06 	br	801f10 <__alt_data_end+0xff801f10>
  801f58:	00bfffc4 	movi	r2,-1
  801f5c:	003a6f06 	br	80091c <__alt_data_end+0xff80091c>
  801f60:	008011c4 	movi	r2,71
  801f64:	1440b816 	blt	r2,r17,802248 <___vfprintf_internal_r+0x1d44>
  801f68:	04002074 	movhi	r16,129
  801f6c:	84013604 	addi	r16,r16,1240
  801f70:	00c000c4 	movi	r3,3
  801f74:	00bfdfc4 	movi	r2,-129
  801f78:	d8c02a15 	stw	r3,168(sp)
  801f7c:	90a4703a 	and	r18,r18,r2
  801f80:	df002783 	ldbu	fp,158(sp)
  801f84:	d8c02e15 	stw	r3,184(sp)
  801f88:	d8002915 	stw	zero,164(sp)
  801f8c:	d8003215 	stw	zero,200(sp)
  801f90:	003b2906 	br	800c38 <__alt_data_end+0xff800c38>
  801f94:	d9002d17 	ldw	r4,180(sp)
  801f98:	24c00017 	ldw	r19,0(r4)
  801f9c:	21000104 	addi	r4,r4,4
  801fa0:	d9002d15 	stw	r4,180(sp)
  801fa4:	982dd7fa 	srai	r22,r19,31
  801fa8:	b005883a 	mov	r2,r22
  801fac:	003a9f06 	br	800a2c <__alt_data_end+0xff800a2c>
  801fb0:	d9402d17 	ldw	r5,180(sp)
  801fb4:	d8c02f17 	ldw	r3,188(sp)
  801fb8:	28800017 	ldw	r2,0(r5)
  801fbc:	29400104 	addi	r5,r5,4
  801fc0:	d9402d15 	stw	r5,180(sp)
  801fc4:	10c00015 	stw	r3,0(r2)
  801fc8:	00398606 	br	8005e4 <__alt_data_end+0xff8005e4>
  801fcc:	d9402d17 	ldw	r5,180(sp)
  801fd0:	002d883a 	mov	r22,zero
  801fd4:	2cc00017 	ldw	r19,0(r5)
  801fd8:	29400104 	addi	r5,r5,4
  801fdc:	d9402d15 	stw	r5,180(sp)
  801fe0:	003c2306 	br	801070 <__alt_data_end+0xff801070>
  801fe4:	d8c02d17 	ldw	r3,180(sp)
  801fe8:	d9002917 	ldw	r4,164(sp)
  801fec:	002d883a 	mov	r22,zero
  801ff0:	18800104 	addi	r2,r3,4
  801ff4:	1cc0000b 	ldhu	r19,0(r3)
  801ff8:	203dc10e 	bge	r4,zero,801700 <__alt_data_end+0xff801700>
  801ffc:	003f7506 	br	801dd4 <__alt_data_end+0xff801dd4>
  802000:	04002074 	movhi	r16,129
  802004:	84013404 	addi	r16,r16,1232
  802008:	003acc06 	br	800b3c <__alt_data_end+0xff800b3c>
  80200c:	d9002c17 	ldw	r4,176(sp)
  802010:	d9801e04 	addi	r6,sp,120
  802014:	b80b883a 	mov	r5,r23
  802018:	080701c0 	call	80701c <__sprint_r>
  80201c:	103a3b1e 	bne	r2,zero,80090c <__alt_data_end+0xff80090c>
  802020:	dc402617 	ldw	r17,152(sp)
  802024:	d8c02017 	ldw	r3,128(sp)
  802028:	da000404 	addi	r8,sp,16
  80202c:	003f9c06 	br	801ea0 <__alt_data_end+0xff801ea0>
  802030:	ac400043 	ldbu	r17,1(r21)
  802034:	94800814 	ori	r18,r18,32
  802038:	ad400044 	addi	r21,r21,1
  80203c:	8c403fcc 	andi	r17,r17,255
  802040:	8c40201c 	xori	r17,r17,128
  802044:	8c7fe004 	addi	r17,r17,-128
  802048:	00398f06 	br	800688 <__alt_data_end+0xff800688>
  80204c:	d8c02d15 	stw	r3,180(sp)
  802050:	0039883a 	mov	fp,zero
  802054:	003e3506 	br	80192c <__alt_data_end+0xff80192c>
  802058:	d9002c17 	ldw	r4,176(sp)
  80205c:	d9801e04 	addi	r6,sp,120
  802060:	b80b883a 	mov	r5,r23
  802064:	080701c0 	call	80701c <__sprint_r>
  802068:	103a281e 	bne	r2,zero,80090c <__alt_data_end+0xff80090c>
  80206c:	d8c02017 	ldw	r3,128(sp)
  802070:	da000404 	addi	r8,sp,16
  802074:	003cd006 	br	8013b8 <__alt_data_end+0xff8013b8>
  802078:	8009883a 	mov	r4,r16
  80207c:	da003d15 	stw	r8,244(sp)
  802080:	0806e880 	call	806e88 <strlen>
  802084:	d8802e15 	stw	r2,184(sp)
  802088:	da003d17 	ldw	r8,244(sp)
  80208c:	103c340e 	bge	r2,zero,801160 <__alt_data_end+0xff801160>
  802090:	0005883a 	mov	r2,zero
  802094:	003c3206 	br	801160 <__alt_data_end+0xff801160>
  802098:	d9002c17 	ldw	r4,176(sp)
  80209c:	d9801e04 	addi	r6,sp,120
  8020a0:	b80b883a 	mov	r5,r23
  8020a4:	080701c0 	call	80701c <__sprint_r>
  8020a8:	103a181e 	bne	r2,zero,80090c <__alt_data_end+0xff80090c>
  8020ac:	d8c02017 	ldw	r3,128(sp)
  8020b0:	d8801f17 	ldw	r2,124(sp)
  8020b4:	da000404 	addi	r8,sp,16
  8020b8:	d9403317 	ldw	r5,204(sp)
  8020bc:	10800044 	addi	r2,r2,1
  8020c0:	44000015 	stw	r16,0(r8)
  8020c4:	28c7883a 	add	r3,r5,r3
  8020c8:	003b7d06 	br	800ec0 <__alt_data_end+0xff800ec0>
  8020cc:	01002074 	movhi	r4,129
  8020d0:	21014884 	addi	r4,r4,1314
  8020d4:	d9003515 	stw	r4,212(sp)
  8020d8:	003b1406 	br	800d2c <__alt_data_end+0xff800d2c>
  8020dc:	013fffc4 	movi	r4,-1
  8020e0:	003a3506 	br	8009b8 <__alt_data_end+0xff8009b8>
  8020e4:	0023883a 	mov	r17,zero
  8020e8:	003d9d06 	br	801760 <__alt_data_end+0xff801760>
  8020ec:	d9002c17 	ldw	r4,176(sp)
  8020f0:	d9801e04 	addi	r6,sp,120
  8020f4:	b80b883a 	mov	r5,r23
  8020f8:	080701c0 	call	80701c <__sprint_r>
  8020fc:	103a031e 	bne	r2,zero,80090c <__alt_data_end+0xff80090c>
  802100:	d8c02017 	ldw	r3,128(sp)
  802104:	da000404 	addi	r8,sp,16
  802108:	003d9406 	br	80175c <__alt_data_end+0xff80175c>
  80210c:	01002074 	movhi	r4,129
  802110:	21014484 	addi	r4,r4,1298
  802114:	d9002b15 	stw	r4,172(sp)
  802118:	d9002b17 	ldw	r4,172(sp)
  80211c:	1c47883a 	add	r3,r3,r17
  802120:	10800044 	addi	r2,r2,1
  802124:	41000015 	stw	r4,0(r8)
  802128:	44400115 	stw	r17,4(r8)
  80212c:	d8c02015 	stw	r3,128(sp)
  802130:	d8801f15 	stw	r2,124(sp)
  802134:	010001c4 	movi	r4,7
  802138:	20bfd716 	blt	r4,r2,802098 <__alt_data_end+0xff802098>
  80213c:	42000204 	addi	r8,r8,8
  802140:	003fdd06 	br	8020b8 <__alt_data_end+0xff8020b8>
  802144:	d9002c17 	ldw	r4,176(sp)
  802148:	d9801e04 	addi	r6,sp,120
  80214c:	b80b883a 	mov	r5,r23
  802150:	080701c0 	call	80701c <__sprint_r>
  802154:	1039ed1e 	bne	r2,zero,80090c <__alt_data_end+0xff80090c>
  802158:	d8802617 	ldw	r2,152(sp)
  80215c:	d8c02017 	ldw	r3,128(sp)
  802160:	da000404 	addi	r8,sp,16
  802164:	003e1006 	br	8019a8 <__alt_data_end+0xff8019a8>
  802168:	00800044 	movi	r2,1
  80216c:	10803fcc 	andi	r2,r2,255
  802170:	00c00044 	movi	r3,1
  802174:	10fa3526 	beq	r2,r3,800a4c <__alt_data_end+0xff800a4c>
  802178:	00c00084 	movi	r3,2
  80217c:	10fbcb26 	beq	r2,r3,8010ac <__alt_data_end+0xff8010ac>
  802180:	003a8f06 	br	800bc0 <__alt_data_end+0xff800bc0>
  802184:	01002074 	movhi	r4,129
  802188:	21014884 	addi	r4,r4,1314
  80218c:	d9003515 	stw	r4,212(sp)
  802190:	003b7606 	br	800f6c <__alt_data_end+0xff800f6c>
  802194:	d8802917 	ldw	r2,164(sp)
  802198:	00c00184 	movi	r3,6
  80219c:	1880012e 	bgeu	r3,r2,8021a4 <___vfprintf_internal_r+0x1ca0>
  8021a0:	1805883a 	mov	r2,r3
  8021a4:	d8802e15 	stw	r2,184(sp)
  8021a8:	1000ef16 	blt	r2,zero,802568 <___vfprintf_internal_r+0x2064>
  8021ac:	04002074 	movhi	r16,129
  8021b0:	d8802a15 	stw	r2,168(sp)
  8021b4:	dcc02d15 	stw	r19,180(sp)
  8021b8:	d8002915 	stw	zero,164(sp)
  8021bc:	d8003215 	stw	zero,200(sp)
  8021c0:	84014204 	addi	r16,r16,1288
  8021c4:	0039883a 	mov	fp,zero
  8021c8:	003aa206 	br	800c54 <__alt_data_end+0xff800c54>
  8021cc:	0021883a 	mov	r16,zero
  8021d0:	003e0706 	br	8019f0 <__alt_data_end+0xff8019f0>
  8021d4:	d9002c17 	ldw	r4,176(sp)
  8021d8:	d9801e04 	addi	r6,sp,120
  8021dc:	b80b883a 	mov	r5,r23
  8021e0:	080701c0 	call	80701c <__sprint_r>
  8021e4:	1039c91e 	bne	r2,zero,80090c <__alt_data_end+0xff80090c>
  8021e8:	d8802617 	ldw	r2,152(sp)
  8021ec:	d9403317 	ldw	r5,204(sp)
  8021f0:	d8c02017 	ldw	r3,128(sp)
  8021f4:	da000404 	addi	r8,sp,16
  8021f8:	2885c83a 	sub	r2,r5,r2
  8021fc:	003dfb06 	br	8019ec <__alt_data_end+0xff8019ec>
  802200:	9080004c 	andi	r2,r18,1
  802204:	103e8f1e 	bne	r2,zero,801c44 <__alt_data_end+0xff801c44>
  802208:	d8802117 	ldw	r2,132(sp)
  80220c:	003e9e06 	br	801c88 <__alt_data_end+0xff801c88>
  802210:	1025883a 	mov	r18,r2
  802214:	0039883a 	mov	fp,zero
  802218:	00800084 	movi	r2,2
  80221c:	003fd306 	br	80216c <__alt_data_end+0xff80216c>
  802220:	07000b44 	movi	fp,45
  802224:	df002785 	stb	fp,158(sp)
  802228:	003a4006 	br	800b2c <__alt_data_end+0xff800b2c>
  80222c:	00c00b44 	movi	r3,45
  802230:	d8c02785 	stb	r3,158(sp)
  802234:	d8802a15 	stw	r2,168(sp)
  802238:	dc802b17 	ldw	r18,172(sp)
  80223c:	d8002915 	stw	zero,164(sp)
  802240:	07000b44 	movi	fp,45
  802244:	003a8006 	br	800c48 <__alt_data_end+0xff800c48>
  802248:	04002074 	movhi	r16,129
  80224c:	84013704 	addi	r16,r16,1244
  802250:	003f4706 	br	801f70 <__alt_data_end+0xff801f70>
  802254:	d8c02d17 	ldw	r3,180(sp)
  802258:	d9002f17 	ldw	r4,188(sp)
  80225c:	18800017 	ldw	r2,0(r3)
  802260:	18c00104 	addi	r3,r3,4
  802264:	d8c02d15 	stw	r3,180(sp)
  802268:	11000015 	stw	r4,0(r2)
  80226c:	0038dd06 	br	8005e4 <__alt_data_end+0xff8005e4>
  802270:	dd802617 	ldw	r22,152(sp)
  802274:	00bfff44 	movi	r2,-3
  802278:	b0801c16 	blt	r22,r2,8022ec <___vfprintf_internal_r+0x1de8>
  80227c:	d9402917 	ldw	r5,164(sp)
  802280:	2d801a16 	blt	r5,r22,8022ec <___vfprintf_internal_r+0x1de8>
  802284:	dd803215 	stw	r22,200(sp)
  802288:	003e8906 	br	801cb0 <__alt_data_end+0xff801cb0>
  80228c:	01002074 	movhi	r4,129
  802290:	21014484 	addi	r4,r4,1298
  802294:	d9002b15 	stw	r4,172(sp)
  802298:	003c9106 	br	8014e0 <__alt_data_end+0xff8014e0>
  80229c:	e005883a 	mov	r2,fp
  8022a0:	003e7906 	br	801c88 <__alt_data_end+0xff801c88>
  8022a4:	d9402917 	ldw	r5,164(sp)
  8022a8:	df002783 	ldbu	fp,158(sp)
  8022ac:	dcc02d15 	stw	r19,180(sp)
  8022b0:	d9402a15 	stw	r5,168(sp)
  8022b4:	d9402e15 	stw	r5,184(sp)
  8022b8:	d8002915 	stw	zero,164(sp)
  8022bc:	d8003215 	stw	zero,200(sp)
  8022c0:	003a5d06 	br	800c38 <__alt_data_end+0xff800c38>
  8022c4:	9080004c 	andi	r2,r18,1
  8022c8:	0039883a 	mov	fp,zero
  8022cc:	10000426 	beq	r2,zero,8022e0 <___vfprintf_internal_r+0x1ddc>
  8022d0:	00800c04 	movi	r2,48
  8022d4:	dc001dc4 	addi	r16,sp,119
  8022d8:	d8801dc5 	stb	r2,119(sp)
  8022dc:	003b8006 	br	8010e0 <__alt_data_end+0xff8010e0>
  8022e0:	d8002e15 	stw	zero,184(sp)
  8022e4:	dc001e04 	addi	r16,sp,120
  8022e8:	003a4d06 	br	800c20 <__alt_data_end+0xff800c20>
  8022ec:	8c7fff84 	addi	r17,r17,-2
  8022f0:	b5bfffc4 	addi	r22,r22,-1
  8022f4:	dd802615 	stw	r22,152(sp)
  8022f8:	dc4022c5 	stb	r17,139(sp)
  8022fc:	b000bf16 	blt	r22,zero,8025fc <___vfprintf_internal_r+0x20f8>
  802300:	00800ac4 	movi	r2,43
  802304:	d8802305 	stb	r2,140(sp)
  802308:	00800244 	movi	r2,9
  80230c:	15807016 	blt	r2,r22,8024d0 <___vfprintf_internal_r+0x1fcc>
  802310:	00800c04 	movi	r2,48
  802314:	b5800c04 	addi	r22,r22,48
  802318:	d8802345 	stb	r2,141(sp)
  80231c:	dd802385 	stb	r22,142(sp)
  802320:	d88023c4 	addi	r2,sp,143
  802324:	df0022c4 	addi	fp,sp,139
  802328:	d8c03317 	ldw	r3,204(sp)
  80232c:	1739c83a 	sub	fp,r2,fp
  802330:	d9003317 	ldw	r4,204(sp)
  802334:	e0c7883a 	add	r3,fp,r3
  802338:	df003a15 	stw	fp,232(sp)
  80233c:	d8c02e15 	stw	r3,184(sp)
  802340:	00800044 	movi	r2,1
  802344:	1100b30e 	bge	r2,r4,802614 <___vfprintf_internal_r+0x2110>
  802348:	d8c02e17 	ldw	r3,184(sp)
  80234c:	18c00044 	addi	r3,r3,1
  802350:	d8c02e15 	stw	r3,184(sp)
  802354:	1805883a 	mov	r2,r3
  802358:	1800ac16 	blt	r3,zero,80260c <___vfprintf_internal_r+0x2108>
  80235c:	d8003215 	stw	zero,200(sp)
  802360:	003e5d06 	br	801cd8 <__alt_data_end+0xff801cd8>
  802364:	d9002c17 	ldw	r4,176(sp)
  802368:	d9801e04 	addi	r6,sp,120
  80236c:	b80b883a 	mov	r5,r23
  802370:	080701c0 	call	80701c <__sprint_r>
  802374:	1039651e 	bne	r2,zero,80090c <__alt_data_end+0xff80090c>
  802378:	dc402617 	ldw	r17,152(sp)
  80237c:	d8c02017 	ldw	r3,128(sp)
  802380:	d8801f17 	ldw	r2,124(sp)
  802384:	da000404 	addi	r8,sp,16
  802388:	003ed606 	br	801ee4 <__alt_data_end+0xff801ee4>
  80238c:	582b883a 	mov	r21,r11
  802390:	d8002915 	stw	zero,164(sp)
  802394:	0038bd06 	br	80068c <__alt_data_end+0xff80068c>
  802398:	d8802917 	ldw	r2,164(sp)
  80239c:	103e071e 	bne	r2,zero,801bbc <__alt_data_end+0xff801bbc>
  8023a0:	dc002915 	stw	r16,164(sp)
  8023a4:	003e0506 	br	801bbc <__alt_data_end+0xff801bbc>
  8023a8:	d9002917 	ldw	r4,164(sp)
  8023ac:	20c00044 	addi	r3,r4,1
  8023b0:	003e0f06 	br	801bf0 <__alt_data_end+0xff801bf0>
  8023b4:	01400184 	movi	r5,6
  8023b8:	d9402915 	stw	r5,164(sp)
  8023bc:	003dff06 	br	801bbc <__alt_data_end+0xff801bbc>
  8023c0:	d8802104 	addi	r2,sp,132
  8023c4:	d8800315 	stw	r2,12(sp)
  8023c8:	d8802504 	addi	r2,sp,148
  8023cc:	d8800215 	stw	r2,8(sp)
  8023d0:	d8802604 	addi	r2,sp,152
  8023d4:	d8800115 	stw	r2,4(sp)
  8023d8:	d8802917 	ldw	r2,164(sp)
  8023dc:	d9403617 	ldw	r5,216(sp)
  8023e0:	d9002c17 	ldw	r4,176(sp)
  8023e4:	d8800015 	stw	r2,0(sp)
  8023e8:	01c000c4 	movi	r7,3
  8023ec:	980d883a 	mov	r6,r19
  8023f0:	da003d15 	stw	r8,244(sp)
  8023f4:	0802b280 	call	802b28 <_dtoa_r>
  8023f8:	d8c02917 	ldw	r3,164(sp)
  8023fc:	da003d17 	ldw	r8,244(sp)
  802400:	1021883a 	mov	r16,r2
  802404:	10f9883a 	add	fp,r2,r3
  802408:	81000007 	ldb	r4,0(r16)
  80240c:	00800c04 	movi	r2,48
  802410:	20805e26 	beq	r4,r2,80258c <___vfprintf_internal_r+0x2088>
  802414:	d8c02617 	ldw	r3,152(sp)
  802418:	e0f9883a 	add	fp,fp,r3
  80241c:	003e0a06 	br	801c48 <__alt_data_end+0xff801c48>
  802420:	00c00b44 	movi	r3,45
  802424:	24e0003c 	xorhi	r19,r4,32768
  802428:	d8c02a05 	stb	r3,168(sp)
  80242c:	003de906 	br	801bd4 <__alt_data_end+0xff801bd4>
  802430:	d8c03217 	ldw	r3,200(sp)
  802434:	00c07a0e 	bge	zero,r3,802620 <___vfprintf_internal_r+0x211c>
  802438:	00800044 	movi	r2,1
  80243c:	d9003317 	ldw	r4,204(sp)
  802440:	1105883a 	add	r2,r2,r4
  802444:	d8802e15 	stw	r2,184(sp)
  802448:	10004e16 	blt	r2,zero,802584 <___vfprintf_internal_r+0x2080>
  80244c:	044019c4 	movi	r17,103
  802450:	003e2106 	br	801cd8 <__alt_data_end+0xff801cd8>
  802454:	d9002917 	ldw	r4,164(sp)
  802458:	d8802104 	addi	r2,sp,132
  80245c:	d8800315 	stw	r2,12(sp)
  802460:	d9000015 	stw	r4,0(sp)
  802464:	d8802504 	addi	r2,sp,148
  802468:	d9403617 	ldw	r5,216(sp)
  80246c:	d9002c17 	ldw	r4,176(sp)
  802470:	d8800215 	stw	r2,8(sp)
  802474:	d8802604 	addi	r2,sp,152
  802478:	d8800115 	stw	r2,4(sp)
  80247c:	01c000c4 	movi	r7,3
  802480:	980d883a 	mov	r6,r19
  802484:	da003d15 	stw	r8,244(sp)
  802488:	0802b280 	call	802b28 <_dtoa_r>
  80248c:	d8c02917 	ldw	r3,164(sp)
  802490:	da003d17 	ldw	r8,244(sp)
  802494:	1021883a 	mov	r16,r2
  802498:	00801184 	movi	r2,70
  80249c:	80f9883a 	add	fp,r16,r3
  8024a0:	88bfd926 	beq	r17,r2,802408 <__alt_data_end+0xff802408>
  8024a4:	003de806 	br	801c48 <__alt_data_end+0xff801c48>
  8024a8:	d9002917 	ldw	r4,164(sp)
  8024ac:	00c04d0e 	bge	zero,r3,8025e4 <___vfprintf_internal_r+0x20e0>
  8024b0:	2000441e 	bne	r4,zero,8025c4 <___vfprintf_internal_r+0x20c0>
  8024b4:	9480004c 	andi	r18,r18,1
  8024b8:	9000421e 	bne	r18,zero,8025c4 <___vfprintf_internal_r+0x20c0>
  8024bc:	1805883a 	mov	r2,r3
  8024c0:	18007016 	blt	r3,zero,802684 <___vfprintf_internal_r+0x2180>
  8024c4:	d8c03217 	ldw	r3,200(sp)
  8024c8:	d8c02e15 	stw	r3,184(sp)
  8024cc:	003e0206 	br	801cd8 <__alt_data_end+0xff801cd8>
  8024d0:	df0022c4 	addi	fp,sp,139
  8024d4:	dc002915 	stw	r16,164(sp)
  8024d8:	4027883a 	mov	r19,r8
  8024dc:	e021883a 	mov	r16,fp
  8024e0:	b009883a 	mov	r4,r22
  8024e4:	01400284 	movi	r5,10
  8024e8:	080a54c0 	call	80a54c <__modsi3>
  8024ec:	10800c04 	addi	r2,r2,48
  8024f0:	843fffc4 	addi	r16,r16,-1
  8024f4:	b009883a 	mov	r4,r22
  8024f8:	01400284 	movi	r5,10
  8024fc:	80800005 	stb	r2,0(r16)
  802500:	080a4c80 	call	80a4c8 <__divsi3>
  802504:	102d883a 	mov	r22,r2
  802508:	00800244 	movi	r2,9
  80250c:	15bff416 	blt	r2,r22,8024e0 <__alt_data_end+0xff8024e0>
  802510:	9811883a 	mov	r8,r19
  802514:	b0800c04 	addi	r2,r22,48
  802518:	8027883a 	mov	r19,r16
  80251c:	997fffc4 	addi	r5,r19,-1
  802520:	98bfffc5 	stb	r2,-1(r19)
  802524:	dc002917 	ldw	r16,164(sp)
  802528:	2f006a2e 	bgeu	r5,fp,8026d4 <___vfprintf_internal_r+0x21d0>
  80252c:	d9c02384 	addi	r7,sp,142
  802530:	3ccfc83a 	sub	r7,r7,r19
  802534:	d9002344 	addi	r4,sp,141
  802538:	e1cf883a 	add	r7,fp,r7
  80253c:	00000106 	br	802544 <___vfprintf_internal_r+0x2040>
  802540:	28800003 	ldbu	r2,0(r5)
  802544:	20800005 	stb	r2,0(r4)
  802548:	21000044 	addi	r4,r4,1
  80254c:	29400044 	addi	r5,r5,1
  802550:	393ffb1e 	bne	r7,r4,802540 <__alt_data_end+0xff802540>
  802554:	d8802304 	addi	r2,sp,140
  802558:	14c5c83a 	sub	r2,r2,r19
  80255c:	d8c02344 	addi	r3,sp,141
  802560:	1885883a 	add	r2,r3,r2
  802564:	003f7006 	br	802328 <__alt_data_end+0xff802328>
  802568:	0005883a 	mov	r2,zero
  80256c:	003f0f06 	br	8021ac <__alt_data_end+0xff8021ac>
  802570:	d8c03217 	ldw	r3,200(sp)
  802574:	18c00044 	addi	r3,r3,1
  802578:	d8c02e15 	stw	r3,184(sp)
  80257c:	1805883a 	mov	r2,r3
  802580:	183fb20e 	bge	r3,zero,80244c <__alt_data_end+0xff80244c>
  802584:	0005883a 	mov	r2,zero
  802588:	003fb006 	br	80244c <__alt_data_end+0xff80244c>
  80258c:	d9003617 	ldw	r4,216(sp)
  802590:	000d883a 	mov	r6,zero
  802594:	000f883a 	mov	r7,zero
  802598:	980b883a 	mov	r5,r19
  80259c:	d8c03c15 	stw	r3,240(sp)
  8025a0:	da003d15 	stw	r8,244(sp)
  8025a4:	080b8100 	call	80b810 <__eqdf2>
  8025a8:	d8c03c17 	ldw	r3,240(sp)
  8025ac:	da003d17 	ldw	r8,244(sp)
  8025b0:	103f9826 	beq	r2,zero,802414 <__alt_data_end+0xff802414>
  8025b4:	00800044 	movi	r2,1
  8025b8:	10c7c83a 	sub	r3,r2,r3
  8025bc:	d8c02615 	stw	r3,152(sp)
  8025c0:	003f9506 	br	802418 <__alt_data_end+0xff802418>
  8025c4:	d9002917 	ldw	r4,164(sp)
  8025c8:	d8c03217 	ldw	r3,200(sp)
  8025cc:	20800044 	addi	r2,r4,1
  8025d0:	1885883a 	add	r2,r3,r2
  8025d4:	d8802e15 	stw	r2,184(sp)
  8025d8:	103dbf0e 	bge	r2,zero,801cd8 <__alt_data_end+0xff801cd8>
  8025dc:	0005883a 	mov	r2,zero
  8025e0:	003dbd06 	br	801cd8 <__alt_data_end+0xff801cd8>
  8025e4:	2000211e 	bne	r4,zero,80266c <___vfprintf_internal_r+0x2168>
  8025e8:	9480004c 	andi	r18,r18,1
  8025ec:	90001f1e 	bne	r18,zero,80266c <___vfprintf_internal_r+0x2168>
  8025f0:	00800044 	movi	r2,1
  8025f4:	d8802e15 	stw	r2,184(sp)
  8025f8:	003db706 	br	801cd8 <__alt_data_end+0xff801cd8>
  8025fc:	00800b44 	movi	r2,45
  802600:	05adc83a 	sub	r22,zero,r22
  802604:	d8802305 	stb	r2,140(sp)
  802608:	003f3f06 	br	802308 <__alt_data_end+0xff802308>
  80260c:	0005883a 	mov	r2,zero
  802610:	003f5206 	br	80235c <__alt_data_end+0xff80235c>
  802614:	90a4703a 	and	r18,r18,r2
  802618:	903f4e26 	beq	r18,zero,802354 <__alt_data_end+0xff802354>
  80261c:	003f4a06 	br	802348 <__alt_data_end+0xff802348>
  802620:	00800084 	movi	r2,2
  802624:	10c5c83a 	sub	r2,r2,r3
  802628:	003f8406 	br	80243c <__alt_data_end+0xff80243c>
  80262c:	d8802d17 	ldw	r2,180(sp)
  802630:	d9002d17 	ldw	r4,180(sp)
  802634:	ac400043 	ldbu	r17,1(r21)
  802638:	10800017 	ldw	r2,0(r2)
  80263c:	582b883a 	mov	r21,r11
  802640:	d8802915 	stw	r2,164(sp)
  802644:	20800104 	addi	r2,r4,4
  802648:	d9002917 	ldw	r4,164(sp)
  80264c:	d8802d15 	stw	r2,180(sp)
  802650:	203e7a0e 	bge	r4,zero,80203c <__alt_data_end+0xff80203c>
  802654:	8c403fcc 	andi	r17,r17,255
  802658:	00bfffc4 	movi	r2,-1
  80265c:	8c40201c 	xori	r17,r17,128
  802660:	d8802915 	stw	r2,164(sp)
  802664:	8c7fe004 	addi	r17,r17,-128
  802668:	00380706 	br	800688 <__alt_data_end+0xff800688>
  80266c:	d8c02917 	ldw	r3,164(sp)
  802670:	18c00084 	addi	r3,r3,2
  802674:	d8c02e15 	stw	r3,184(sp)
  802678:	1805883a 	mov	r2,r3
  80267c:	183d960e 	bge	r3,zero,801cd8 <__alt_data_end+0xff801cd8>
  802680:	003fd606 	br	8025dc <__alt_data_end+0xff8025dc>
  802684:	0005883a 	mov	r2,zero
  802688:	003f8e06 	br	8024c4 <__alt_data_end+0xff8024c4>
  80268c:	9080004c 	andi	r2,r18,1
  802690:	103f811e 	bne	r2,zero,802498 <__alt_data_end+0xff802498>
  802694:	d8802117 	ldw	r2,132(sp)
  802698:	1405c83a 	sub	r2,r2,r16
  80269c:	d8803315 	stw	r2,204(sp)
  8026a0:	b47ef326 	beq	r22,r17,802270 <__alt_data_end+0xff802270>
  8026a4:	dd802617 	ldw	r22,152(sp)
  8026a8:	003f1106 	br	8022f0 <__alt_data_end+0xff8022f0>
  8026ac:	d9c02785 	stb	r7,158(sp)
  8026b0:	00390406 	br	800ac4 <__alt_data_end+0xff800ac4>
  8026b4:	d9c02785 	stb	r7,158(sp)
  8026b8:	0038d306 	br	800a08 <__alt_data_end+0xff800a08>
  8026bc:	d9c02785 	stb	r7,158(sp)
  8026c0:	003a6106 	br	801048 <__alt_data_end+0xff801048>
  8026c4:	d9c02785 	stb	r7,158(sp)
  8026c8:	003af806 	br	8012ac <__alt_data_end+0xff8012ac>
  8026cc:	0005883a 	mov	r2,zero
  8026d0:	003d7e06 	br	801ccc <__alt_data_end+0xff801ccc>
  8026d4:	d8802344 	addi	r2,sp,141
  8026d8:	003f1306 	br	802328 <__alt_data_end+0xff802328>
  8026dc:	d9c02785 	stb	r7,158(sp)
  8026e0:	00392306 	br	800b70 <__alt_data_end+0xff800b70>
  8026e4:	d9c02785 	stb	r7,158(sp)
  8026e8:	003aa906 	br	801190 <__alt_data_end+0xff801190>
  8026ec:	d9c02785 	stb	r7,158(sp)
  8026f0:	003a3d06 	br	800fe8 <__alt_data_end+0xff800fe8>
  8026f4:	d9c02785 	stb	r7,158(sp)
  8026f8:	003aca06 	br	801224 <__alt_data_end+0xff801224>

008026fc <__vfprintf_internal>:
  8026fc:	00802074 	movhi	r2,129
  802700:	1085d504 	addi	r2,r2,5972
  802704:	300f883a 	mov	r7,r6
  802708:	280d883a 	mov	r6,r5
  80270c:	200b883a 	mov	r5,r4
  802710:	11000017 	ldw	r4,0(r2)
  802714:	08005041 	jmpi	800504 <___vfprintf_internal_r>

00802718 <__sbprintf>:
  802718:	2880030b 	ldhu	r2,12(r5)
  80271c:	2ac01917 	ldw	r11,100(r5)
  802720:	2a80038b 	ldhu	r10,14(r5)
  802724:	2a400717 	ldw	r9,28(r5)
  802728:	2a000917 	ldw	r8,36(r5)
  80272c:	defee204 	addi	sp,sp,-1144
  802730:	00c10004 	movi	r3,1024
  802734:	dc011a15 	stw	r16,1128(sp)
  802738:	10bfff4c 	andi	r2,r2,65533
  80273c:	2821883a 	mov	r16,r5
  802740:	d8cb883a 	add	r5,sp,r3
  802744:	dc811c15 	stw	r18,1136(sp)
  802748:	dc411b15 	stw	r17,1132(sp)
  80274c:	dfc11d15 	stw	ra,1140(sp)
  802750:	2025883a 	mov	r18,r4
  802754:	d881030d 	sth	r2,1036(sp)
  802758:	dac11915 	stw	r11,1124(sp)
  80275c:	da81038d 	sth	r10,1038(sp)
  802760:	da410715 	stw	r9,1052(sp)
  802764:	da010915 	stw	r8,1060(sp)
  802768:	dec10015 	stw	sp,1024(sp)
  80276c:	dec10415 	stw	sp,1040(sp)
  802770:	d8c10215 	stw	r3,1032(sp)
  802774:	d8c10515 	stw	r3,1044(sp)
  802778:	d8010615 	stw	zero,1048(sp)
  80277c:	08005040 	call	800504 <___vfprintf_internal_r>
  802780:	1023883a 	mov	r17,r2
  802784:	10000416 	blt	r2,zero,802798 <__sbprintf+0x80>
  802788:	d9410004 	addi	r5,sp,1024
  80278c:	9009883a 	mov	r4,r18
  802790:	08043cc0 	call	8043cc <_fflush_r>
  802794:	10000d1e 	bne	r2,zero,8027cc <__sbprintf+0xb4>
  802798:	d881030b 	ldhu	r2,1036(sp)
  80279c:	1080100c 	andi	r2,r2,64
  8027a0:	10000326 	beq	r2,zero,8027b0 <__sbprintf+0x98>
  8027a4:	8080030b 	ldhu	r2,12(r16)
  8027a8:	10801014 	ori	r2,r2,64
  8027ac:	8080030d 	sth	r2,12(r16)
  8027b0:	8805883a 	mov	r2,r17
  8027b4:	dfc11d17 	ldw	ra,1140(sp)
  8027b8:	dc811c17 	ldw	r18,1136(sp)
  8027bc:	dc411b17 	ldw	r17,1132(sp)
  8027c0:	dc011a17 	ldw	r16,1128(sp)
  8027c4:	dec11e04 	addi	sp,sp,1144
  8027c8:	f800283a 	ret
  8027cc:	047fffc4 	movi	r17,-1
  8027d0:	003ff106 	br	802798 <__alt_data_end+0xff802798>

008027d4 <__swsetup_r>:
  8027d4:	00802074 	movhi	r2,129
  8027d8:	defffd04 	addi	sp,sp,-12
  8027dc:	1085d504 	addi	r2,r2,5972
  8027e0:	dc400115 	stw	r17,4(sp)
  8027e4:	2023883a 	mov	r17,r4
  8027e8:	11000017 	ldw	r4,0(r2)
  8027ec:	dc000015 	stw	r16,0(sp)
  8027f0:	dfc00215 	stw	ra,8(sp)
  8027f4:	2821883a 	mov	r16,r5
  8027f8:	20000226 	beq	r4,zero,802804 <__swsetup_r+0x30>
  8027fc:	20800e17 	ldw	r2,56(r4)
  802800:	10003126 	beq	r2,zero,8028c8 <__swsetup_r+0xf4>
  802804:	8080030b 	ldhu	r2,12(r16)
  802808:	10c0020c 	andi	r3,r2,8
  80280c:	1009883a 	mov	r4,r2
  802810:	18000f26 	beq	r3,zero,802850 <__swsetup_r+0x7c>
  802814:	80c00417 	ldw	r3,16(r16)
  802818:	18001526 	beq	r3,zero,802870 <__swsetup_r+0x9c>
  80281c:	1100004c 	andi	r4,r2,1
  802820:	20001c1e 	bne	r4,zero,802894 <__swsetup_r+0xc0>
  802824:	1080008c 	andi	r2,r2,2
  802828:	1000291e 	bne	r2,zero,8028d0 <__swsetup_r+0xfc>
  80282c:	80800517 	ldw	r2,20(r16)
  802830:	80800215 	stw	r2,8(r16)
  802834:	18001c26 	beq	r3,zero,8028a8 <__swsetup_r+0xd4>
  802838:	0005883a 	mov	r2,zero
  80283c:	dfc00217 	ldw	ra,8(sp)
  802840:	dc400117 	ldw	r17,4(sp)
  802844:	dc000017 	ldw	r16,0(sp)
  802848:	dec00304 	addi	sp,sp,12
  80284c:	f800283a 	ret
  802850:	2080040c 	andi	r2,r4,16
  802854:	10002e26 	beq	r2,zero,802910 <__swsetup_r+0x13c>
  802858:	2080010c 	andi	r2,r4,4
  80285c:	10001e1e 	bne	r2,zero,8028d8 <__swsetup_r+0x104>
  802860:	80c00417 	ldw	r3,16(r16)
  802864:	20800214 	ori	r2,r4,8
  802868:	8080030d 	sth	r2,12(r16)
  80286c:	183feb1e 	bne	r3,zero,80281c <__alt_data_end+0xff80281c>
  802870:	1100a00c 	andi	r4,r2,640
  802874:	01408004 	movi	r5,512
  802878:	217fe826 	beq	r4,r5,80281c <__alt_data_end+0xff80281c>
  80287c:	800b883a 	mov	r5,r16
  802880:	8809883a 	mov	r4,r17
  802884:	0804e900 	call	804e90 <__smakebuf_r>
  802888:	8080030b 	ldhu	r2,12(r16)
  80288c:	80c00417 	ldw	r3,16(r16)
  802890:	003fe206 	br	80281c <__alt_data_end+0xff80281c>
  802894:	80800517 	ldw	r2,20(r16)
  802898:	80000215 	stw	zero,8(r16)
  80289c:	0085c83a 	sub	r2,zero,r2
  8028a0:	80800615 	stw	r2,24(r16)
  8028a4:	183fe41e 	bne	r3,zero,802838 <__alt_data_end+0xff802838>
  8028a8:	80c0030b 	ldhu	r3,12(r16)
  8028ac:	0005883a 	mov	r2,zero
  8028b0:	1900200c 	andi	r4,r3,128
  8028b4:	203fe126 	beq	r4,zero,80283c <__alt_data_end+0xff80283c>
  8028b8:	18c01014 	ori	r3,r3,64
  8028bc:	80c0030d 	sth	r3,12(r16)
  8028c0:	00bfffc4 	movi	r2,-1
  8028c4:	003fdd06 	br	80283c <__alt_data_end+0xff80283c>
  8028c8:	08047a80 	call	8047a8 <__sinit>
  8028cc:	003fcd06 	br	802804 <__alt_data_end+0xff802804>
  8028d0:	0005883a 	mov	r2,zero
  8028d4:	003fd606 	br	802830 <__alt_data_end+0xff802830>
  8028d8:	81400c17 	ldw	r5,48(r16)
  8028dc:	28000626 	beq	r5,zero,8028f8 <__swsetup_r+0x124>
  8028e0:	80801004 	addi	r2,r16,64
  8028e4:	28800326 	beq	r5,r2,8028f4 <__swsetup_r+0x120>
  8028e8:	8809883a 	mov	r4,r17
  8028ec:	080491c0 	call	80491c <_free_r>
  8028f0:	8100030b 	ldhu	r4,12(r16)
  8028f4:	80000c15 	stw	zero,48(r16)
  8028f8:	80c00417 	ldw	r3,16(r16)
  8028fc:	00bff6c4 	movi	r2,-37
  802900:	1108703a 	and	r4,r2,r4
  802904:	80000115 	stw	zero,4(r16)
  802908:	80c00015 	stw	r3,0(r16)
  80290c:	003fd506 	br	802864 <__alt_data_end+0xff802864>
  802910:	00800244 	movi	r2,9
  802914:	88800015 	stw	r2,0(r17)
  802918:	20801014 	ori	r2,r4,64
  80291c:	8080030d 	sth	r2,12(r16)
  802920:	00bfffc4 	movi	r2,-1
  802924:	003fc506 	br	80283c <__alt_data_end+0xff80283c>

00802928 <quorem>:
  802928:	defff704 	addi	sp,sp,-36
  80292c:	dc800215 	stw	r18,8(sp)
  802930:	20800417 	ldw	r2,16(r4)
  802934:	2c800417 	ldw	r18,16(r5)
  802938:	dfc00815 	stw	ra,32(sp)
  80293c:	ddc00715 	stw	r23,28(sp)
  802940:	dd800615 	stw	r22,24(sp)
  802944:	dd400515 	stw	r21,20(sp)
  802948:	dd000415 	stw	r20,16(sp)
  80294c:	dcc00315 	stw	r19,12(sp)
  802950:	dc400115 	stw	r17,4(sp)
  802954:	dc000015 	stw	r16,0(sp)
  802958:	14807116 	blt	r2,r18,802b20 <quorem+0x1f8>
  80295c:	94bfffc4 	addi	r18,r18,-1
  802960:	94ad883a 	add	r22,r18,r18
  802964:	b5ad883a 	add	r22,r22,r22
  802968:	2c400504 	addi	r17,r5,20
  80296c:	8da9883a 	add	r20,r17,r22
  802970:	25400504 	addi	r21,r4,20
  802974:	282f883a 	mov	r23,r5
  802978:	adad883a 	add	r22,r21,r22
  80297c:	a1400017 	ldw	r5,0(r20)
  802980:	2021883a 	mov	r16,r4
  802984:	b1000017 	ldw	r4,0(r22)
  802988:	29400044 	addi	r5,r5,1
  80298c:	080a5c00 	call	80a5c0 <__udivsi3>
  802990:	1027883a 	mov	r19,r2
  802994:	10002c26 	beq	r2,zero,802a48 <quorem+0x120>
  802998:	a813883a 	mov	r9,r21
  80299c:	880b883a 	mov	r5,r17
  8029a0:	0009883a 	mov	r4,zero
  8029a4:	000d883a 	mov	r6,zero
  8029a8:	2a000017 	ldw	r8,0(r5)
  8029ac:	49c00017 	ldw	r7,0(r9)
  8029b0:	29400104 	addi	r5,r5,4
  8029b4:	40bfffcc 	andi	r2,r8,65535
  8029b8:	14c5383a 	mul	r2,r2,r19
  8029bc:	4010d43a 	srli	r8,r8,16
  8029c0:	38ffffcc 	andi	r3,r7,65535
  8029c4:	1105883a 	add	r2,r2,r4
  8029c8:	1008d43a 	srli	r4,r2,16
  8029cc:	44d1383a 	mul	r8,r8,r19
  8029d0:	198d883a 	add	r6,r3,r6
  8029d4:	10ffffcc 	andi	r3,r2,65535
  8029d8:	30c7c83a 	sub	r3,r6,r3
  8029dc:	380ed43a 	srli	r7,r7,16
  8029e0:	4105883a 	add	r2,r8,r4
  8029e4:	180dd43a 	srai	r6,r3,16
  8029e8:	113fffcc 	andi	r4,r2,65535
  8029ec:	390fc83a 	sub	r7,r7,r4
  8029f0:	398d883a 	add	r6,r7,r6
  8029f4:	300e943a 	slli	r7,r6,16
  8029f8:	18ffffcc 	andi	r3,r3,65535
  8029fc:	1008d43a 	srli	r4,r2,16
  802a00:	38ceb03a 	or	r7,r7,r3
  802a04:	49c00015 	stw	r7,0(r9)
  802a08:	300dd43a 	srai	r6,r6,16
  802a0c:	4a400104 	addi	r9,r9,4
  802a10:	a17fe52e 	bgeu	r20,r5,8029a8 <__alt_data_end+0xff8029a8>
  802a14:	b0800017 	ldw	r2,0(r22)
  802a18:	10000b1e 	bne	r2,zero,802a48 <quorem+0x120>
  802a1c:	b0bfff04 	addi	r2,r22,-4
  802a20:	a880082e 	bgeu	r21,r2,802a44 <quorem+0x11c>
  802a24:	b0ffff17 	ldw	r3,-4(r22)
  802a28:	18000326 	beq	r3,zero,802a38 <quorem+0x110>
  802a2c:	00000506 	br	802a44 <quorem+0x11c>
  802a30:	10c00017 	ldw	r3,0(r2)
  802a34:	1800031e 	bne	r3,zero,802a44 <quorem+0x11c>
  802a38:	10bfff04 	addi	r2,r2,-4
  802a3c:	94bfffc4 	addi	r18,r18,-1
  802a40:	a8bffb36 	bltu	r21,r2,802a30 <__alt_data_end+0xff802a30>
  802a44:	84800415 	stw	r18,16(r16)
  802a48:	b80b883a 	mov	r5,r23
  802a4c:	8009883a 	mov	r4,r16
  802a50:	08064740 	call	806474 <__mcmp>
  802a54:	10002616 	blt	r2,zero,802af0 <quorem+0x1c8>
  802a58:	9cc00044 	addi	r19,r19,1
  802a5c:	a805883a 	mov	r2,r21
  802a60:	000b883a 	mov	r5,zero
  802a64:	11000017 	ldw	r4,0(r2)
  802a68:	89800017 	ldw	r6,0(r17)
  802a6c:	10800104 	addi	r2,r2,4
  802a70:	20ffffcc 	andi	r3,r4,65535
  802a74:	194b883a 	add	r5,r3,r5
  802a78:	30ffffcc 	andi	r3,r6,65535
  802a7c:	28c7c83a 	sub	r3,r5,r3
  802a80:	300cd43a 	srli	r6,r6,16
  802a84:	2008d43a 	srli	r4,r4,16
  802a88:	180bd43a 	srai	r5,r3,16
  802a8c:	18ffffcc 	andi	r3,r3,65535
  802a90:	2189c83a 	sub	r4,r4,r6
  802a94:	2149883a 	add	r4,r4,r5
  802a98:	200c943a 	slli	r6,r4,16
  802a9c:	8c400104 	addi	r17,r17,4
  802aa0:	200bd43a 	srai	r5,r4,16
  802aa4:	30c6b03a 	or	r3,r6,r3
  802aa8:	10ffff15 	stw	r3,-4(r2)
  802aac:	a47fed2e 	bgeu	r20,r17,802a64 <__alt_data_end+0xff802a64>
  802ab0:	9485883a 	add	r2,r18,r18
  802ab4:	1085883a 	add	r2,r2,r2
  802ab8:	a887883a 	add	r3,r21,r2
  802abc:	18800017 	ldw	r2,0(r3)
  802ac0:	10000b1e 	bne	r2,zero,802af0 <quorem+0x1c8>
  802ac4:	18bfff04 	addi	r2,r3,-4
  802ac8:	a880082e 	bgeu	r21,r2,802aec <quorem+0x1c4>
  802acc:	18ffff17 	ldw	r3,-4(r3)
  802ad0:	18000326 	beq	r3,zero,802ae0 <quorem+0x1b8>
  802ad4:	00000506 	br	802aec <quorem+0x1c4>
  802ad8:	10c00017 	ldw	r3,0(r2)
  802adc:	1800031e 	bne	r3,zero,802aec <quorem+0x1c4>
  802ae0:	10bfff04 	addi	r2,r2,-4
  802ae4:	94bfffc4 	addi	r18,r18,-1
  802ae8:	a8bffb36 	bltu	r21,r2,802ad8 <__alt_data_end+0xff802ad8>
  802aec:	84800415 	stw	r18,16(r16)
  802af0:	9805883a 	mov	r2,r19
  802af4:	dfc00817 	ldw	ra,32(sp)
  802af8:	ddc00717 	ldw	r23,28(sp)
  802afc:	dd800617 	ldw	r22,24(sp)
  802b00:	dd400517 	ldw	r21,20(sp)
  802b04:	dd000417 	ldw	r20,16(sp)
  802b08:	dcc00317 	ldw	r19,12(sp)
  802b0c:	dc800217 	ldw	r18,8(sp)
  802b10:	dc400117 	ldw	r17,4(sp)
  802b14:	dc000017 	ldw	r16,0(sp)
  802b18:	dec00904 	addi	sp,sp,36
  802b1c:	f800283a 	ret
  802b20:	0005883a 	mov	r2,zero
  802b24:	003ff306 	br	802af4 <__alt_data_end+0xff802af4>

00802b28 <_dtoa_r>:
  802b28:	20801017 	ldw	r2,64(r4)
  802b2c:	deffde04 	addi	sp,sp,-136
  802b30:	df002015 	stw	fp,128(sp)
  802b34:	dcc01b15 	stw	r19,108(sp)
  802b38:	dc801a15 	stw	r18,104(sp)
  802b3c:	dc401915 	stw	r17,100(sp)
  802b40:	dc001815 	stw	r16,96(sp)
  802b44:	dfc02115 	stw	ra,132(sp)
  802b48:	ddc01f15 	stw	r23,124(sp)
  802b4c:	dd801e15 	stw	r22,120(sp)
  802b50:	dd401d15 	stw	r21,116(sp)
  802b54:	dd001c15 	stw	r20,112(sp)
  802b58:	d9c00315 	stw	r7,12(sp)
  802b5c:	2039883a 	mov	fp,r4
  802b60:	3023883a 	mov	r17,r6
  802b64:	2825883a 	mov	r18,r5
  802b68:	dc002417 	ldw	r16,144(sp)
  802b6c:	3027883a 	mov	r19,r6
  802b70:	10000826 	beq	r2,zero,802b94 <_dtoa_r+0x6c>
  802b74:	21801117 	ldw	r6,68(r4)
  802b78:	00c00044 	movi	r3,1
  802b7c:	100b883a 	mov	r5,r2
  802b80:	1986983a 	sll	r3,r3,r6
  802b84:	11800115 	stw	r6,4(r2)
  802b88:	10c00215 	stw	r3,8(r2)
  802b8c:	0805c540 	call	805c54 <_Bfree>
  802b90:	e0001015 	stw	zero,64(fp)
  802b94:	88002e16 	blt	r17,zero,802c50 <_dtoa_r+0x128>
  802b98:	80000015 	stw	zero,0(r16)
  802b9c:	889ffc2c 	andhi	r2,r17,32752
  802ba0:	00dffc34 	movhi	r3,32752
  802ba4:	10c01c26 	beq	r2,r3,802c18 <_dtoa_r+0xf0>
  802ba8:	000d883a 	mov	r6,zero
  802bac:	000f883a 	mov	r7,zero
  802bb0:	9009883a 	mov	r4,r18
  802bb4:	980b883a 	mov	r5,r19
  802bb8:	080b8100 	call	80b810 <__eqdf2>
  802bbc:	10002b1e 	bne	r2,zero,802c6c <_dtoa_r+0x144>
  802bc0:	d9c02317 	ldw	r7,140(sp)
  802bc4:	00800044 	movi	r2,1
  802bc8:	38800015 	stw	r2,0(r7)
  802bcc:	d8802517 	ldw	r2,148(sp)
  802bd0:	10019e26 	beq	r2,zero,80324c <_dtoa_r+0x724>
  802bd4:	d8c02517 	ldw	r3,148(sp)
  802bd8:	00802074 	movhi	r2,129
  802bdc:	10814444 	addi	r2,r2,1297
  802be0:	18800015 	stw	r2,0(r3)
  802be4:	10bfffc4 	addi	r2,r2,-1
  802be8:	dfc02117 	ldw	ra,132(sp)
  802bec:	df002017 	ldw	fp,128(sp)
  802bf0:	ddc01f17 	ldw	r23,124(sp)
  802bf4:	dd801e17 	ldw	r22,120(sp)
  802bf8:	dd401d17 	ldw	r21,116(sp)
  802bfc:	dd001c17 	ldw	r20,112(sp)
  802c00:	dcc01b17 	ldw	r19,108(sp)
  802c04:	dc801a17 	ldw	r18,104(sp)
  802c08:	dc401917 	ldw	r17,100(sp)
  802c0c:	dc001817 	ldw	r16,96(sp)
  802c10:	dec02204 	addi	sp,sp,136
  802c14:	f800283a 	ret
  802c18:	d8c02317 	ldw	r3,140(sp)
  802c1c:	0089c3c4 	movi	r2,9999
  802c20:	18800015 	stw	r2,0(r3)
  802c24:	90017726 	beq	r18,zero,803204 <_dtoa_r+0x6dc>
  802c28:	00802074 	movhi	r2,129
  802c2c:	10815004 	addi	r2,r2,1344
  802c30:	d9002517 	ldw	r4,148(sp)
  802c34:	203fec26 	beq	r4,zero,802be8 <__alt_data_end+0xff802be8>
  802c38:	10c000c7 	ldb	r3,3(r2)
  802c3c:	1801781e 	bne	r3,zero,803220 <_dtoa_r+0x6f8>
  802c40:	10c000c4 	addi	r3,r2,3
  802c44:	d9802517 	ldw	r6,148(sp)
  802c48:	30c00015 	stw	r3,0(r6)
  802c4c:	003fe606 	br	802be8 <__alt_data_end+0xff802be8>
  802c50:	04e00034 	movhi	r19,32768
  802c54:	9cffffc4 	addi	r19,r19,-1
  802c58:	00800044 	movi	r2,1
  802c5c:	8ce6703a 	and	r19,r17,r19
  802c60:	80800015 	stw	r2,0(r16)
  802c64:	9823883a 	mov	r17,r19
  802c68:	003fcc06 	br	802b9c <__alt_data_end+0xff802b9c>
  802c6c:	d8800204 	addi	r2,sp,8
  802c70:	d8800015 	stw	r2,0(sp)
  802c74:	d9c00104 	addi	r7,sp,4
  802c78:	900b883a 	mov	r5,r18
  802c7c:	980d883a 	mov	r6,r19
  802c80:	e009883a 	mov	r4,fp
  802c84:	8820d53a 	srli	r16,r17,20
  802c88:	08068400 	call	806840 <__d2b>
  802c8c:	d8800915 	stw	r2,36(sp)
  802c90:	8001651e 	bne	r16,zero,803228 <_dtoa_r+0x700>
  802c94:	dd800217 	ldw	r22,8(sp)
  802c98:	dc000117 	ldw	r16,4(sp)
  802c9c:	00800804 	movi	r2,32
  802ca0:	b421883a 	add	r16,r22,r16
  802ca4:	80c10c84 	addi	r3,r16,1074
  802ca8:	10c2d10e 	bge	r2,r3,8037f0 <_dtoa_r+0xcc8>
  802cac:	00801004 	movi	r2,64
  802cb0:	81010484 	addi	r4,r16,1042
  802cb4:	10c7c83a 	sub	r3,r2,r3
  802cb8:	9108d83a 	srl	r4,r18,r4
  802cbc:	88e2983a 	sll	r17,r17,r3
  802cc0:	2448b03a 	or	r4,r4,r17
  802cc4:	080cbd80 	call	80cbd8 <__floatunsidf>
  802cc8:	017f8434 	movhi	r5,65040
  802ccc:	01800044 	movi	r6,1
  802cd0:	1009883a 	mov	r4,r2
  802cd4:	194b883a 	add	r5,r3,r5
  802cd8:	843fffc4 	addi	r16,r16,-1
  802cdc:	d9801115 	stw	r6,68(sp)
  802ce0:	000d883a 	mov	r6,zero
  802ce4:	01cffe34 	movhi	r7,16376
  802ce8:	080c1800 	call	80c180 <__subdf3>
  802cec:	0198dbf4 	movhi	r6,25455
  802cf0:	01cff4f4 	movhi	r7,16339
  802cf4:	3190d844 	addi	r6,r6,17249
  802cf8:	39e1e9c4 	addi	r7,r7,-30809
  802cfc:	1009883a 	mov	r4,r2
  802d00:	180b883a 	mov	r5,r3
  802d04:	080ba680 	call	80ba68 <__muldf3>
  802d08:	01a2d874 	movhi	r6,35681
  802d0c:	01cff1f4 	movhi	r7,16327
  802d10:	31b22cc4 	addi	r6,r6,-14157
  802d14:	39e28a04 	addi	r7,r7,-30168
  802d18:	180b883a 	mov	r5,r3
  802d1c:	1009883a 	mov	r4,r2
  802d20:	080a67c0 	call	80a67c <__adddf3>
  802d24:	8009883a 	mov	r4,r16
  802d28:	1029883a 	mov	r20,r2
  802d2c:	1823883a 	mov	r17,r3
  802d30:	080cafc0 	call	80cafc <__floatsidf>
  802d34:	019427f4 	movhi	r6,20639
  802d38:	01cff4f4 	movhi	r7,16339
  802d3c:	319e7ec4 	addi	r6,r6,31227
  802d40:	39d104c4 	addi	r7,r7,17427
  802d44:	1009883a 	mov	r4,r2
  802d48:	180b883a 	mov	r5,r3
  802d4c:	080ba680 	call	80ba68 <__muldf3>
  802d50:	100d883a 	mov	r6,r2
  802d54:	180f883a 	mov	r7,r3
  802d58:	a009883a 	mov	r4,r20
  802d5c:	880b883a 	mov	r5,r17
  802d60:	080a67c0 	call	80a67c <__adddf3>
  802d64:	1009883a 	mov	r4,r2
  802d68:	180b883a 	mov	r5,r3
  802d6c:	1029883a 	mov	r20,r2
  802d70:	1823883a 	mov	r17,r3
  802d74:	080ca7c0 	call	80ca7c <__fixdfsi>
  802d78:	000d883a 	mov	r6,zero
  802d7c:	000f883a 	mov	r7,zero
  802d80:	a009883a 	mov	r4,r20
  802d84:	880b883a 	mov	r5,r17
  802d88:	d8800515 	stw	r2,20(sp)
  802d8c:	080b9740 	call	80b974 <__ledf2>
  802d90:	10028716 	blt	r2,zero,8037b0 <_dtoa_r+0xc88>
  802d94:	d8c00517 	ldw	r3,20(sp)
  802d98:	00800584 	movi	r2,22
  802d9c:	10c27536 	bltu	r2,r3,803774 <_dtoa_r+0xc4c>
  802da0:	180490fa 	slli	r2,r3,3
  802da4:	00c02074 	movhi	r3,129
  802da8:	18c16c04 	addi	r3,r3,1456
  802dac:	1885883a 	add	r2,r3,r2
  802db0:	11000017 	ldw	r4,0(r2)
  802db4:	11400117 	ldw	r5,4(r2)
  802db8:	900d883a 	mov	r6,r18
  802dbc:	980f883a 	mov	r7,r19
  802dc0:	080b8980 	call	80b898 <__gedf2>
  802dc4:	00828d0e 	bge	zero,r2,8037fc <_dtoa_r+0xcd4>
  802dc8:	d9000517 	ldw	r4,20(sp)
  802dcc:	d8000e15 	stw	zero,56(sp)
  802dd0:	213fffc4 	addi	r4,r4,-1
  802dd4:	d9000515 	stw	r4,20(sp)
  802dd8:	b42dc83a 	sub	r22,r22,r16
  802ddc:	b5bfffc4 	addi	r22,r22,-1
  802de0:	b0026f16 	blt	r22,zero,8037a0 <_dtoa_r+0xc78>
  802de4:	d8000815 	stw	zero,32(sp)
  802de8:	d9c00517 	ldw	r7,20(sp)
  802dec:	38026416 	blt	r7,zero,803780 <_dtoa_r+0xc58>
  802df0:	b1ed883a 	add	r22,r22,r7
  802df4:	d9c00d15 	stw	r7,52(sp)
  802df8:	d8000a15 	stw	zero,40(sp)
  802dfc:	d9800317 	ldw	r6,12(sp)
  802e00:	00800244 	movi	r2,9
  802e04:	11811436 	bltu	r2,r6,803258 <_dtoa_r+0x730>
  802e08:	00800144 	movi	r2,5
  802e0c:	1184e10e 	bge	r2,r6,804194 <_dtoa_r+0x166c>
  802e10:	31bfff04 	addi	r6,r6,-4
  802e14:	d9800315 	stw	r6,12(sp)
  802e18:	0023883a 	mov	r17,zero
  802e1c:	d9800317 	ldw	r6,12(sp)
  802e20:	008000c4 	movi	r2,3
  802e24:	30836726 	beq	r6,r2,803bc4 <_dtoa_r+0x109c>
  802e28:	1183410e 	bge	r2,r6,803b30 <_dtoa_r+0x1008>
  802e2c:	d9c00317 	ldw	r7,12(sp)
  802e30:	00800104 	movi	r2,4
  802e34:	38827c26 	beq	r7,r2,803828 <_dtoa_r+0xd00>
  802e38:	00800144 	movi	r2,5
  802e3c:	3884c41e 	bne	r7,r2,804150 <_dtoa_r+0x1628>
  802e40:	00800044 	movi	r2,1
  802e44:	d8800b15 	stw	r2,44(sp)
  802e48:	d8c00517 	ldw	r3,20(sp)
  802e4c:	d9002217 	ldw	r4,136(sp)
  802e50:	1907883a 	add	r3,r3,r4
  802e54:	19800044 	addi	r6,r3,1
  802e58:	d8c00c15 	stw	r3,48(sp)
  802e5c:	d9800615 	stw	r6,24(sp)
  802e60:	0183a40e 	bge	zero,r6,803cf4 <_dtoa_r+0x11cc>
  802e64:	d9800617 	ldw	r6,24(sp)
  802e68:	3021883a 	mov	r16,r6
  802e6c:	e0001115 	stw	zero,68(fp)
  802e70:	008005c4 	movi	r2,23
  802e74:	1184c92e 	bgeu	r2,r6,80419c <_dtoa_r+0x1674>
  802e78:	00c00044 	movi	r3,1
  802e7c:	00800104 	movi	r2,4
  802e80:	1085883a 	add	r2,r2,r2
  802e84:	11000504 	addi	r4,r2,20
  802e88:	180b883a 	mov	r5,r3
  802e8c:	18c00044 	addi	r3,r3,1
  802e90:	313ffb2e 	bgeu	r6,r4,802e80 <__alt_data_end+0xff802e80>
  802e94:	e1401115 	stw	r5,68(fp)
  802e98:	e009883a 	mov	r4,fp
  802e9c:	0805bac0 	call	805bac <_Balloc>
  802ea0:	d8800715 	stw	r2,28(sp)
  802ea4:	e0801015 	stw	r2,64(fp)
  802ea8:	00800384 	movi	r2,14
  802eac:	1400f736 	bltu	r2,r16,80328c <_dtoa_r+0x764>
  802eb0:	8800f626 	beq	r17,zero,80328c <_dtoa_r+0x764>
  802eb4:	d9c00517 	ldw	r7,20(sp)
  802eb8:	01c39a0e 	bge	zero,r7,803d24 <_dtoa_r+0x11fc>
  802ebc:	388003cc 	andi	r2,r7,15
  802ec0:	100490fa 	slli	r2,r2,3
  802ec4:	382bd13a 	srai	r21,r7,4
  802ec8:	00c02074 	movhi	r3,129
  802ecc:	18c16c04 	addi	r3,r3,1456
  802ed0:	1885883a 	add	r2,r3,r2
  802ed4:	a8c0040c 	andi	r3,r21,16
  802ed8:	12400017 	ldw	r9,0(r2)
  802edc:	12000117 	ldw	r8,4(r2)
  802ee0:	18037926 	beq	r3,zero,803cc8 <_dtoa_r+0x11a0>
  802ee4:	00802074 	movhi	r2,129
  802ee8:	10816204 	addi	r2,r2,1416
  802eec:	11800817 	ldw	r6,32(r2)
  802ef0:	11c00917 	ldw	r7,36(r2)
  802ef4:	9009883a 	mov	r4,r18
  802ef8:	980b883a 	mov	r5,r19
  802efc:	da001715 	stw	r8,92(sp)
  802f00:	da401615 	stw	r9,88(sp)
  802f04:	080af280 	call	80af28 <__divdf3>
  802f08:	da001717 	ldw	r8,92(sp)
  802f0c:	da401617 	ldw	r9,88(sp)
  802f10:	ad4003cc 	andi	r21,r21,15
  802f14:	040000c4 	movi	r16,3
  802f18:	1023883a 	mov	r17,r2
  802f1c:	1829883a 	mov	r20,r3
  802f20:	a8001126 	beq	r21,zero,802f68 <_dtoa_r+0x440>
  802f24:	05c02074 	movhi	r23,129
  802f28:	bdc16204 	addi	r23,r23,1416
  802f2c:	4805883a 	mov	r2,r9
  802f30:	4007883a 	mov	r3,r8
  802f34:	a980004c 	andi	r6,r21,1
  802f38:	1009883a 	mov	r4,r2
  802f3c:	a82bd07a 	srai	r21,r21,1
  802f40:	180b883a 	mov	r5,r3
  802f44:	30000426 	beq	r6,zero,802f58 <_dtoa_r+0x430>
  802f48:	b9800017 	ldw	r6,0(r23)
  802f4c:	b9c00117 	ldw	r7,4(r23)
  802f50:	84000044 	addi	r16,r16,1
  802f54:	080ba680 	call	80ba68 <__muldf3>
  802f58:	bdc00204 	addi	r23,r23,8
  802f5c:	a83ff51e 	bne	r21,zero,802f34 <__alt_data_end+0xff802f34>
  802f60:	1013883a 	mov	r9,r2
  802f64:	1811883a 	mov	r8,r3
  802f68:	480d883a 	mov	r6,r9
  802f6c:	400f883a 	mov	r7,r8
  802f70:	8809883a 	mov	r4,r17
  802f74:	a00b883a 	mov	r5,r20
  802f78:	080af280 	call	80af28 <__divdf3>
  802f7c:	d8800f15 	stw	r2,60(sp)
  802f80:	d8c01015 	stw	r3,64(sp)
  802f84:	d8c00e17 	ldw	r3,56(sp)
  802f88:	18000626 	beq	r3,zero,802fa4 <_dtoa_r+0x47c>
  802f8c:	d9000f17 	ldw	r4,60(sp)
  802f90:	d9401017 	ldw	r5,64(sp)
  802f94:	000d883a 	mov	r6,zero
  802f98:	01cffc34 	movhi	r7,16368
  802f9c:	080b9740 	call	80b974 <__ledf2>
  802fa0:	10040b16 	blt	r2,zero,803fd0 <_dtoa_r+0x14a8>
  802fa4:	8009883a 	mov	r4,r16
  802fa8:	080cafc0 	call	80cafc <__floatsidf>
  802fac:	d9800f17 	ldw	r6,60(sp)
  802fb0:	d9c01017 	ldw	r7,64(sp)
  802fb4:	1009883a 	mov	r4,r2
  802fb8:	180b883a 	mov	r5,r3
  802fbc:	080ba680 	call	80ba68 <__muldf3>
  802fc0:	000d883a 	mov	r6,zero
  802fc4:	01d00734 	movhi	r7,16412
  802fc8:	1009883a 	mov	r4,r2
  802fcc:	180b883a 	mov	r5,r3
  802fd0:	080a67c0 	call	80a67c <__adddf3>
  802fd4:	1021883a 	mov	r16,r2
  802fd8:	d8800617 	ldw	r2,24(sp)
  802fdc:	047f3034 	movhi	r17,64704
  802fe0:	1c63883a 	add	r17,r3,r17
  802fe4:	10031826 	beq	r2,zero,803c48 <_dtoa_r+0x1120>
  802fe8:	d8c00517 	ldw	r3,20(sp)
  802fec:	db000617 	ldw	r12,24(sp)
  802ff0:	d8c01315 	stw	r3,76(sp)
  802ff4:	d9000b17 	ldw	r4,44(sp)
  802ff8:	20038f26 	beq	r4,zero,803e38 <_dtoa_r+0x1310>
  802ffc:	60bfffc4 	addi	r2,r12,-1
  803000:	100490fa 	slli	r2,r2,3
  803004:	00c02074 	movhi	r3,129
  803008:	18c16c04 	addi	r3,r3,1456
  80300c:	1885883a 	add	r2,r3,r2
  803010:	11800017 	ldw	r6,0(r2)
  803014:	11c00117 	ldw	r7,4(r2)
  803018:	d8800717 	ldw	r2,28(sp)
  80301c:	0009883a 	mov	r4,zero
  803020:	014ff834 	movhi	r5,16352
  803024:	db001615 	stw	r12,88(sp)
  803028:	15c00044 	addi	r23,r2,1
  80302c:	080af280 	call	80af28 <__divdf3>
  803030:	800d883a 	mov	r6,r16
  803034:	880f883a 	mov	r7,r17
  803038:	1009883a 	mov	r4,r2
  80303c:	180b883a 	mov	r5,r3
  803040:	080c1800 	call	80c180 <__subdf3>
  803044:	d9401017 	ldw	r5,64(sp)
  803048:	d9000f17 	ldw	r4,60(sp)
  80304c:	102b883a 	mov	r21,r2
  803050:	d8c01215 	stw	r3,72(sp)
  803054:	080ca7c0 	call	80ca7c <__fixdfsi>
  803058:	1009883a 	mov	r4,r2
  80305c:	1029883a 	mov	r20,r2
  803060:	080cafc0 	call	80cafc <__floatsidf>
  803064:	d9000f17 	ldw	r4,60(sp)
  803068:	d9401017 	ldw	r5,64(sp)
  80306c:	100d883a 	mov	r6,r2
  803070:	180f883a 	mov	r7,r3
  803074:	080c1800 	call	80c180 <__subdf3>
  803078:	1823883a 	mov	r17,r3
  80307c:	d8c00717 	ldw	r3,28(sp)
  803080:	d9401217 	ldw	r5,72(sp)
  803084:	a2000c04 	addi	r8,r20,48
  803088:	1021883a 	mov	r16,r2
  80308c:	1a000005 	stb	r8,0(r3)
  803090:	800d883a 	mov	r6,r16
  803094:	880f883a 	mov	r7,r17
  803098:	a809883a 	mov	r4,r21
  80309c:	4029883a 	mov	r20,r8
  8030a0:	080b8980 	call	80b898 <__gedf2>
  8030a4:	00841d16 	blt	zero,r2,80411c <_dtoa_r+0x15f4>
  8030a8:	800d883a 	mov	r6,r16
  8030ac:	880f883a 	mov	r7,r17
  8030b0:	0009883a 	mov	r4,zero
  8030b4:	014ffc34 	movhi	r5,16368
  8030b8:	080c1800 	call	80c180 <__subdf3>
  8030bc:	d9401217 	ldw	r5,72(sp)
  8030c0:	100d883a 	mov	r6,r2
  8030c4:	180f883a 	mov	r7,r3
  8030c8:	a809883a 	mov	r4,r21
  8030cc:	080b8980 	call	80b898 <__gedf2>
  8030d0:	db001617 	ldw	r12,88(sp)
  8030d4:	00840e16 	blt	zero,r2,804110 <_dtoa_r+0x15e8>
  8030d8:	00800044 	movi	r2,1
  8030dc:	13006b0e 	bge	r2,r12,80328c <_dtoa_r+0x764>
  8030e0:	d9000717 	ldw	r4,28(sp)
  8030e4:	dd800f15 	stw	r22,60(sp)
  8030e8:	dcc01015 	stw	r19,64(sp)
  8030ec:	2319883a 	add	r12,r4,r12
  8030f0:	dcc01217 	ldw	r19,72(sp)
  8030f4:	602d883a 	mov	r22,r12
  8030f8:	dc801215 	stw	r18,72(sp)
  8030fc:	b825883a 	mov	r18,r23
  803100:	00000906 	br	803128 <_dtoa_r+0x600>
  803104:	080c1800 	call	80c180 <__subdf3>
  803108:	a80d883a 	mov	r6,r21
  80310c:	980f883a 	mov	r7,r19
  803110:	1009883a 	mov	r4,r2
  803114:	180b883a 	mov	r5,r3
  803118:	080b9740 	call	80b974 <__ledf2>
  80311c:	1003e816 	blt	r2,zero,8040c0 <_dtoa_r+0x1598>
  803120:	b825883a 	mov	r18,r23
  803124:	bd83e926 	beq	r23,r22,8040cc <_dtoa_r+0x15a4>
  803128:	a809883a 	mov	r4,r21
  80312c:	980b883a 	mov	r5,r19
  803130:	000d883a 	mov	r6,zero
  803134:	01d00934 	movhi	r7,16420
  803138:	080ba680 	call	80ba68 <__muldf3>
  80313c:	000d883a 	mov	r6,zero
  803140:	01d00934 	movhi	r7,16420
  803144:	8009883a 	mov	r4,r16
  803148:	880b883a 	mov	r5,r17
  80314c:	102b883a 	mov	r21,r2
  803150:	1827883a 	mov	r19,r3
  803154:	080ba680 	call	80ba68 <__muldf3>
  803158:	180b883a 	mov	r5,r3
  80315c:	1009883a 	mov	r4,r2
  803160:	1821883a 	mov	r16,r3
  803164:	1023883a 	mov	r17,r2
  803168:	080ca7c0 	call	80ca7c <__fixdfsi>
  80316c:	1009883a 	mov	r4,r2
  803170:	1029883a 	mov	r20,r2
  803174:	080cafc0 	call	80cafc <__floatsidf>
  803178:	8809883a 	mov	r4,r17
  80317c:	800b883a 	mov	r5,r16
  803180:	100d883a 	mov	r6,r2
  803184:	180f883a 	mov	r7,r3
  803188:	080c1800 	call	80c180 <__subdf3>
  80318c:	a5000c04 	addi	r20,r20,48
  803190:	a80d883a 	mov	r6,r21
  803194:	980f883a 	mov	r7,r19
  803198:	1009883a 	mov	r4,r2
  80319c:	180b883a 	mov	r5,r3
  8031a0:	95000005 	stb	r20,0(r18)
  8031a4:	1021883a 	mov	r16,r2
  8031a8:	1823883a 	mov	r17,r3
  8031ac:	080b9740 	call	80b974 <__ledf2>
  8031b0:	bdc00044 	addi	r23,r23,1
  8031b4:	800d883a 	mov	r6,r16
  8031b8:	880f883a 	mov	r7,r17
  8031bc:	0009883a 	mov	r4,zero
  8031c0:	014ffc34 	movhi	r5,16368
  8031c4:	103fcf0e 	bge	r2,zero,803104 <__alt_data_end+0xff803104>
  8031c8:	d8c01317 	ldw	r3,76(sp)
  8031cc:	d8c00515 	stw	r3,20(sp)
  8031d0:	d9400917 	ldw	r5,36(sp)
  8031d4:	e009883a 	mov	r4,fp
  8031d8:	0805c540 	call	805c54 <_Bfree>
  8031dc:	d9000517 	ldw	r4,20(sp)
  8031e0:	d9802317 	ldw	r6,140(sp)
  8031e4:	d9c02517 	ldw	r7,148(sp)
  8031e8:	b8000005 	stb	zero,0(r23)
  8031ec:	20800044 	addi	r2,r4,1
  8031f0:	30800015 	stw	r2,0(r6)
  8031f4:	3802aa26 	beq	r7,zero,803ca0 <_dtoa_r+0x1178>
  8031f8:	3dc00015 	stw	r23,0(r7)
  8031fc:	d8800717 	ldw	r2,28(sp)
  803200:	003e7906 	br	802be8 <__alt_data_end+0xff802be8>
  803204:	00800434 	movhi	r2,16
  803208:	10bfffc4 	addi	r2,r2,-1
  80320c:	88a2703a 	and	r17,r17,r2
  803210:	883e851e 	bne	r17,zero,802c28 <__alt_data_end+0xff802c28>
  803214:	00802074 	movhi	r2,129
  803218:	10814d04 	addi	r2,r2,1332
  80321c:	003e8406 	br	802c30 <__alt_data_end+0xff802c30>
  803220:	10c00204 	addi	r3,r2,8
  803224:	003e8706 	br	802c44 <__alt_data_end+0xff802c44>
  803228:	01400434 	movhi	r5,16
  80322c:	297fffc4 	addi	r5,r5,-1
  803230:	994a703a 	and	r5,r19,r5
  803234:	9009883a 	mov	r4,r18
  803238:	843f0044 	addi	r16,r16,-1023
  80323c:	294ffc34 	orhi	r5,r5,16368
  803240:	dd800217 	ldw	r22,8(sp)
  803244:	d8001115 	stw	zero,68(sp)
  803248:	003ea506 	br	802ce0 <__alt_data_end+0xff802ce0>
  80324c:	00802074 	movhi	r2,129
  803250:	10814404 	addi	r2,r2,1296
  803254:	003e6406 	br	802be8 <__alt_data_end+0xff802be8>
  803258:	e0001115 	stw	zero,68(fp)
  80325c:	000b883a 	mov	r5,zero
  803260:	e009883a 	mov	r4,fp
  803264:	0805bac0 	call	805bac <_Balloc>
  803268:	01bfffc4 	movi	r6,-1
  80326c:	01c00044 	movi	r7,1
  803270:	d8800715 	stw	r2,28(sp)
  803274:	d9800c15 	stw	r6,48(sp)
  803278:	e0801015 	stw	r2,64(fp)
  80327c:	d8000315 	stw	zero,12(sp)
  803280:	d9c00b15 	stw	r7,44(sp)
  803284:	d9800615 	stw	r6,24(sp)
  803288:	d8002215 	stw	zero,136(sp)
  80328c:	d8800117 	ldw	r2,4(sp)
  803290:	10008916 	blt	r2,zero,8034b8 <_dtoa_r+0x990>
  803294:	d9000517 	ldw	r4,20(sp)
  803298:	00c00384 	movi	r3,14
  80329c:	19008616 	blt	r3,r4,8034b8 <_dtoa_r+0x990>
  8032a0:	200490fa 	slli	r2,r4,3
  8032a4:	00c02074 	movhi	r3,129
  8032a8:	d9802217 	ldw	r6,136(sp)
  8032ac:	18c16c04 	addi	r3,r3,1456
  8032b0:	1885883a 	add	r2,r3,r2
  8032b4:	14000017 	ldw	r16,0(r2)
  8032b8:	14400117 	ldw	r17,4(r2)
  8032bc:	30016316 	blt	r6,zero,80384c <_dtoa_r+0xd24>
  8032c0:	800d883a 	mov	r6,r16
  8032c4:	880f883a 	mov	r7,r17
  8032c8:	9009883a 	mov	r4,r18
  8032cc:	980b883a 	mov	r5,r19
  8032d0:	080af280 	call	80af28 <__divdf3>
  8032d4:	180b883a 	mov	r5,r3
  8032d8:	1009883a 	mov	r4,r2
  8032dc:	080ca7c0 	call	80ca7c <__fixdfsi>
  8032e0:	1009883a 	mov	r4,r2
  8032e4:	102b883a 	mov	r21,r2
  8032e8:	080cafc0 	call	80cafc <__floatsidf>
  8032ec:	800d883a 	mov	r6,r16
  8032f0:	880f883a 	mov	r7,r17
  8032f4:	1009883a 	mov	r4,r2
  8032f8:	180b883a 	mov	r5,r3
  8032fc:	080ba680 	call	80ba68 <__muldf3>
  803300:	100d883a 	mov	r6,r2
  803304:	180f883a 	mov	r7,r3
  803308:	9009883a 	mov	r4,r18
  80330c:	980b883a 	mov	r5,r19
  803310:	080c1800 	call	80c180 <__subdf3>
  803314:	d9c00717 	ldw	r7,28(sp)
  803318:	1009883a 	mov	r4,r2
  80331c:	a8800c04 	addi	r2,r21,48
  803320:	38800005 	stb	r2,0(r7)
  803324:	3dc00044 	addi	r23,r7,1
  803328:	d9c00617 	ldw	r7,24(sp)
  80332c:	01800044 	movi	r6,1
  803330:	180b883a 	mov	r5,r3
  803334:	2005883a 	mov	r2,r4
  803338:	39803826 	beq	r7,r6,80341c <_dtoa_r+0x8f4>
  80333c:	000d883a 	mov	r6,zero
  803340:	01d00934 	movhi	r7,16420
  803344:	080ba680 	call	80ba68 <__muldf3>
  803348:	000d883a 	mov	r6,zero
  80334c:	000f883a 	mov	r7,zero
  803350:	1009883a 	mov	r4,r2
  803354:	180b883a 	mov	r5,r3
  803358:	1025883a 	mov	r18,r2
  80335c:	1827883a 	mov	r19,r3
  803360:	080b8100 	call	80b810 <__eqdf2>
  803364:	103f9a26 	beq	r2,zero,8031d0 <__alt_data_end+0xff8031d0>
  803368:	d9c00617 	ldw	r7,24(sp)
  80336c:	d8c00717 	ldw	r3,28(sp)
  803370:	b829883a 	mov	r20,r23
  803374:	38bfffc4 	addi	r2,r7,-1
  803378:	18ad883a 	add	r22,r3,r2
  80337c:	00000a06 	br	8033a8 <_dtoa_r+0x880>
  803380:	080ba680 	call	80ba68 <__muldf3>
  803384:	000d883a 	mov	r6,zero
  803388:	000f883a 	mov	r7,zero
  80338c:	1009883a 	mov	r4,r2
  803390:	180b883a 	mov	r5,r3
  803394:	1025883a 	mov	r18,r2
  803398:	1827883a 	mov	r19,r3
  80339c:	b829883a 	mov	r20,r23
  8033a0:	080b8100 	call	80b810 <__eqdf2>
  8033a4:	103f8a26 	beq	r2,zero,8031d0 <__alt_data_end+0xff8031d0>
  8033a8:	800d883a 	mov	r6,r16
  8033ac:	880f883a 	mov	r7,r17
  8033b0:	9009883a 	mov	r4,r18
  8033b4:	980b883a 	mov	r5,r19
  8033b8:	080af280 	call	80af28 <__divdf3>
  8033bc:	180b883a 	mov	r5,r3
  8033c0:	1009883a 	mov	r4,r2
  8033c4:	080ca7c0 	call	80ca7c <__fixdfsi>
  8033c8:	1009883a 	mov	r4,r2
  8033cc:	102b883a 	mov	r21,r2
  8033d0:	080cafc0 	call	80cafc <__floatsidf>
  8033d4:	800d883a 	mov	r6,r16
  8033d8:	880f883a 	mov	r7,r17
  8033dc:	1009883a 	mov	r4,r2
  8033e0:	180b883a 	mov	r5,r3
  8033e4:	080ba680 	call	80ba68 <__muldf3>
  8033e8:	100d883a 	mov	r6,r2
  8033ec:	180f883a 	mov	r7,r3
  8033f0:	9009883a 	mov	r4,r18
  8033f4:	980b883a 	mov	r5,r19
  8033f8:	080c1800 	call	80c180 <__subdf3>
  8033fc:	aa000c04 	addi	r8,r21,48
  803400:	a2000005 	stb	r8,0(r20)
  803404:	000d883a 	mov	r6,zero
  803408:	01d00934 	movhi	r7,16420
  80340c:	1009883a 	mov	r4,r2
  803410:	180b883a 	mov	r5,r3
  803414:	a5c00044 	addi	r23,r20,1
  803418:	b53fd91e 	bne	r22,r20,803380 <__alt_data_end+0xff803380>
  80341c:	100d883a 	mov	r6,r2
  803420:	180f883a 	mov	r7,r3
  803424:	1009883a 	mov	r4,r2
  803428:	180b883a 	mov	r5,r3
  80342c:	080a67c0 	call	80a67c <__adddf3>
  803430:	100d883a 	mov	r6,r2
  803434:	180f883a 	mov	r7,r3
  803438:	8009883a 	mov	r4,r16
  80343c:	880b883a 	mov	r5,r17
  803440:	1027883a 	mov	r19,r2
  803444:	1825883a 	mov	r18,r3
  803448:	080b9740 	call	80b974 <__ledf2>
  80344c:	10000816 	blt	r2,zero,803470 <_dtoa_r+0x948>
  803450:	980d883a 	mov	r6,r19
  803454:	900f883a 	mov	r7,r18
  803458:	8009883a 	mov	r4,r16
  80345c:	880b883a 	mov	r5,r17
  803460:	080b8100 	call	80b810 <__eqdf2>
  803464:	103f5a1e 	bne	r2,zero,8031d0 <__alt_data_end+0xff8031d0>
  803468:	ad40004c 	andi	r21,r21,1
  80346c:	a83f5826 	beq	r21,zero,8031d0 <__alt_data_end+0xff8031d0>
  803470:	bd3fffc3 	ldbu	r20,-1(r23)
  803474:	b8bfffc4 	addi	r2,r23,-1
  803478:	1007883a 	mov	r3,r2
  80347c:	01400e44 	movi	r5,57
  803480:	d9800717 	ldw	r6,28(sp)
  803484:	00000506 	br	80349c <_dtoa_r+0x974>
  803488:	18ffffc4 	addi	r3,r3,-1
  80348c:	11824726 	beq	r2,r6,803dac <_dtoa_r+0x1284>
  803490:	1d000003 	ldbu	r20,0(r3)
  803494:	102f883a 	mov	r23,r2
  803498:	10bfffc4 	addi	r2,r2,-1
  80349c:	a1003fcc 	andi	r4,r20,255
  8034a0:	2100201c 	xori	r4,r4,128
  8034a4:	213fe004 	addi	r4,r4,-128
  8034a8:	217ff726 	beq	r4,r5,803488 <__alt_data_end+0xff803488>
  8034ac:	a2000044 	addi	r8,r20,1
  8034b0:	12000005 	stb	r8,0(r2)
  8034b4:	003f4606 	br	8031d0 <__alt_data_end+0xff8031d0>
  8034b8:	d9000b17 	ldw	r4,44(sp)
  8034bc:	2000c826 	beq	r4,zero,8037e0 <_dtoa_r+0xcb8>
  8034c0:	d9800317 	ldw	r6,12(sp)
  8034c4:	00c00044 	movi	r3,1
  8034c8:	1980f90e 	bge	r3,r6,8038b0 <_dtoa_r+0xd88>
  8034cc:	d8800617 	ldw	r2,24(sp)
  8034d0:	d8c00a17 	ldw	r3,40(sp)
  8034d4:	157fffc4 	addi	r21,r2,-1
  8034d8:	1d41f316 	blt	r3,r21,803ca8 <_dtoa_r+0x1180>
  8034dc:	1d6bc83a 	sub	r21,r3,r21
  8034e0:	d9c00617 	ldw	r7,24(sp)
  8034e4:	3802aa16 	blt	r7,zero,803f90 <_dtoa_r+0x1468>
  8034e8:	dd000817 	ldw	r20,32(sp)
  8034ec:	d8800617 	ldw	r2,24(sp)
  8034f0:	d8c00817 	ldw	r3,32(sp)
  8034f4:	01400044 	movi	r5,1
  8034f8:	e009883a 	mov	r4,fp
  8034fc:	1887883a 	add	r3,r3,r2
  803500:	d8c00815 	stw	r3,32(sp)
  803504:	b0ad883a 	add	r22,r22,r2
  803508:	0805fb80 	call	805fb8 <__i2b>
  80350c:	1023883a 	mov	r17,r2
  803510:	a0000826 	beq	r20,zero,803534 <_dtoa_r+0xa0c>
  803514:	0580070e 	bge	zero,r22,803534 <_dtoa_r+0xa0c>
  803518:	a005883a 	mov	r2,r20
  80351c:	b500b916 	blt	r22,r20,803804 <_dtoa_r+0xcdc>
  803520:	d9000817 	ldw	r4,32(sp)
  803524:	a0a9c83a 	sub	r20,r20,r2
  803528:	b0adc83a 	sub	r22,r22,r2
  80352c:	2089c83a 	sub	r4,r4,r2
  803530:	d9000815 	stw	r4,32(sp)
  803534:	d9800a17 	ldw	r6,40(sp)
  803538:	0181810e 	bge	zero,r6,803b40 <_dtoa_r+0x1018>
  80353c:	d9c00b17 	ldw	r7,44(sp)
  803540:	3800b326 	beq	r7,zero,803810 <_dtoa_r+0xce8>
  803544:	a800b226 	beq	r21,zero,803810 <_dtoa_r+0xce8>
  803548:	880b883a 	mov	r5,r17
  80354c:	a80d883a 	mov	r6,r21
  803550:	e009883a 	mov	r4,fp
  803554:	08061ec0 	call	8061ec <__pow5mult>
  803558:	d9800917 	ldw	r6,36(sp)
  80355c:	100b883a 	mov	r5,r2
  803560:	e009883a 	mov	r4,fp
  803564:	1023883a 	mov	r17,r2
  803568:	0805ff40 	call	805ff4 <__multiply>
  80356c:	1021883a 	mov	r16,r2
  803570:	d8800a17 	ldw	r2,40(sp)
  803574:	d9400917 	ldw	r5,36(sp)
  803578:	e009883a 	mov	r4,fp
  80357c:	1545c83a 	sub	r2,r2,r21
  803580:	d8800a15 	stw	r2,40(sp)
  803584:	0805c540 	call	805c54 <_Bfree>
  803588:	d8c00a17 	ldw	r3,40(sp)
  80358c:	18009f1e 	bne	r3,zero,80380c <_dtoa_r+0xce4>
  803590:	05c00044 	movi	r23,1
  803594:	e009883a 	mov	r4,fp
  803598:	b80b883a 	mov	r5,r23
  80359c:	0805fb80 	call	805fb8 <__i2b>
  8035a0:	d9000d17 	ldw	r4,52(sp)
  8035a4:	102b883a 	mov	r21,r2
  8035a8:	2000ce26 	beq	r4,zero,8038e4 <_dtoa_r+0xdbc>
  8035ac:	200d883a 	mov	r6,r4
  8035b0:	100b883a 	mov	r5,r2
  8035b4:	e009883a 	mov	r4,fp
  8035b8:	08061ec0 	call	8061ec <__pow5mult>
  8035bc:	d9800317 	ldw	r6,12(sp)
  8035c0:	102b883a 	mov	r21,r2
  8035c4:	b981810e 	bge	r23,r6,803bcc <_dtoa_r+0x10a4>
  8035c8:	0027883a 	mov	r19,zero
  8035cc:	a8800417 	ldw	r2,16(r21)
  8035d0:	05c00804 	movi	r23,32
  8035d4:	10800104 	addi	r2,r2,4
  8035d8:	1085883a 	add	r2,r2,r2
  8035dc:	1085883a 	add	r2,r2,r2
  8035e0:	a885883a 	add	r2,r21,r2
  8035e4:	11000017 	ldw	r4,0(r2)
  8035e8:	0805ea00 	call	805ea0 <__hi0bits>
  8035ec:	b885c83a 	sub	r2,r23,r2
  8035f0:	1585883a 	add	r2,r2,r22
  8035f4:	108007cc 	andi	r2,r2,31
  8035f8:	1000b326 	beq	r2,zero,8038c8 <_dtoa_r+0xda0>
  8035fc:	00c00804 	movi	r3,32
  803600:	1887c83a 	sub	r3,r3,r2
  803604:	01000104 	movi	r4,4
  803608:	20c2cd0e 	bge	r4,r3,804140 <_dtoa_r+0x1618>
  80360c:	00c00704 	movi	r3,28
  803610:	1885c83a 	sub	r2,r3,r2
  803614:	d8c00817 	ldw	r3,32(sp)
  803618:	a0a9883a 	add	r20,r20,r2
  80361c:	b0ad883a 	add	r22,r22,r2
  803620:	1887883a 	add	r3,r3,r2
  803624:	d8c00815 	stw	r3,32(sp)
  803628:	d9800817 	ldw	r6,32(sp)
  80362c:	0180040e 	bge	zero,r6,803640 <_dtoa_r+0xb18>
  803630:	800b883a 	mov	r5,r16
  803634:	e009883a 	mov	r4,fp
  803638:	080632c0 	call	80632c <__lshift>
  80363c:	1021883a 	mov	r16,r2
  803640:	0580050e 	bge	zero,r22,803658 <_dtoa_r+0xb30>
  803644:	a80b883a 	mov	r5,r21
  803648:	b00d883a 	mov	r6,r22
  80364c:	e009883a 	mov	r4,fp
  803650:	080632c0 	call	80632c <__lshift>
  803654:	102b883a 	mov	r21,r2
  803658:	d9c00e17 	ldw	r7,56(sp)
  80365c:	3801211e 	bne	r7,zero,803ae4 <_dtoa_r+0xfbc>
  803660:	d9800617 	ldw	r6,24(sp)
  803664:	0181380e 	bge	zero,r6,803b48 <_dtoa_r+0x1020>
  803668:	d8c00b17 	ldw	r3,44(sp)
  80366c:	1800ab1e 	bne	r3,zero,80391c <_dtoa_r+0xdf4>
  803670:	dc800717 	ldw	r18,28(sp)
  803674:	dcc00617 	ldw	r19,24(sp)
  803678:	9029883a 	mov	r20,r18
  80367c:	00000206 	br	803688 <_dtoa_r+0xb60>
  803680:	0805c7c0 	call	805c7c <__multadd>
  803684:	1021883a 	mov	r16,r2
  803688:	a80b883a 	mov	r5,r21
  80368c:	8009883a 	mov	r4,r16
  803690:	08029280 	call	802928 <quorem>
  803694:	10800c04 	addi	r2,r2,48
  803698:	90800005 	stb	r2,0(r18)
  80369c:	94800044 	addi	r18,r18,1
  8036a0:	9507c83a 	sub	r3,r18,r20
  8036a4:	000f883a 	mov	r7,zero
  8036a8:	01800284 	movi	r6,10
  8036ac:	800b883a 	mov	r5,r16
  8036b0:	e009883a 	mov	r4,fp
  8036b4:	1cfff216 	blt	r3,r19,803680 <__alt_data_end+0xff803680>
  8036b8:	1011883a 	mov	r8,r2
  8036bc:	d8800617 	ldw	r2,24(sp)
  8036c0:	0082370e 	bge	zero,r2,803fa0 <_dtoa_r+0x1478>
  8036c4:	d9000717 	ldw	r4,28(sp)
  8036c8:	0025883a 	mov	r18,zero
  8036cc:	20af883a 	add	r23,r4,r2
  8036d0:	01800044 	movi	r6,1
  8036d4:	800b883a 	mov	r5,r16
  8036d8:	e009883a 	mov	r4,fp
  8036dc:	da001715 	stw	r8,92(sp)
  8036e0:	080632c0 	call	80632c <__lshift>
  8036e4:	a80b883a 	mov	r5,r21
  8036e8:	1009883a 	mov	r4,r2
  8036ec:	d8800915 	stw	r2,36(sp)
  8036f0:	08064740 	call	806474 <__mcmp>
  8036f4:	da001717 	ldw	r8,92(sp)
  8036f8:	0081800e 	bge	zero,r2,803cfc <_dtoa_r+0x11d4>
  8036fc:	b93fffc3 	ldbu	r4,-1(r23)
  803700:	b8bfffc4 	addi	r2,r23,-1
  803704:	1007883a 	mov	r3,r2
  803708:	01800e44 	movi	r6,57
  80370c:	d9c00717 	ldw	r7,28(sp)
  803710:	00000506 	br	803728 <_dtoa_r+0xc00>
  803714:	18ffffc4 	addi	r3,r3,-1
  803718:	11c12326 	beq	r2,r7,803ba8 <_dtoa_r+0x1080>
  80371c:	19000003 	ldbu	r4,0(r3)
  803720:	102f883a 	mov	r23,r2
  803724:	10bfffc4 	addi	r2,r2,-1
  803728:	21403fcc 	andi	r5,r4,255
  80372c:	2940201c 	xori	r5,r5,128
  803730:	297fe004 	addi	r5,r5,-128
  803734:	29bff726 	beq	r5,r6,803714 <__alt_data_end+0xff803714>
  803738:	21000044 	addi	r4,r4,1
  80373c:	11000005 	stb	r4,0(r2)
  803740:	a80b883a 	mov	r5,r21
  803744:	e009883a 	mov	r4,fp
  803748:	0805c540 	call	805c54 <_Bfree>
  80374c:	883ea026 	beq	r17,zero,8031d0 <__alt_data_end+0xff8031d0>
  803750:	90000426 	beq	r18,zero,803764 <_dtoa_r+0xc3c>
  803754:	94400326 	beq	r18,r17,803764 <_dtoa_r+0xc3c>
  803758:	900b883a 	mov	r5,r18
  80375c:	e009883a 	mov	r4,fp
  803760:	0805c540 	call	805c54 <_Bfree>
  803764:	880b883a 	mov	r5,r17
  803768:	e009883a 	mov	r4,fp
  80376c:	0805c540 	call	805c54 <_Bfree>
  803770:	003e9706 	br	8031d0 <__alt_data_end+0xff8031d0>
  803774:	01800044 	movi	r6,1
  803778:	d9800e15 	stw	r6,56(sp)
  80377c:	003d9606 	br	802dd8 <__alt_data_end+0xff802dd8>
  803780:	d8800817 	ldw	r2,32(sp)
  803784:	d8c00517 	ldw	r3,20(sp)
  803788:	d8000d15 	stw	zero,52(sp)
  80378c:	10c5c83a 	sub	r2,r2,r3
  803790:	00c9c83a 	sub	r4,zero,r3
  803794:	d8800815 	stw	r2,32(sp)
  803798:	d9000a15 	stw	r4,40(sp)
  80379c:	003d9706 	br	802dfc <__alt_data_end+0xff802dfc>
  8037a0:	05adc83a 	sub	r22,zero,r22
  8037a4:	dd800815 	stw	r22,32(sp)
  8037a8:	002d883a 	mov	r22,zero
  8037ac:	003d8e06 	br	802de8 <__alt_data_end+0xff802de8>
  8037b0:	d9000517 	ldw	r4,20(sp)
  8037b4:	080cafc0 	call	80cafc <__floatsidf>
  8037b8:	100d883a 	mov	r6,r2
  8037bc:	180f883a 	mov	r7,r3
  8037c0:	a009883a 	mov	r4,r20
  8037c4:	880b883a 	mov	r5,r17
  8037c8:	080b8100 	call	80b810 <__eqdf2>
  8037cc:	103d7126 	beq	r2,zero,802d94 <__alt_data_end+0xff802d94>
  8037d0:	d9c00517 	ldw	r7,20(sp)
  8037d4:	39ffffc4 	addi	r7,r7,-1
  8037d8:	d9c00515 	stw	r7,20(sp)
  8037dc:	003d6d06 	br	802d94 <__alt_data_end+0xff802d94>
  8037e0:	dd400a17 	ldw	r21,40(sp)
  8037e4:	dd000817 	ldw	r20,32(sp)
  8037e8:	0023883a 	mov	r17,zero
  8037ec:	003f4806 	br	803510 <__alt_data_end+0xff803510>
  8037f0:	10e3c83a 	sub	r17,r2,r3
  8037f4:	9448983a 	sll	r4,r18,r17
  8037f8:	003d3206 	br	802cc4 <__alt_data_end+0xff802cc4>
  8037fc:	d8000e15 	stw	zero,56(sp)
  803800:	003d7506 	br	802dd8 <__alt_data_end+0xff802dd8>
  803804:	b005883a 	mov	r2,r22
  803808:	003f4506 	br	803520 <__alt_data_end+0xff803520>
  80380c:	dc000915 	stw	r16,36(sp)
  803810:	d9800a17 	ldw	r6,40(sp)
  803814:	d9400917 	ldw	r5,36(sp)
  803818:	e009883a 	mov	r4,fp
  80381c:	08061ec0 	call	8061ec <__pow5mult>
  803820:	1021883a 	mov	r16,r2
  803824:	003f5a06 	br	803590 <__alt_data_end+0xff803590>
  803828:	01c00044 	movi	r7,1
  80382c:	d9c00b15 	stw	r7,44(sp)
  803830:	d8802217 	ldw	r2,136(sp)
  803834:	0081280e 	bge	zero,r2,803cd8 <_dtoa_r+0x11b0>
  803838:	100d883a 	mov	r6,r2
  80383c:	1021883a 	mov	r16,r2
  803840:	d8800c15 	stw	r2,48(sp)
  803844:	d8800615 	stw	r2,24(sp)
  803848:	003d8806 	br	802e6c <__alt_data_end+0xff802e6c>
  80384c:	d8800617 	ldw	r2,24(sp)
  803850:	00be9b16 	blt	zero,r2,8032c0 <__alt_data_end+0xff8032c0>
  803854:	10010f1e 	bne	r2,zero,803c94 <_dtoa_r+0x116c>
  803858:	880b883a 	mov	r5,r17
  80385c:	000d883a 	mov	r6,zero
  803860:	01d00534 	movhi	r7,16404
  803864:	8009883a 	mov	r4,r16
  803868:	080ba680 	call	80ba68 <__muldf3>
  80386c:	900d883a 	mov	r6,r18
  803870:	980f883a 	mov	r7,r19
  803874:	1009883a 	mov	r4,r2
  803878:	180b883a 	mov	r5,r3
  80387c:	080b8980 	call	80b898 <__gedf2>
  803880:	002b883a 	mov	r21,zero
  803884:	0023883a 	mov	r17,zero
  803888:	1000bf16 	blt	r2,zero,803b88 <_dtoa_r+0x1060>
  80388c:	d9802217 	ldw	r6,136(sp)
  803890:	ddc00717 	ldw	r23,28(sp)
  803894:	018c303a 	nor	r6,zero,r6
  803898:	d9800515 	stw	r6,20(sp)
  80389c:	a80b883a 	mov	r5,r21
  8038a0:	e009883a 	mov	r4,fp
  8038a4:	0805c540 	call	805c54 <_Bfree>
  8038a8:	883e4926 	beq	r17,zero,8031d0 <__alt_data_end+0xff8031d0>
  8038ac:	003fad06 	br	803764 <__alt_data_end+0xff803764>
  8038b0:	d9c01117 	ldw	r7,68(sp)
  8038b4:	3801bc26 	beq	r7,zero,803fa8 <_dtoa_r+0x1480>
  8038b8:	10810cc4 	addi	r2,r2,1075
  8038bc:	dd400a17 	ldw	r21,40(sp)
  8038c0:	dd000817 	ldw	r20,32(sp)
  8038c4:	003f0a06 	br	8034f0 <__alt_data_end+0xff8034f0>
  8038c8:	00800704 	movi	r2,28
  8038cc:	d9000817 	ldw	r4,32(sp)
  8038d0:	a0a9883a 	add	r20,r20,r2
  8038d4:	b0ad883a 	add	r22,r22,r2
  8038d8:	2089883a 	add	r4,r4,r2
  8038dc:	d9000815 	stw	r4,32(sp)
  8038e0:	003f5106 	br	803628 <__alt_data_end+0xff803628>
  8038e4:	d8c00317 	ldw	r3,12(sp)
  8038e8:	b8c1fc0e 	bge	r23,r3,8040dc <_dtoa_r+0x15b4>
  8038ec:	0027883a 	mov	r19,zero
  8038f0:	b805883a 	mov	r2,r23
  8038f4:	003f3e06 	br	8035f0 <__alt_data_end+0xff8035f0>
  8038f8:	880b883a 	mov	r5,r17
  8038fc:	e009883a 	mov	r4,fp
  803900:	000f883a 	mov	r7,zero
  803904:	01800284 	movi	r6,10
  803908:	0805c7c0 	call	805c7c <__multadd>
  80390c:	d9000c17 	ldw	r4,48(sp)
  803910:	1023883a 	mov	r17,r2
  803914:	0102040e 	bge	zero,r4,804128 <_dtoa_r+0x1600>
  803918:	d9000615 	stw	r4,24(sp)
  80391c:	0500050e 	bge	zero,r20,803934 <_dtoa_r+0xe0c>
  803920:	880b883a 	mov	r5,r17
  803924:	a00d883a 	mov	r6,r20
  803928:	e009883a 	mov	r4,fp
  80392c:	080632c0 	call	80632c <__lshift>
  803930:	1023883a 	mov	r17,r2
  803934:	9801241e 	bne	r19,zero,803dc8 <_dtoa_r+0x12a0>
  803938:	8829883a 	mov	r20,r17
  80393c:	d9000617 	ldw	r4,24(sp)
  803940:	dcc00717 	ldw	r19,28(sp)
  803944:	9480004c 	andi	r18,r18,1
  803948:	20bfffc4 	addi	r2,r4,-1
  80394c:	9885883a 	add	r2,r19,r2
  803950:	d8800415 	stw	r2,16(sp)
  803954:	dc800615 	stw	r18,24(sp)
  803958:	a80b883a 	mov	r5,r21
  80395c:	8009883a 	mov	r4,r16
  803960:	08029280 	call	802928 <quorem>
  803964:	880b883a 	mov	r5,r17
  803968:	8009883a 	mov	r4,r16
  80396c:	102f883a 	mov	r23,r2
  803970:	08064740 	call	806474 <__mcmp>
  803974:	a80b883a 	mov	r5,r21
  803978:	a00d883a 	mov	r6,r20
  80397c:	e009883a 	mov	r4,fp
  803980:	102d883a 	mov	r22,r2
  803984:	08064d40 	call	8064d4 <__mdiff>
  803988:	1007883a 	mov	r3,r2
  80398c:	10800317 	ldw	r2,12(r2)
  803990:	bc800c04 	addi	r18,r23,48
  803994:	180b883a 	mov	r5,r3
  803998:	10004e1e 	bne	r2,zero,803ad4 <_dtoa_r+0xfac>
  80399c:	8009883a 	mov	r4,r16
  8039a0:	d8c01615 	stw	r3,88(sp)
  8039a4:	08064740 	call	806474 <__mcmp>
  8039a8:	d8c01617 	ldw	r3,88(sp)
  8039ac:	e009883a 	mov	r4,fp
  8039b0:	d8801615 	stw	r2,88(sp)
  8039b4:	180b883a 	mov	r5,r3
  8039b8:	0805c540 	call	805c54 <_Bfree>
  8039bc:	d8801617 	ldw	r2,88(sp)
  8039c0:	1000041e 	bne	r2,zero,8039d4 <_dtoa_r+0xeac>
  8039c4:	d9800317 	ldw	r6,12(sp)
  8039c8:	3000021e 	bne	r6,zero,8039d4 <_dtoa_r+0xeac>
  8039cc:	d8c00617 	ldw	r3,24(sp)
  8039d0:	18003726 	beq	r3,zero,803ab0 <_dtoa_r+0xf88>
  8039d4:	b0002016 	blt	r22,zero,803a58 <_dtoa_r+0xf30>
  8039d8:	b000041e 	bne	r22,zero,8039ec <_dtoa_r+0xec4>
  8039dc:	d9000317 	ldw	r4,12(sp)
  8039e0:	2000021e 	bne	r4,zero,8039ec <_dtoa_r+0xec4>
  8039e4:	d8c00617 	ldw	r3,24(sp)
  8039e8:	18001b26 	beq	r3,zero,803a58 <_dtoa_r+0xf30>
  8039ec:	00810716 	blt	zero,r2,803e0c <_dtoa_r+0x12e4>
  8039f0:	d8c00417 	ldw	r3,16(sp)
  8039f4:	9d800044 	addi	r22,r19,1
  8039f8:	9c800005 	stb	r18,0(r19)
  8039fc:	b02f883a 	mov	r23,r22
  803a00:	98c10626 	beq	r19,r3,803e1c <_dtoa_r+0x12f4>
  803a04:	800b883a 	mov	r5,r16
  803a08:	000f883a 	mov	r7,zero
  803a0c:	01800284 	movi	r6,10
  803a10:	e009883a 	mov	r4,fp
  803a14:	0805c7c0 	call	805c7c <__multadd>
  803a18:	1021883a 	mov	r16,r2
  803a1c:	000f883a 	mov	r7,zero
  803a20:	01800284 	movi	r6,10
  803a24:	880b883a 	mov	r5,r17
  803a28:	e009883a 	mov	r4,fp
  803a2c:	8d002526 	beq	r17,r20,803ac4 <_dtoa_r+0xf9c>
  803a30:	0805c7c0 	call	805c7c <__multadd>
  803a34:	a00b883a 	mov	r5,r20
  803a38:	000f883a 	mov	r7,zero
  803a3c:	01800284 	movi	r6,10
  803a40:	e009883a 	mov	r4,fp
  803a44:	1023883a 	mov	r17,r2
  803a48:	0805c7c0 	call	805c7c <__multadd>
  803a4c:	1029883a 	mov	r20,r2
  803a50:	b027883a 	mov	r19,r22
  803a54:	003fc006 	br	803958 <__alt_data_end+0xff803958>
  803a58:	9011883a 	mov	r8,r18
  803a5c:	00800e0e 	bge	zero,r2,803a98 <_dtoa_r+0xf70>
  803a60:	800b883a 	mov	r5,r16
  803a64:	01800044 	movi	r6,1
  803a68:	e009883a 	mov	r4,fp
  803a6c:	da001715 	stw	r8,92(sp)
  803a70:	080632c0 	call	80632c <__lshift>
  803a74:	a80b883a 	mov	r5,r21
  803a78:	1009883a 	mov	r4,r2
  803a7c:	1021883a 	mov	r16,r2
  803a80:	08064740 	call	806474 <__mcmp>
  803a84:	da001717 	ldw	r8,92(sp)
  803a88:	0081960e 	bge	zero,r2,8040e4 <_dtoa_r+0x15bc>
  803a8c:	00800e44 	movi	r2,57
  803a90:	40817026 	beq	r8,r2,804054 <_dtoa_r+0x152c>
  803a94:	ba000c44 	addi	r8,r23,49
  803a98:	8825883a 	mov	r18,r17
  803a9c:	9dc00044 	addi	r23,r19,1
  803aa0:	9a000005 	stb	r8,0(r19)
  803aa4:	a023883a 	mov	r17,r20
  803aa8:	dc000915 	stw	r16,36(sp)
  803aac:	003f2406 	br	803740 <__alt_data_end+0xff803740>
  803ab0:	00800e44 	movi	r2,57
  803ab4:	9011883a 	mov	r8,r18
  803ab8:	90816626 	beq	r18,r2,804054 <_dtoa_r+0x152c>
  803abc:	05bff516 	blt	zero,r22,803a94 <__alt_data_end+0xff803a94>
  803ac0:	003ff506 	br	803a98 <__alt_data_end+0xff803a98>
  803ac4:	0805c7c0 	call	805c7c <__multadd>
  803ac8:	1023883a 	mov	r17,r2
  803acc:	1029883a 	mov	r20,r2
  803ad0:	003fdf06 	br	803a50 <__alt_data_end+0xff803a50>
  803ad4:	e009883a 	mov	r4,fp
  803ad8:	0805c540 	call	805c54 <_Bfree>
  803adc:	00800044 	movi	r2,1
  803ae0:	003fbc06 	br	8039d4 <__alt_data_end+0xff8039d4>
  803ae4:	a80b883a 	mov	r5,r21
  803ae8:	8009883a 	mov	r4,r16
  803aec:	08064740 	call	806474 <__mcmp>
  803af0:	103edb0e 	bge	r2,zero,803660 <__alt_data_end+0xff803660>
  803af4:	800b883a 	mov	r5,r16
  803af8:	000f883a 	mov	r7,zero
  803afc:	01800284 	movi	r6,10
  803b00:	e009883a 	mov	r4,fp
  803b04:	0805c7c0 	call	805c7c <__multadd>
  803b08:	1021883a 	mov	r16,r2
  803b0c:	d8800517 	ldw	r2,20(sp)
  803b10:	d8c00b17 	ldw	r3,44(sp)
  803b14:	10bfffc4 	addi	r2,r2,-1
  803b18:	d8800515 	stw	r2,20(sp)
  803b1c:	183f761e 	bne	r3,zero,8038f8 <__alt_data_end+0xff8038f8>
  803b20:	d9000c17 	ldw	r4,48(sp)
  803b24:	0101730e 	bge	zero,r4,8040f4 <_dtoa_r+0x15cc>
  803b28:	d9000615 	stw	r4,24(sp)
  803b2c:	003ed006 	br	803670 <__alt_data_end+0xff803670>
  803b30:	00800084 	movi	r2,2
  803b34:	3081861e 	bne	r6,r2,804150 <_dtoa_r+0x1628>
  803b38:	d8000b15 	stw	zero,44(sp)
  803b3c:	003f3c06 	br	803830 <__alt_data_end+0xff803830>
  803b40:	dc000917 	ldw	r16,36(sp)
  803b44:	003e9206 	br	803590 <__alt_data_end+0xff803590>
  803b48:	d9c00317 	ldw	r7,12(sp)
  803b4c:	00800084 	movi	r2,2
  803b50:	11fec50e 	bge	r2,r7,803668 <__alt_data_end+0xff803668>
  803b54:	d9000617 	ldw	r4,24(sp)
  803b58:	20013c1e 	bne	r4,zero,80404c <_dtoa_r+0x1524>
  803b5c:	a80b883a 	mov	r5,r21
  803b60:	000f883a 	mov	r7,zero
  803b64:	01800144 	movi	r6,5
  803b68:	e009883a 	mov	r4,fp
  803b6c:	0805c7c0 	call	805c7c <__multadd>
  803b70:	100b883a 	mov	r5,r2
  803b74:	8009883a 	mov	r4,r16
  803b78:	102b883a 	mov	r21,r2
  803b7c:	08064740 	call	806474 <__mcmp>
  803b80:	dc000915 	stw	r16,36(sp)
  803b84:	00bf410e 	bge	zero,r2,80388c <__alt_data_end+0xff80388c>
  803b88:	d9c00717 	ldw	r7,28(sp)
  803b8c:	00800c44 	movi	r2,49
  803b90:	38800005 	stb	r2,0(r7)
  803b94:	d8800517 	ldw	r2,20(sp)
  803b98:	3dc00044 	addi	r23,r7,1
  803b9c:	10800044 	addi	r2,r2,1
  803ba0:	d8800515 	stw	r2,20(sp)
  803ba4:	003f3d06 	br	80389c <__alt_data_end+0xff80389c>
  803ba8:	d9800517 	ldw	r6,20(sp)
  803bac:	d9c00717 	ldw	r7,28(sp)
  803bb0:	00800c44 	movi	r2,49
  803bb4:	31800044 	addi	r6,r6,1
  803bb8:	d9800515 	stw	r6,20(sp)
  803bbc:	38800005 	stb	r2,0(r7)
  803bc0:	003edf06 	br	803740 <__alt_data_end+0xff803740>
  803bc4:	d8000b15 	stw	zero,44(sp)
  803bc8:	003c9f06 	br	802e48 <__alt_data_end+0xff802e48>
  803bcc:	903e7e1e 	bne	r18,zero,8035c8 <__alt_data_end+0xff8035c8>
  803bd0:	00800434 	movhi	r2,16
  803bd4:	10bfffc4 	addi	r2,r2,-1
  803bd8:	9884703a 	and	r2,r19,r2
  803bdc:	1000ea1e 	bne	r2,zero,803f88 <_dtoa_r+0x1460>
  803be0:	9cdffc2c 	andhi	r19,r19,32752
  803be4:	9800e826 	beq	r19,zero,803f88 <_dtoa_r+0x1460>
  803be8:	d9c00817 	ldw	r7,32(sp)
  803bec:	b5800044 	addi	r22,r22,1
  803bf0:	04c00044 	movi	r19,1
  803bf4:	39c00044 	addi	r7,r7,1
  803bf8:	d9c00815 	stw	r7,32(sp)
  803bfc:	d8800d17 	ldw	r2,52(sp)
  803c00:	103e721e 	bne	r2,zero,8035cc <__alt_data_end+0xff8035cc>
  803c04:	00800044 	movi	r2,1
  803c08:	003e7906 	br	8035f0 <__alt_data_end+0xff8035f0>
  803c0c:	8009883a 	mov	r4,r16
  803c10:	080cafc0 	call	80cafc <__floatsidf>
  803c14:	d9800f17 	ldw	r6,60(sp)
  803c18:	d9c01017 	ldw	r7,64(sp)
  803c1c:	1009883a 	mov	r4,r2
  803c20:	180b883a 	mov	r5,r3
  803c24:	080ba680 	call	80ba68 <__muldf3>
  803c28:	000d883a 	mov	r6,zero
  803c2c:	01d00734 	movhi	r7,16412
  803c30:	1009883a 	mov	r4,r2
  803c34:	180b883a 	mov	r5,r3
  803c38:	080a67c0 	call	80a67c <__adddf3>
  803c3c:	047f3034 	movhi	r17,64704
  803c40:	1021883a 	mov	r16,r2
  803c44:	1c63883a 	add	r17,r3,r17
  803c48:	d9000f17 	ldw	r4,60(sp)
  803c4c:	d9401017 	ldw	r5,64(sp)
  803c50:	000d883a 	mov	r6,zero
  803c54:	01d00534 	movhi	r7,16404
  803c58:	080c1800 	call	80c180 <__subdf3>
  803c5c:	800d883a 	mov	r6,r16
  803c60:	880f883a 	mov	r7,r17
  803c64:	1009883a 	mov	r4,r2
  803c68:	180b883a 	mov	r5,r3
  803c6c:	102b883a 	mov	r21,r2
  803c70:	1829883a 	mov	r20,r3
  803c74:	080b8980 	call	80b898 <__gedf2>
  803c78:	00806c16 	blt	zero,r2,803e2c <_dtoa_r+0x1304>
  803c7c:	89e0003c 	xorhi	r7,r17,32768
  803c80:	800d883a 	mov	r6,r16
  803c84:	a809883a 	mov	r4,r21
  803c88:	a00b883a 	mov	r5,r20
  803c8c:	080b9740 	call	80b974 <__ledf2>
  803c90:	103d7e0e 	bge	r2,zero,80328c <__alt_data_end+0xff80328c>
  803c94:	002b883a 	mov	r21,zero
  803c98:	0023883a 	mov	r17,zero
  803c9c:	003efb06 	br	80388c <__alt_data_end+0xff80388c>
  803ca0:	d8800717 	ldw	r2,28(sp)
  803ca4:	003bd006 	br	802be8 <__alt_data_end+0xff802be8>
  803ca8:	d9000a17 	ldw	r4,40(sp)
  803cac:	d9800d17 	ldw	r6,52(sp)
  803cb0:	dd400a15 	stw	r21,40(sp)
  803cb4:	a905c83a 	sub	r2,r21,r4
  803cb8:	308d883a 	add	r6,r6,r2
  803cbc:	d9800d15 	stw	r6,52(sp)
  803cc0:	002b883a 	mov	r21,zero
  803cc4:	003e0606 	br	8034e0 <__alt_data_end+0xff8034e0>
  803cc8:	9023883a 	mov	r17,r18
  803ccc:	9829883a 	mov	r20,r19
  803cd0:	04000084 	movi	r16,2
  803cd4:	003c9206 	br	802f20 <__alt_data_end+0xff802f20>
  803cd8:	04000044 	movi	r16,1
  803cdc:	dc000c15 	stw	r16,48(sp)
  803ce0:	dc000615 	stw	r16,24(sp)
  803ce4:	dc002215 	stw	r16,136(sp)
  803ce8:	e0001115 	stw	zero,68(fp)
  803cec:	000b883a 	mov	r5,zero
  803cf0:	003c6906 	br	802e98 <__alt_data_end+0xff802e98>
  803cf4:	3021883a 	mov	r16,r6
  803cf8:	003ffb06 	br	803ce8 <__alt_data_end+0xff803ce8>
  803cfc:	1000021e 	bne	r2,zero,803d08 <_dtoa_r+0x11e0>
  803d00:	4200004c 	andi	r8,r8,1
  803d04:	403e7d1e 	bne	r8,zero,8036fc <__alt_data_end+0xff8036fc>
  803d08:	01000c04 	movi	r4,48
  803d0c:	00000106 	br	803d14 <_dtoa_r+0x11ec>
  803d10:	102f883a 	mov	r23,r2
  803d14:	b8bfffc4 	addi	r2,r23,-1
  803d18:	10c00007 	ldb	r3,0(r2)
  803d1c:	193ffc26 	beq	r3,r4,803d10 <__alt_data_end+0xff803d10>
  803d20:	003e8706 	br	803740 <__alt_data_end+0xff803740>
  803d24:	d8800517 	ldw	r2,20(sp)
  803d28:	00a3c83a 	sub	r17,zero,r2
  803d2c:	8800a426 	beq	r17,zero,803fc0 <_dtoa_r+0x1498>
  803d30:	888003cc 	andi	r2,r17,15
  803d34:	100490fa 	slli	r2,r2,3
  803d38:	00c02074 	movhi	r3,129
  803d3c:	18c16c04 	addi	r3,r3,1456
  803d40:	1885883a 	add	r2,r3,r2
  803d44:	11800017 	ldw	r6,0(r2)
  803d48:	11c00117 	ldw	r7,4(r2)
  803d4c:	9009883a 	mov	r4,r18
  803d50:	980b883a 	mov	r5,r19
  803d54:	8823d13a 	srai	r17,r17,4
  803d58:	080ba680 	call	80ba68 <__muldf3>
  803d5c:	d8800f15 	stw	r2,60(sp)
  803d60:	d8c01015 	stw	r3,64(sp)
  803d64:	8800e826 	beq	r17,zero,804108 <_dtoa_r+0x15e0>
  803d68:	05002074 	movhi	r20,129
  803d6c:	a5016204 	addi	r20,r20,1416
  803d70:	04000084 	movi	r16,2
  803d74:	8980004c 	andi	r6,r17,1
  803d78:	1009883a 	mov	r4,r2
  803d7c:	8823d07a 	srai	r17,r17,1
  803d80:	180b883a 	mov	r5,r3
  803d84:	30000426 	beq	r6,zero,803d98 <_dtoa_r+0x1270>
  803d88:	a1800017 	ldw	r6,0(r20)
  803d8c:	a1c00117 	ldw	r7,4(r20)
  803d90:	84000044 	addi	r16,r16,1
  803d94:	080ba680 	call	80ba68 <__muldf3>
  803d98:	a5000204 	addi	r20,r20,8
  803d9c:	883ff51e 	bne	r17,zero,803d74 <__alt_data_end+0xff803d74>
  803da0:	d8800f15 	stw	r2,60(sp)
  803da4:	d8c01015 	stw	r3,64(sp)
  803da8:	003c7606 	br	802f84 <__alt_data_end+0xff802f84>
  803dac:	00c00c04 	movi	r3,48
  803db0:	10c00005 	stb	r3,0(r2)
  803db4:	d8c00517 	ldw	r3,20(sp)
  803db8:	bd3fffc3 	ldbu	r20,-1(r23)
  803dbc:	18c00044 	addi	r3,r3,1
  803dc0:	d8c00515 	stw	r3,20(sp)
  803dc4:	003db906 	br	8034ac <__alt_data_end+0xff8034ac>
  803dc8:	89400117 	ldw	r5,4(r17)
  803dcc:	e009883a 	mov	r4,fp
  803dd0:	0805bac0 	call	805bac <_Balloc>
  803dd4:	89800417 	ldw	r6,16(r17)
  803dd8:	89400304 	addi	r5,r17,12
  803ddc:	11000304 	addi	r4,r2,12
  803de0:	31800084 	addi	r6,r6,2
  803de4:	318d883a 	add	r6,r6,r6
  803de8:	318d883a 	add	r6,r6,r6
  803dec:	1027883a 	mov	r19,r2
  803df0:	080593c0 	call	80593c <memcpy>
  803df4:	01800044 	movi	r6,1
  803df8:	980b883a 	mov	r5,r19
  803dfc:	e009883a 	mov	r4,fp
  803e00:	080632c0 	call	80632c <__lshift>
  803e04:	1029883a 	mov	r20,r2
  803e08:	003ecc06 	br	80393c <__alt_data_end+0xff80393c>
  803e0c:	00800e44 	movi	r2,57
  803e10:	90809026 	beq	r18,r2,804054 <_dtoa_r+0x152c>
  803e14:	92000044 	addi	r8,r18,1
  803e18:	003f1f06 	br	803a98 <__alt_data_end+0xff803a98>
  803e1c:	9011883a 	mov	r8,r18
  803e20:	8825883a 	mov	r18,r17
  803e24:	a023883a 	mov	r17,r20
  803e28:	003e2906 	br	8036d0 <__alt_data_end+0xff8036d0>
  803e2c:	002b883a 	mov	r21,zero
  803e30:	0023883a 	mov	r17,zero
  803e34:	003f5406 	br	803b88 <__alt_data_end+0xff803b88>
  803e38:	61bfffc4 	addi	r6,r12,-1
  803e3c:	300490fa 	slli	r2,r6,3
  803e40:	00c02074 	movhi	r3,129
  803e44:	18c16c04 	addi	r3,r3,1456
  803e48:	1885883a 	add	r2,r3,r2
  803e4c:	11000017 	ldw	r4,0(r2)
  803e50:	11400117 	ldw	r5,4(r2)
  803e54:	d8800717 	ldw	r2,28(sp)
  803e58:	880f883a 	mov	r7,r17
  803e5c:	d9801215 	stw	r6,72(sp)
  803e60:	800d883a 	mov	r6,r16
  803e64:	db001615 	stw	r12,88(sp)
  803e68:	15c00044 	addi	r23,r2,1
  803e6c:	080ba680 	call	80ba68 <__muldf3>
  803e70:	d9401017 	ldw	r5,64(sp)
  803e74:	d9000f17 	ldw	r4,60(sp)
  803e78:	d8c01515 	stw	r3,84(sp)
  803e7c:	d8801415 	stw	r2,80(sp)
  803e80:	080ca7c0 	call	80ca7c <__fixdfsi>
  803e84:	1009883a 	mov	r4,r2
  803e88:	1021883a 	mov	r16,r2
  803e8c:	080cafc0 	call	80cafc <__floatsidf>
  803e90:	d9000f17 	ldw	r4,60(sp)
  803e94:	d9401017 	ldw	r5,64(sp)
  803e98:	100d883a 	mov	r6,r2
  803e9c:	180f883a 	mov	r7,r3
  803ea0:	080c1800 	call	80c180 <__subdf3>
  803ea4:	1829883a 	mov	r20,r3
  803ea8:	d8c00717 	ldw	r3,28(sp)
  803eac:	84000c04 	addi	r16,r16,48
  803eb0:	1023883a 	mov	r17,r2
  803eb4:	1c000005 	stb	r16,0(r3)
  803eb8:	db001617 	ldw	r12,88(sp)
  803ebc:	00800044 	movi	r2,1
  803ec0:	60802226 	beq	r12,r2,803f4c <_dtoa_r+0x1424>
  803ec4:	d9c00717 	ldw	r7,28(sp)
  803ec8:	8805883a 	mov	r2,r17
  803ecc:	b82b883a 	mov	r21,r23
  803ed0:	3b19883a 	add	r12,r7,r12
  803ed4:	6023883a 	mov	r17,r12
  803ed8:	a007883a 	mov	r3,r20
  803edc:	dc800f15 	stw	r18,60(sp)
  803ee0:	000d883a 	mov	r6,zero
  803ee4:	01d00934 	movhi	r7,16420
  803ee8:	1009883a 	mov	r4,r2
  803eec:	180b883a 	mov	r5,r3
  803ef0:	080ba680 	call	80ba68 <__muldf3>
  803ef4:	180b883a 	mov	r5,r3
  803ef8:	1009883a 	mov	r4,r2
  803efc:	1829883a 	mov	r20,r3
  803f00:	1025883a 	mov	r18,r2
  803f04:	080ca7c0 	call	80ca7c <__fixdfsi>
  803f08:	1009883a 	mov	r4,r2
  803f0c:	1021883a 	mov	r16,r2
  803f10:	080cafc0 	call	80cafc <__floatsidf>
  803f14:	100d883a 	mov	r6,r2
  803f18:	180f883a 	mov	r7,r3
  803f1c:	9009883a 	mov	r4,r18
  803f20:	a00b883a 	mov	r5,r20
  803f24:	84000c04 	addi	r16,r16,48
  803f28:	080c1800 	call	80c180 <__subdf3>
  803f2c:	ad400044 	addi	r21,r21,1
  803f30:	ac3fffc5 	stb	r16,-1(r21)
  803f34:	ac7fea1e 	bne	r21,r17,803ee0 <__alt_data_end+0xff803ee0>
  803f38:	1023883a 	mov	r17,r2
  803f3c:	d8801217 	ldw	r2,72(sp)
  803f40:	dc800f17 	ldw	r18,60(sp)
  803f44:	1829883a 	mov	r20,r3
  803f48:	b8af883a 	add	r23,r23,r2
  803f4c:	d9001417 	ldw	r4,80(sp)
  803f50:	d9401517 	ldw	r5,84(sp)
  803f54:	000d883a 	mov	r6,zero
  803f58:	01cff834 	movhi	r7,16352
  803f5c:	080a67c0 	call	80a67c <__adddf3>
  803f60:	880d883a 	mov	r6,r17
  803f64:	a00f883a 	mov	r7,r20
  803f68:	1009883a 	mov	r4,r2
  803f6c:	180b883a 	mov	r5,r3
  803f70:	080b9740 	call	80b974 <__ledf2>
  803f74:	10003e0e 	bge	r2,zero,804070 <_dtoa_r+0x1548>
  803f78:	d9001317 	ldw	r4,76(sp)
  803f7c:	bd3fffc3 	ldbu	r20,-1(r23)
  803f80:	d9000515 	stw	r4,20(sp)
  803f84:	003d3b06 	br	803474 <__alt_data_end+0xff803474>
  803f88:	0027883a 	mov	r19,zero
  803f8c:	003f1b06 	br	803bfc <__alt_data_end+0xff803bfc>
  803f90:	d8800817 	ldw	r2,32(sp)
  803f94:	11e9c83a 	sub	r20,r2,r7
  803f98:	0005883a 	mov	r2,zero
  803f9c:	003d5406 	br	8034f0 <__alt_data_end+0xff8034f0>
  803fa0:	00800044 	movi	r2,1
  803fa4:	003dc706 	br	8036c4 <__alt_data_end+0xff8036c4>
  803fa8:	d8c00217 	ldw	r3,8(sp)
  803fac:	00800d84 	movi	r2,54
  803fb0:	dd400a17 	ldw	r21,40(sp)
  803fb4:	10c5c83a 	sub	r2,r2,r3
  803fb8:	dd000817 	ldw	r20,32(sp)
  803fbc:	003d4c06 	br	8034f0 <__alt_data_end+0xff8034f0>
  803fc0:	dc800f15 	stw	r18,60(sp)
  803fc4:	dcc01015 	stw	r19,64(sp)
  803fc8:	04000084 	movi	r16,2
  803fcc:	003bed06 	br	802f84 <__alt_data_end+0xff802f84>
  803fd0:	d9000617 	ldw	r4,24(sp)
  803fd4:	203f0d26 	beq	r4,zero,803c0c <__alt_data_end+0xff803c0c>
  803fd8:	d9800c17 	ldw	r6,48(sp)
  803fdc:	01bcab0e 	bge	zero,r6,80328c <__alt_data_end+0xff80328c>
  803fe0:	d9401017 	ldw	r5,64(sp)
  803fe4:	d9000f17 	ldw	r4,60(sp)
  803fe8:	000d883a 	mov	r6,zero
  803fec:	01d00934 	movhi	r7,16420
  803ff0:	080ba680 	call	80ba68 <__muldf3>
  803ff4:	81000044 	addi	r4,r16,1
  803ff8:	d8800f15 	stw	r2,60(sp)
  803ffc:	d8c01015 	stw	r3,64(sp)
  804000:	080cafc0 	call	80cafc <__floatsidf>
  804004:	d9800f17 	ldw	r6,60(sp)
  804008:	d9c01017 	ldw	r7,64(sp)
  80400c:	1009883a 	mov	r4,r2
  804010:	180b883a 	mov	r5,r3
  804014:	080ba680 	call	80ba68 <__muldf3>
  804018:	01d00734 	movhi	r7,16412
  80401c:	000d883a 	mov	r6,zero
  804020:	1009883a 	mov	r4,r2
  804024:	180b883a 	mov	r5,r3
  804028:	080a67c0 	call	80a67c <__adddf3>
  80402c:	d9c00517 	ldw	r7,20(sp)
  804030:	047f3034 	movhi	r17,64704
  804034:	1021883a 	mov	r16,r2
  804038:	39ffffc4 	addi	r7,r7,-1
  80403c:	d9c01315 	stw	r7,76(sp)
  804040:	1c63883a 	add	r17,r3,r17
  804044:	db000c17 	ldw	r12,48(sp)
  804048:	003bea06 	br	802ff4 <__alt_data_end+0xff802ff4>
  80404c:	dc000915 	stw	r16,36(sp)
  804050:	003e0e06 	br	80388c <__alt_data_end+0xff80388c>
  804054:	01000e44 	movi	r4,57
  804058:	8825883a 	mov	r18,r17
  80405c:	9dc00044 	addi	r23,r19,1
  804060:	99000005 	stb	r4,0(r19)
  804064:	a023883a 	mov	r17,r20
  804068:	dc000915 	stw	r16,36(sp)
  80406c:	003da406 	br	803700 <__alt_data_end+0xff803700>
  804070:	d9801417 	ldw	r6,80(sp)
  804074:	d9c01517 	ldw	r7,84(sp)
  804078:	0009883a 	mov	r4,zero
  80407c:	014ff834 	movhi	r5,16352
  804080:	080c1800 	call	80c180 <__subdf3>
  804084:	880d883a 	mov	r6,r17
  804088:	a00f883a 	mov	r7,r20
  80408c:	1009883a 	mov	r4,r2
  804090:	180b883a 	mov	r5,r3
  804094:	080b8980 	call	80b898 <__gedf2>
  804098:	00bc7c0e 	bge	zero,r2,80328c <__alt_data_end+0xff80328c>
  80409c:	01000c04 	movi	r4,48
  8040a0:	00000106 	br	8040a8 <_dtoa_r+0x1580>
  8040a4:	102f883a 	mov	r23,r2
  8040a8:	b8bfffc4 	addi	r2,r23,-1
  8040ac:	10c00007 	ldb	r3,0(r2)
  8040b0:	193ffc26 	beq	r3,r4,8040a4 <__alt_data_end+0xff8040a4>
  8040b4:	d9801317 	ldw	r6,76(sp)
  8040b8:	d9800515 	stw	r6,20(sp)
  8040bc:	003c4406 	br	8031d0 <__alt_data_end+0xff8031d0>
  8040c0:	d9801317 	ldw	r6,76(sp)
  8040c4:	d9800515 	stw	r6,20(sp)
  8040c8:	003cea06 	br	803474 <__alt_data_end+0xff803474>
  8040cc:	dd800f17 	ldw	r22,60(sp)
  8040d0:	dcc01017 	ldw	r19,64(sp)
  8040d4:	dc801217 	ldw	r18,72(sp)
  8040d8:	003c6c06 	br	80328c <__alt_data_end+0xff80328c>
  8040dc:	903e031e 	bne	r18,zero,8038ec <__alt_data_end+0xff8038ec>
  8040e0:	003ebb06 	br	803bd0 <__alt_data_end+0xff803bd0>
  8040e4:	103e6c1e 	bne	r2,zero,803a98 <__alt_data_end+0xff803a98>
  8040e8:	4080004c 	andi	r2,r8,1
  8040ec:	103e6a26 	beq	r2,zero,803a98 <__alt_data_end+0xff803a98>
  8040f0:	003e6606 	br	803a8c <__alt_data_end+0xff803a8c>
  8040f4:	d8c00317 	ldw	r3,12(sp)
  8040f8:	00800084 	movi	r2,2
  8040fc:	10c02916 	blt	r2,r3,8041a4 <_dtoa_r+0x167c>
  804100:	d9000c17 	ldw	r4,48(sp)
  804104:	003e8806 	br	803b28 <__alt_data_end+0xff803b28>
  804108:	04000084 	movi	r16,2
  80410c:	003b9d06 	br	802f84 <__alt_data_end+0xff802f84>
  804110:	d9001317 	ldw	r4,76(sp)
  804114:	d9000515 	stw	r4,20(sp)
  804118:	003cd606 	br	803474 <__alt_data_end+0xff803474>
  80411c:	d8801317 	ldw	r2,76(sp)
  804120:	d8800515 	stw	r2,20(sp)
  804124:	003c2a06 	br	8031d0 <__alt_data_end+0xff8031d0>
  804128:	d9800317 	ldw	r6,12(sp)
  80412c:	00800084 	movi	r2,2
  804130:	11801516 	blt	r2,r6,804188 <_dtoa_r+0x1660>
  804134:	d9c00c17 	ldw	r7,48(sp)
  804138:	d9c00615 	stw	r7,24(sp)
  80413c:	003df706 	br	80391c <__alt_data_end+0xff80391c>
  804140:	193d3926 	beq	r3,r4,803628 <__alt_data_end+0xff803628>
  804144:	00c00f04 	movi	r3,60
  804148:	1885c83a 	sub	r2,r3,r2
  80414c:	003ddf06 	br	8038cc <__alt_data_end+0xff8038cc>
  804150:	e009883a 	mov	r4,fp
  804154:	e0001115 	stw	zero,68(fp)
  804158:	000b883a 	mov	r5,zero
  80415c:	0805bac0 	call	805bac <_Balloc>
  804160:	d8800715 	stw	r2,28(sp)
  804164:	d8c00717 	ldw	r3,28(sp)
  804168:	00bfffc4 	movi	r2,-1
  80416c:	01000044 	movi	r4,1
  804170:	d8800c15 	stw	r2,48(sp)
  804174:	e0c01015 	stw	r3,64(fp)
  804178:	d9000b15 	stw	r4,44(sp)
  80417c:	d8800615 	stw	r2,24(sp)
  804180:	d8002215 	stw	zero,136(sp)
  804184:	003c4106 	br	80328c <__alt_data_end+0xff80328c>
  804188:	d8c00c17 	ldw	r3,48(sp)
  80418c:	d8c00615 	stw	r3,24(sp)
  804190:	003e7006 	br	803b54 <__alt_data_end+0xff803b54>
  804194:	04400044 	movi	r17,1
  804198:	003b2006 	br	802e1c <__alt_data_end+0xff802e1c>
  80419c:	000b883a 	mov	r5,zero
  8041a0:	003b3d06 	br	802e98 <__alt_data_end+0xff802e98>
  8041a4:	d8800c17 	ldw	r2,48(sp)
  8041a8:	d8800615 	stw	r2,24(sp)
  8041ac:	003e6906 	br	803b54 <__alt_data_end+0xff803b54>

008041b0 <__sflush_r>:
  8041b0:	2880030b 	ldhu	r2,12(r5)
  8041b4:	defffb04 	addi	sp,sp,-20
  8041b8:	dcc00315 	stw	r19,12(sp)
  8041bc:	dc400115 	stw	r17,4(sp)
  8041c0:	dfc00415 	stw	ra,16(sp)
  8041c4:	dc800215 	stw	r18,8(sp)
  8041c8:	dc000015 	stw	r16,0(sp)
  8041cc:	10c0020c 	andi	r3,r2,8
  8041d0:	2823883a 	mov	r17,r5
  8041d4:	2027883a 	mov	r19,r4
  8041d8:	1800311e 	bne	r3,zero,8042a0 <__sflush_r+0xf0>
  8041dc:	28c00117 	ldw	r3,4(r5)
  8041e0:	10820014 	ori	r2,r2,2048
  8041e4:	2880030d 	sth	r2,12(r5)
  8041e8:	00c04b0e 	bge	zero,r3,804318 <__sflush_r+0x168>
  8041ec:	8a000a17 	ldw	r8,40(r17)
  8041f0:	40002326 	beq	r8,zero,804280 <__sflush_r+0xd0>
  8041f4:	9c000017 	ldw	r16,0(r19)
  8041f8:	10c4000c 	andi	r3,r2,4096
  8041fc:	98000015 	stw	zero,0(r19)
  804200:	18004826 	beq	r3,zero,804324 <__sflush_r+0x174>
  804204:	89801417 	ldw	r6,80(r17)
  804208:	10c0010c 	andi	r3,r2,4
  80420c:	18000626 	beq	r3,zero,804228 <__sflush_r+0x78>
  804210:	88c00117 	ldw	r3,4(r17)
  804214:	88800c17 	ldw	r2,48(r17)
  804218:	30cdc83a 	sub	r6,r6,r3
  80421c:	10000226 	beq	r2,zero,804228 <__sflush_r+0x78>
  804220:	88800f17 	ldw	r2,60(r17)
  804224:	308dc83a 	sub	r6,r6,r2
  804228:	89400717 	ldw	r5,28(r17)
  80422c:	000f883a 	mov	r7,zero
  804230:	9809883a 	mov	r4,r19
  804234:	403ee83a 	callr	r8
  804238:	00ffffc4 	movi	r3,-1
  80423c:	10c04426 	beq	r2,r3,804350 <__sflush_r+0x1a0>
  804240:	88c0030b 	ldhu	r3,12(r17)
  804244:	89000417 	ldw	r4,16(r17)
  804248:	88000115 	stw	zero,4(r17)
  80424c:	197dffcc 	andi	r5,r3,63487
  804250:	8940030d 	sth	r5,12(r17)
  804254:	89000015 	stw	r4,0(r17)
  804258:	18c4000c 	andi	r3,r3,4096
  80425c:	18002c1e 	bne	r3,zero,804310 <__sflush_r+0x160>
  804260:	89400c17 	ldw	r5,48(r17)
  804264:	9c000015 	stw	r16,0(r19)
  804268:	28000526 	beq	r5,zero,804280 <__sflush_r+0xd0>
  80426c:	88801004 	addi	r2,r17,64
  804270:	28800226 	beq	r5,r2,80427c <__sflush_r+0xcc>
  804274:	9809883a 	mov	r4,r19
  804278:	080491c0 	call	80491c <_free_r>
  80427c:	88000c15 	stw	zero,48(r17)
  804280:	0005883a 	mov	r2,zero
  804284:	dfc00417 	ldw	ra,16(sp)
  804288:	dcc00317 	ldw	r19,12(sp)
  80428c:	dc800217 	ldw	r18,8(sp)
  804290:	dc400117 	ldw	r17,4(sp)
  804294:	dc000017 	ldw	r16,0(sp)
  804298:	dec00504 	addi	sp,sp,20
  80429c:	f800283a 	ret
  8042a0:	2c800417 	ldw	r18,16(r5)
  8042a4:	903ff626 	beq	r18,zero,804280 <__alt_data_end+0xff804280>
  8042a8:	2c000017 	ldw	r16,0(r5)
  8042ac:	108000cc 	andi	r2,r2,3
  8042b0:	2c800015 	stw	r18,0(r5)
  8042b4:	84a1c83a 	sub	r16,r16,r18
  8042b8:	1000131e 	bne	r2,zero,804308 <__sflush_r+0x158>
  8042bc:	28800517 	ldw	r2,20(r5)
  8042c0:	88800215 	stw	r2,8(r17)
  8042c4:	04000316 	blt	zero,r16,8042d4 <__sflush_r+0x124>
  8042c8:	003fed06 	br	804280 <__alt_data_end+0xff804280>
  8042cc:	90a5883a 	add	r18,r18,r2
  8042d0:	043feb0e 	bge	zero,r16,804280 <__alt_data_end+0xff804280>
  8042d4:	88800917 	ldw	r2,36(r17)
  8042d8:	89400717 	ldw	r5,28(r17)
  8042dc:	800f883a 	mov	r7,r16
  8042e0:	900d883a 	mov	r6,r18
  8042e4:	9809883a 	mov	r4,r19
  8042e8:	103ee83a 	callr	r2
  8042ec:	80a1c83a 	sub	r16,r16,r2
  8042f0:	00bff616 	blt	zero,r2,8042cc <__alt_data_end+0xff8042cc>
  8042f4:	88c0030b 	ldhu	r3,12(r17)
  8042f8:	00bfffc4 	movi	r2,-1
  8042fc:	18c01014 	ori	r3,r3,64
  804300:	88c0030d 	sth	r3,12(r17)
  804304:	003fdf06 	br	804284 <__alt_data_end+0xff804284>
  804308:	0005883a 	mov	r2,zero
  80430c:	003fec06 	br	8042c0 <__alt_data_end+0xff8042c0>
  804310:	88801415 	stw	r2,80(r17)
  804314:	003fd206 	br	804260 <__alt_data_end+0xff804260>
  804318:	28c00f17 	ldw	r3,60(r5)
  80431c:	00ffb316 	blt	zero,r3,8041ec <__alt_data_end+0xff8041ec>
  804320:	003fd706 	br	804280 <__alt_data_end+0xff804280>
  804324:	89400717 	ldw	r5,28(r17)
  804328:	000d883a 	mov	r6,zero
  80432c:	01c00044 	movi	r7,1
  804330:	9809883a 	mov	r4,r19
  804334:	403ee83a 	callr	r8
  804338:	100d883a 	mov	r6,r2
  80433c:	00bfffc4 	movi	r2,-1
  804340:	30801426 	beq	r6,r2,804394 <__sflush_r+0x1e4>
  804344:	8880030b 	ldhu	r2,12(r17)
  804348:	8a000a17 	ldw	r8,40(r17)
  80434c:	003fae06 	br	804208 <__alt_data_end+0xff804208>
  804350:	98c00017 	ldw	r3,0(r19)
  804354:	183fba26 	beq	r3,zero,804240 <__alt_data_end+0xff804240>
  804358:	01000744 	movi	r4,29
  80435c:	19000626 	beq	r3,r4,804378 <__sflush_r+0x1c8>
  804360:	01000584 	movi	r4,22
  804364:	19000426 	beq	r3,r4,804378 <__sflush_r+0x1c8>
  804368:	88c0030b 	ldhu	r3,12(r17)
  80436c:	18c01014 	ori	r3,r3,64
  804370:	88c0030d 	sth	r3,12(r17)
  804374:	003fc306 	br	804284 <__alt_data_end+0xff804284>
  804378:	8880030b 	ldhu	r2,12(r17)
  80437c:	88c00417 	ldw	r3,16(r17)
  804380:	88000115 	stw	zero,4(r17)
  804384:	10bdffcc 	andi	r2,r2,63487
  804388:	8880030d 	sth	r2,12(r17)
  80438c:	88c00015 	stw	r3,0(r17)
  804390:	003fb306 	br	804260 <__alt_data_end+0xff804260>
  804394:	98800017 	ldw	r2,0(r19)
  804398:	103fea26 	beq	r2,zero,804344 <__alt_data_end+0xff804344>
  80439c:	00c00744 	movi	r3,29
  8043a0:	10c00226 	beq	r2,r3,8043ac <__sflush_r+0x1fc>
  8043a4:	00c00584 	movi	r3,22
  8043a8:	10c0031e 	bne	r2,r3,8043b8 <__sflush_r+0x208>
  8043ac:	9c000015 	stw	r16,0(r19)
  8043b0:	0005883a 	mov	r2,zero
  8043b4:	003fb306 	br	804284 <__alt_data_end+0xff804284>
  8043b8:	88c0030b 	ldhu	r3,12(r17)
  8043bc:	3005883a 	mov	r2,r6
  8043c0:	18c01014 	ori	r3,r3,64
  8043c4:	88c0030d 	sth	r3,12(r17)
  8043c8:	003fae06 	br	804284 <__alt_data_end+0xff804284>

008043cc <_fflush_r>:
  8043cc:	defffd04 	addi	sp,sp,-12
  8043d0:	dc000115 	stw	r16,4(sp)
  8043d4:	dfc00215 	stw	ra,8(sp)
  8043d8:	2021883a 	mov	r16,r4
  8043dc:	20000226 	beq	r4,zero,8043e8 <_fflush_r+0x1c>
  8043e0:	20800e17 	ldw	r2,56(r4)
  8043e4:	10000c26 	beq	r2,zero,804418 <_fflush_r+0x4c>
  8043e8:	2880030f 	ldh	r2,12(r5)
  8043ec:	1000051e 	bne	r2,zero,804404 <_fflush_r+0x38>
  8043f0:	0005883a 	mov	r2,zero
  8043f4:	dfc00217 	ldw	ra,8(sp)
  8043f8:	dc000117 	ldw	r16,4(sp)
  8043fc:	dec00304 	addi	sp,sp,12
  804400:	f800283a 	ret
  804404:	8009883a 	mov	r4,r16
  804408:	dfc00217 	ldw	ra,8(sp)
  80440c:	dc000117 	ldw	r16,4(sp)
  804410:	dec00304 	addi	sp,sp,12
  804414:	08041b01 	jmpi	8041b0 <__sflush_r>
  804418:	d9400015 	stw	r5,0(sp)
  80441c:	08047a80 	call	8047a8 <__sinit>
  804420:	d9400017 	ldw	r5,0(sp)
  804424:	003ff006 	br	8043e8 <__alt_data_end+0xff8043e8>

00804428 <fflush>:
  804428:	20000526 	beq	r4,zero,804440 <fflush+0x18>
  80442c:	00802074 	movhi	r2,129
  804430:	1085d504 	addi	r2,r2,5972
  804434:	200b883a 	mov	r5,r4
  804438:	11000017 	ldw	r4,0(r2)
  80443c:	08043cc1 	jmpi	8043cc <_fflush_r>
  804440:	00802074 	movhi	r2,129
  804444:	1085d404 	addi	r2,r2,5968
  804448:	11000017 	ldw	r4,0(r2)
  80444c:	01402034 	movhi	r5,128
  804450:	2950f304 	addi	r5,r5,17356
  804454:	0804cf01 	jmpi	804cf0 <_fwalk_reent>

00804458 <__fp_unlock>:
  804458:	0005883a 	mov	r2,zero
  80445c:	f800283a 	ret

00804460 <_cleanup_r>:
  804460:	01402074 	movhi	r5,129
  804464:	2961b804 	addi	r5,r5,-31008
  804468:	0804cf01 	jmpi	804cf0 <_fwalk_reent>

0080446c <__sinit.part.1>:
  80446c:	defff704 	addi	sp,sp,-36
  804470:	00c02034 	movhi	r3,128
  804474:	dfc00815 	stw	ra,32(sp)
  804478:	ddc00715 	stw	r23,28(sp)
  80447c:	dd800615 	stw	r22,24(sp)
  804480:	dd400515 	stw	r21,20(sp)
  804484:	dd000415 	stw	r20,16(sp)
  804488:	dcc00315 	stw	r19,12(sp)
  80448c:	dc800215 	stw	r18,8(sp)
  804490:	dc400115 	stw	r17,4(sp)
  804494:	dc000015 	stw	r16,0(sp)
  804498:	18d11804 	addi	r3,r3,17504
  80449c:	24000117 	ldw	r16,4(r4)
  8044a0:	20c00f15 	stw	r3,60(r4)
  8044a4:	2080bb04 	addi	r2,r4,748
  8044a8:	00c000c4 	movi	r3,3
  8044ac:	20c0b915 	stw	r3,740(r4)
  8044b0:	2080ba15 	stw	r2,744(r4)
  8044b4:	2000b815 	stw	zero,736(r4)
  8044b8:	05c00204 	movi	r23,8
  8044bc:	00800104 	movi	r2,4
  8044c0:	2025883a 	mov	r18,r4
  8044c4:	b80d883a 	mov	r6,r23
  8044c8:	81001704 	addi	r4,r16,92
  8044cc:	000b883a 	mov	r5,zero
  8044d0:	80000015 	stw	zero,0(r16)
  8044d4:	80000115 	stw	zero,4(r16)
  8044d8:	80000215 	stw	zero,8(r16)
  8044dc:	8080030d 	sth	r2,12(r16)
  8044e0:	80001915 	stw	zero,100(r16)
  8044e4:	8000038d 	sth	zero,14(r16)
  8044e8:	80000415 	stw	zero,16(r16)
  8044ec:	80000515 	stw	zero,20(r16)
  8044f0:	80000615 	stw	zero,24(r16)
  8044f4:	0805a840 	call	805a84 <memset>
  8044f8:	05802034 	movhi	r22,128
  8044fc:	94400217 	ldw	r17,8(r18)
  804500:	05402034 	movhi	r21,128
  804504:	05002034 	movhi	r20,128
  804508:	04c02034 	movhi	r19,128
  80450c:	b59b1c04 	addi	r22,r22,27760
  804510:	ad5b3304 	addi	r21,r21,27852
  804514:	a51b5204 	addi	r20,r20,27976
  804518:	9cdb6904 	addi	r19,r19,28068
  80451c:	85800815 	stw	r22,32(r16)
  804520:	85400915 	stw	r21,36(r16)
  804524:	85000a15 	stw	r20,40(r16)
  804528:	84c00b15 	stw	r19,44(r16)
  80452c:	84000715 	stw	r16,28(r16)
  804530:	00800284 	movi	r2,10
  804534:	8880030d 	sth	r2,12(r17)
  804538:	00800044 	movi	r2,1
  80453c:	b80d883a 	mov	r6,r23
  804540:	89001704 	addi	r4,r17,92
  804544:	000b883a 	mov	r5,zero
  804548:	88000015 	stw	zero,0(r17)
  80454c:	88000115 	stw	zero,4(r17)
  804550:	88000215 	stw	zero,8(r17)
  804554:	88001915 	stw	zero,100(r17)
  804558:	8880038d 	sth	r2,14(r17)
  80455c:	88000415 	stw	zero,16(r17)
  804560:	88000515 	stw	zero,20(r17)
  804564:	88000615 	stw	zero,24(r17)
  804568:	0805a840 	call	805a84 <memset>
  80456c:	94000317 	ldw	r16,12(r18)
  804570:	00800484 	movi	r2,18
  804574:	8c400715 	stw	r17,28(r17)
  804578:	8d800815 	stw	r22,32(r17)
  80457c:	8d400915 	stw	r21,36(r17)
  804580:	8d000a15 	stw	r20,40(r17)
  804584:	8cc00b15 	stw	r19,44(r17)
  804588:	8080030d 	sth	r2,12(r16)
  80458c:	00800084 	movi	r2,2
  804590:	80000015 	stw	zero,0(r16)
  804594:	80000115 	stw	zero,4(r16)
  804598:	80000215 	stw	zero,8(r16)
  80459c:	80001915 	stw	zero,100(r16)
  8045a0:	8080038d 	sth	r2,14(r16)
  8045a4:	80000415 	stw	zero,16(r16)
  8045a8:	80000515 	stw	zero,20(r16)
  8045ac:	80000615 	stw	zero,24(r16)
  8045b0:	b80d883a 	mov	r6,r23
  8045b4:	000b883a 	mov	r5,zero
  8045b8:	81001704 	addi	r4,r16,92
  8045bc:	0805a840 	call	805a84 <memset>
  8045c0:	00800044 	movi	r2,1
  8045c4:	84000715 	stw	r16,28(r16)
  8045c8:	85800815 	stw	r22,32(r16)
  8045cc:	85400915 	stw	r21,36(r16)
  8045d0:	85000a15 	stw	r20,40(r16)
  8045d4:	84c00b15 	stw	r19,44(r16)
  8045d8:	90800e15 	stw	r2,56(r18)
  8045dc:	dfc00817 	ldw	ra,32(sp)
  8045e0:	ddc00717 	ldw	r23,28(sp)
  8045e4:	dd800617 	ldw	r22,24(sp)
  8045e8:	dd400517 	ldw	r21,20(sp)
  8045ec:	dd000417 	ldw	r20,16(sp)
  8045f0:	dcc00317 	ldw	r19,12(sp)
  8045f4:	dc800217 	ldw	r18,8(sp)
  8045f8:	dc400117 	ldw	r17,4(sp)
  8045fc:	dc000017 	ldw	r16,0(sp)
  804600:	dec00904 	addi	sp,sp,36
  804604:	f800283a 	ret

00804608 <__fp_lock>:
  804608:	0005883a 	mov	r2,zero
  80460c:	f800283a 	ret

00804610 <__sfmoreglue>:
  804610:	defffc04 	addi	sp,sp,-16
  804614:	dc400115 	stw	r17,4(sp)
  804618:	2c7fffc4 	addi	r17,r5,-1
  80461c:	8c401a24 	muli	r17,r17,104
  804620:	dc800215 	stw	r18,8(sp)
  804624:	2825883a 	mov	r18,r5
  804628:	89401d04 	addi	r5,r17,116
  80462c:	dc000015 	stw	r16,0(sp)
  804630:	dfc00315 	stw	ra,12(sp)
  804634:	080504c0 	call	80504c <_malloc_r>
  804638:	1021883a 	mov	r16,r2
  80463c:	10000726 	beq	r2,zero,80465c <__sfmoreglue+0x4c>
  804640:	11000304 	addi	r4,r2,12
  804644:	10000015 	stw	zero,0(r2)
  804648:	14800115 	stw	r18,4(r2)
  80464c:	11000215 	stw	r4,8(r2)
  804650:	89801a04 	addi	r6,r17,104
  804654:	000b883a 	mov	r5,zero
  804658:	0805a840 	call	805a84 <memset>
  80465c:	8005883a 	mov	r2,r16
  804660:	dfc00317 	ldw	ra,12(sp)
  804664:	dc800217 	ldw	r18,8(sp)
  804668:	dc400117 	ldw	r17,4(sp)
  80466c:	dc000017 	ldw	r16,0(sp)
  804670:	dec00404 	addi	sp,sp,16
  804674:	f800283a 	ret

00804678 <__sfp>:
  804678:	defffb04 	addi	sp,sp,-20
  80467c:	dc000015 	stw	r16,0(sp)
  804680:	04002074 	movhi	r16,129
  804684:	8405d404 	addi	r16,r16,5968
  804688:	dcc00315 	stw	r19,12(sp)
  80468c:	2027883a 	mov	r19,r4
  804690:	81000017 	ldw	r4,0(r16)
  804694:	dfc00415 	stw	ra,16(sp)
  804698:	dc800215 	stw	r18,8(sp)
  80469c:	20800e17 	ldw	r2,56(r4)
  8046a0:	dc400115 	stw	r17,4(sp)
  8046a4:	1000021e 	bne	r2,zero,8046b0 <__sfp+0x38>
  8046a8:	080446c0 	call	80446c <__sinit.part.1>
  8046ac:	81000017 	ldw	r4,0(r16)
  8046b0:	2480b804 	addi	r18,r4,736
  8046b4:	047fffc4 	movi	r17,-1
  8046b8:	91000117 	ldw	r4,4(r18)
  8046bc:	94000217 	ldw	r16,8(r18)
  8046c0:	213fffc4 	addi	r4,r4,-1
  8046c4:	20000a16 	blt	r4,zero,8046f0 <__sfp+0x78>
  8046c8:	8080030f 	ldh	r2,12(r16)
  8046cc:	10000c26 	beq	r2,zero,804700 <__sfp+0x88>
  8046d0:	80c01d04 	addi	r3,r16,116
  8046d4:	00000206 	br	8046e0 <__sfp+0x68>
  8046d8:	18bfe60f 	ldh	r2,-104(r3)
  8046dc:	10000826 	beq	r2,zero,804700 <__sfp+0x88>
  8046e0:	213fffc4 	addi	r4,r4,-1
  8046e4:	1c3ffd04 	addi	r16,r3,-12
  8046e8:	18c01a04 	addi	r3,r3,104
  8046ec:	247ffa1e 	bne	r4,r17,8046d8 <__alt_data_end+0xff8046d8>
  8046f0:	90800017 	ldw	r2,0(r18)
  8046f4:	10001d26 	beq	r2,zero,80476c <__sfp+0xf4>
  8046f8:	1025883a 	mov	r18,r2
  8046fc:	003fee06 	br	8046b8 <__alt_data_end+0xff8046b8>
  804700:	00bfffc4 	movi	r2,-1
  804704:	8080038d 	sth	r2,14(r16)
  804708:	00800044 	movi	r2,1
  80470c:	8080030d 	sth	r2,12(r16)
  804710:	80001915 	stw	zero,100(r16)
  804714:	80000015 	stw	zero,0(r16)
  804718:	80000215 	stw	zero,8(r16)
  80471c:	80000115 	stw	zero,4(r16)
  804720:	80000415 	stw	zero,16(r16)
  804724:	80000515 	stw	zero,20(r16)
  804728:	80000615 	stw	zero,24(r16)
  80472c:	01800204 	movi	r6,8
  804730:	000b883a 	mov	r5,zero
  804734:	81001704 	addi	r4,r16,92
  804738:	0805a840 	call	805a84 <memset>
  80473c:	8005883a 	mov	r2,r16
  804740:	80000c15 	stw	zero,48(r16)
  804744:	80000d15 	stw	zero,52(r16)
  804748:	80001115 	stw	zero,68(r16)
  80474c:	80001215 	stw	zero,72(r16)
  804750:	dfc00417 	ldw	ra,16(sp)
  804754:	dcc00317 	ldw	r19,12(sp)
  804758:	dc800217 	ldw	r18,8(sp)
  80475c:	dc400117 	ldw	r17,4(sp)
  804760:	dc000017 	ldw	r16,0(sp)
  804764:	dec00504 	addi	sp,sp,20
  804768:	f800283a 	ret
  80476c:	01400104 	movi	r5,4
  804770:	9809883a 	mov	r4,r19
  804774:	08046100 	call	804610 <__sfmoreglue>
  804778:	90800015 	stw	r2,0(r18)
  80477c:	103fde1e 	bne	r2,zero,8046f8 <__alt_data_end+0xff8046f8>
  804780:	00800304 	movi	r2,12
  804784:	98800015 	stw	r2,0(r19)
  804788:	0005883a 	mov	r2,zero
  80478c:	003ff006 	br	804750 <__alt_data_end+0xff804750>

00804790 <_cleanup>:
  804790:	00802074 	movhi	r2,129
  804794:	1085d404 	addi	r2,r2,5968
  804798:	11000017 	ldw	r4,0(r2)
  80479c:	01402074 	movhi	r5,129
  8047a0:	2961b804 	addi	r5,r5,-31008
  8047a4:	0804cf01 	jmpi	804cf0 <_fwalk_reent>

008047a8 <__sinit>:
  8047a8:	20800e17 	ldw	r2,56(r4)
  8047ac:	10000126 	beq	r2,zero,8047b4 <__sinit+0xc>
  8047b0:	f800283a 	ret
  8047b4:	080446c1 	jmpi	80446c <__sinit.part.1>

008047b8 <__sfp_lock_acquire>:
  8047b8:	f800283a 	ret

008047bc <__sfp_lock_release>:
  8047bc:	f800283a 	ret

008047c0 <__sinit_lock_acquire>:
  8047c0:	f800283a 	ret

008047c4 <__sinit_lock_release>:
  8047c4:	f800283a 	ret

008047c8 <__fp_lock_all>:
  8047c8:	00802074 	movhi	r2,129
  8047cc:	1085d504 	addi	r2,r2,5972
  8047d0:	11000017 	ldw	r4,0(r2)
  8047d4:	01402034 	movhi	r5,128
  8047d8:	29518204 	addi	r5,r5,17928
  8047dc:	0804c2c1 	jmpi	804c2c <_fwalk>

008047e0 <__fp_unlock_all>:
  8047e0:	00802074 	movhi	r2,129
  8047e4:	1085d504 	addi	r2,r2,5972
  8047e8:	11000017 	ldw	r4,0(r2)
  8047ec:	01402034 	movhi	r5,128
  8047f0:	29511604 	addi	r5,r5,17496
  8047f4:	0804c2c1 	jmpi	804c2c <_fwalk>

008047f8 <_malloc_trim_r>:
  8047f8:	defffb04 	addi	sp,sp,-20
  8047fc:	dcc00315 	stw	r19,12(sp)
  804800:	04c02074 	movhi	r19,129
  804804:	dc800215 	stw	r18,8(sp)
  804808:	dc400115 	stw	r17,4(sp)
  80480c:	dc000015 	stw	r16,0(sp)
  804810:	dfc00415 	stw	ra,16(sp)
  804814:	2821883a 	mov	r16,r5
  804818:	9cc3cb04 	addi	r19,r19,3884
  80481c:	2025883a 	mov	r18,r4
  804820:	080d3e00 	call	80d3e0 <__malloc_lock>
  804824:	98800217 	ldw	r2,8(r19)
  804828:	14400117 	ldw	r17,4(r2)
  80482c:	00bfff04 	movi	r2,-4
  804830:	88a2703a 	and	r17,r17,r2
  804834:	8c21c83a 	sub	r16,r17,r16
  804838:	8403fbc4 	addi	r16,r16,4079
  80483c:	8020d33a 	srli	r16,r16,12
  804840:	0083ffc4 	movi	r2,4095
  804844:	843fffc4 	addi	r16,r16,-1
  804848:	8020933a 	slli	r16,r16,12
  80484c:	1400060e 	bge	r2,r16,804868 <_malloc_trim_r+0x70>
  804850:	000b883a 	mov	r5,zero
  804854:	9009883a 	mov	r4,r18
  804858:	0806c1c0 	call	806c1c <_sbrk_r>
  80485c:	98c00217 	ldw	r3,8(r19)
  804860:	1c47883a 	add	r3,r3,r17
  804864:	10c00a26 	beq	r2,r3,804890 <_malloc_trim_r+0x98>
  804868:	9009883a 	mov	r4,r18
  80486c:	080d4040 	call	80d404 <__malloc_unlock>
  804870:	0005883a 	mov	r2,zero
  804874:	dfc00417 	ldw	ra,16(sp)
  804878:	dcc00317 	ldw	r19,12(sp)
  80487c:	dc800217 	ldw	r18,8(sp)
  804880:	dc400117 	ldw	r17,4(sp)
  804884:	dc000017 	ldw	r16,0(sp)
  804888:	dec00504 	addi	sp,sp,20
  80488c:	f800283a 	ret
  804890:	040bc83a 	sub	r5,zero,r16
  804894:	9009883a 	mov	r4,r18
  804898:	0806c1c0 	call	806c1c <_sbrk_r>
  80489c:	00ffffc4 	movi	r3,-1
  8048a0:	10c00d26 	beq	r2,r3,8048d8 <_malloc_trim_r+0xe0>
  8048a4:	00c02074 	movhi	r3,129
  8048a8:	18c93804 	addi	r3,r3,9440
  8048ac:	18800017 	ldw	r2,0(r3)
  8048b0:	99000217 	ldw	r4,8(r19)
  8048b4:	8c23c83a 	sub	r17,r17,r16
  8048b8:	8c400054 	ori	r17,r17,1
  8048bc:	1421c83a 	sub	r16,r2,r16
  8048c0:	24400115 	stw	r17,4(r4)
  8048c4:	9009883a 	mov	r4,r18
  8048c8:	1c000015 	stw	r16,0(r3)
  8048cc:	080d4040 	call	80d404 <__malloc_unlock>
  8048d0:	00800044 	movi	r2,1
  8048d4:	003fe706 	br	804874 <__alt_data_end+0xff804874>
  8048d8:	000b883a 	mov	r5,zero
  8048dc:	9009883a 	mov	r4,r18
  8048e0:	0806c1c0 	call	806c1c <_sbrk_r>
  8048e4:	99000217 	ldw	r4,8(r19)
  8048e8:	014003c4 	movi	r5,15
  8048ec:	1107c83a 	sub	r3,r2,r4
  8048f0:	28ffdd0e 	bge	r5,r3,804868 <__alt_data_end+0xff804868>
  8048f4:	01402074 	movhi	r5,129
  8048f8:	2945d704 	addi	r5,r5,5980
  8048fc:	29400017 	ldw	r5,0(r5)
  804900:	18c00054 	ori	r3,r3,1
  804904:	20c00115 	stw	r3,4(r4)
  804908:	00c02074 	movhi	r3,129
  80490c:	1145c83a 	sub	r2,r2,r5
  804910:	18c93804 	addi	r3,r3,9440
  804914:	18800015 	stw	r2,0(r3)
  804918:	003fd306 	br	804868 <__alt_data_end+0xff804868>

0080491c <_free_r>:
  80491c:	28004126 	beq	r5,zero,804a24 <_free_r+0x108>
  804920:	defffd04 	addi	sp,sp,-12
  804924:	dc400115 	stw	r17,4(sp)
  804928:	dc000015 	stw	r16,0(sp)
  80492c:	2023883a 	mov	r17,r4
  804930:	2821883a 	mov	r16,r5
  804934:	dfc00215 	stw	ra,8(sp)
  804938:	080d3e00 	call	80d3e0 <__malloc_lock>
  80493c:	81ffff17 	ldw	r7,-4(r16)
  804940:	00bfff84 	movi	r2,-2
  804944:	01002074 	movhi	r4,129
  804948:	81bffe04 	addi	r6,r16,-8
  80494c:	3884703a 	and	r2,r7,r2
  804950:	2103cb04 	addi	r4,r4,3884
  804954:	308b883a 	add	r5,r6,r2
  804958:	2a400117 	ldw	r9,4(r5)
  80495c:	22000217 	ldw	r8,8(r4)
  804960:	00ffff04 	movi	r3,-4
  804964:	48c6703a 	and	r3,r9,r3
  804968:	2a005726 	beq	r5,r8,804ac8 <_free_r+0x1ac>
  80496c:	28c00115 	stw	r3,4(r5)
  804970:	39c0004c 	andi	r7,r7,1
  804974:	3800091e 	bne	r7,zero,80499c <_free_r+0x80>
  804978:	823ffe17 	ldw	r8,-8(r16)
  80497c:	22400204 	addi	r9,r4,8
  804980:	320dc83a 	sub	r6,r6,r8
  804984:	31c00217 	ldw	r7,8(r6)
  804988:	1205883a 	add	r2,r2,r8
  80498c:	3a406526 	beq	r7,r9,804b24 <_free_r+0x208>
  804990:	32000317 	ldw	r8,12(r6)
  804994:	3a000315 	stw	r8,12(r7)
  804998:	41c00215 	stw	r7,8(r8)
  80499c:	28cf883a 	add	r7,r5,r3
  8049a0:	39c00117 	ldw	r7,4(r7)
  8049a4:	39c0004c 	andi	r7,r7,1
  8049a8:	38003a26 	beq	r7,zero,804a94 <_free_r+0x178>
  8049ac:	10c00054 	ori	r3,r2,1
  8049b0:	30c00115 	stw	r3,4(r6)
  8049b4:	3087883a 	add	r3,r6,r2
  8049b8:	18800015 	stw	r2,0(r3)
  8049bc:	00c07fc4 	movi	r3,511
  8049c0:	18801936 	bltu	r3,r2,804a28 <_free_r+0x10c>
  8049c4:	1004d0fa 	srli	r2,r2,3
  8049c8:	01c00044 	movi	r7,1
  8049cc:	21400117 	ldw	r5,4(r4)
  8049d0:	10c00044 	addi	r3,r2,1
  8049d4:	18c7883a 	add	r3,r3,r3
  8049d8:	1005d0ba 	srai	r2,r2,2
  8049dc:	18c7883a 	add	r3,r3,r3
  8049e0:	18c7883a 	add	r3,r3,r3
  8049e4:	1907883a 	add	r3,r3,r4
  8049e8:	3884983a 	sll	r2,r7,r2
  8049ec:	19c00017 	ldw	r7,0(r3)
  8049f0:	1a3ffe04 	addi	r8,r3,-8
  8049f4:	1144b03a 	or	r2,r2,r5
  8049f8:	32000315 	stw	r8,12(r6)
  8049fc:	31c00215 	stw	r7,8(r6)
  804a00:	20800115 	stw	r2,4(r4)
  804a04:	19800015 	stw	r6,0(r3)
  804a08:	39800315 	stw	r6,12(r7)
  804a0c:	8809883a 	mov	r4,r17
  804a10:	dfc00217 	ldw	ra,8(sp)
  804a14:	dc400117 	ldw	r17,4(sp)
  804a18:	dc000017 	ldw	r16,0(sp)
  804a1c:	dec00304 	addi	sp,sp,12
  804a20:	080d4041 	jmpi	80d404 <__malloc_unlock>
  804a24:	f800283a 	ret
  804a28:	100ad27a 	srli	r5,r2,9
  804a2c:	00c00104 	movi	r3,4
  804a30:	19404a36 	bltu	r3,r5,804b5c <_free_r+0x240>
  804a34:	100ad1ba 	srli	r5,r2,6
  804a38:	28c00e44 	addi	r3,r5,57
  804a3c:	18c7883a 	add	r3,r3,r3
  804a40:	29400e04 	addi	r5,r5,56
  804a44:	18c7883a 	add	r3,r3,r3
  804a48:	18c7883a 	add	r3,r3,r3
  804a4c:	1909883a 	add	r4,r3,r4
  804a50:	20c00017 	ldw	r3,0(r4)
  804a54:	01c02074 	movhi	r7,129
  804a58:	213ffe04 	addi	r4,r4,-8
  804a5c:	39c3cb04 	addi	r7,r7,3884
  804a60:	20c04426 	beq	r4,r3,804b74 <_free_r+0x258>
  804a64:	01ffff04 	movi	r7,-4
  804a68:	19400117 	ldw	r5,4(r3)
  804a6c:	29ca703a 	and	r5,r5,r7
  804a70:	1140022e 	bgeu	r2,r5,804a7c <_free_r+0x160>
  804a74:	18c00217 	ldw	r3,8(r3)
  804a78:	20fffb1e 	bne	r4,r3,804a68 <__alt_data_end+0xff804a68>
  804a7c:	19000317 	ldw	r4,12(r3)
  804a80:	31000315 	stw	r4,12(r6)
  804a84:	30c00215 	stw	r3,8(r6)
  804a88:	21800215 	stw	r6,8(r4)
  804a8c:	19800315 	stw	r6,12(r3)
  804a90:	003fde06 	br	804a0c <__alt_data_end+0xff804a0c>
  804a94:	29c00217 	ldw	r7,8(r5)
  804a98:	10c5883a 	add	r2,r2,r3
  804a9c:	00c02074 	movhi	r3,129
  804aa0:	18c3cd04 	addi	r3,r3,3892
  804aa4:	38c03b26 	beq	r7,r3,804b94 <_free_r+0x278>
  804aa8:	2a000317 	ldw	r8,12(r5)
  804aac:	11400054 	ori	r5,r2,1
  804ab0:	3087883a 	add	r3,r6,r2
  804ab4:	3a000315 	stw	r8,12(r7)
  804ab8:	41c00215 	stw	r7,8(r8)
  804abc:	31400115 	stw	r5,4(r6)
  804ac0:	18800015 	stw	r2,0(r3)
  804ac4:	003fbd06 	br	8049bc <__alt_data_end+0xff8049bc>
  804ac8:	39c0004c 	andi	r7,r7,1
  804acc:	10c5883a 	add	r2,r2,r3
  804ad0:	3800071e 	bne	r7,zero,804af0 <_free_r+0x1d4>
  804ad4:	81fffe17 	ldw	r7,-8(r16)
  804ad8:	31cdc83a 	sub	r6,r6,r7
  804adc:	30c00317 	ldw	r3,12(r6)
  804ae0:	31400217 	ldw	r5,8(r6)
  804ae4:	11c5883a 	add	r2,r2,r7
  804ae8:	28c00315 	stw	r3,12(r5)
  804aec:	19400215 	stw	r5,8(r3)
  804af0:	10c00054 	ori	r3,r2,1
  804af4:	30c00115 	stw	r3,4(r6)
  804af8:	00c02074 	movhi	r3,129
  804afc:	18c5d804 	addi	r3,r3,5984
  804b00:	18c00017 	ldw	r3,0(r3)
  804b04:	21800215 	stw	r6,8(r4)
  804b08:	10ffc036 	bltu	r2,r3,804a0c <__alt_data_end+0xff804a0c>
  804b0c:	00802074 	movhi	r2,129
  804b10:	10892f04 	addi	r2,r2,9404
  804b14:	11400017 	ldw	r5,0(r2)
  804b18:	8809883a 	mov	r4,r17
  804b1c:	08047f80 	call	8047f8 <_malloc_trim_r>
  804b20:	003fba06 	br	804a0c <__alt_data_end+0xff804a0c>
  804b24:	28c9883a 	add	r4,r5,r3
  804b28:	21000117 	ldw	r4,4(r4)
  804b2c:	2100004c 	andi	r4,r4,1
  804b30:	2000391e 	bne	r4,zero,804c18 <_free_r+0x2fc>
  804b34:	29c00217 	ldw	r7,8(r5)
  804b38:	29000317 	ldw	r4,12(r5)
  804b3c:	1885883a 	add	r2,r3,r2
  804b40:	10c00054 	ori	r3,r2,1
  804b44:	39000315 	stw	r4,12(r7)
  804b48:	21c00215 	stw	r7,8(r4)
  804b4c:	30c00115 	stw	r3,4(r6)
  804b50:	308d883a 	add	r6,r6,r2
  804b54:	30800015 	stw	r2,0(r6)
  804b58:	003fac06 	br	804a0c <__alt_data_end+0xff804a0c>
  804b5c:	00c00504 	movi	r3,20
  804b60:	19401536 	bltu	r3,r5,804bb8 <_free_r+0x29c>
  804b64:	28c01704 	addi	r3,r5,92
  804b68:	18c7883a 	add	r3,r3,r3
  804b6c:	294016c4 	addi	r5,r5,91
  804b70:	003fb406 	br	804a44 <__alt_data_end+0xff804a44>
  804b74:	280bd0ba 	srai	r5,r5,2
  804b78:	00c00044 	movi	r3,1
  804b7c:	38800117 	ldw	r2,4(r7)
  804b80:	194a983a 	sll	r5,r3,r5
  804b84:	2007883a 	mov	r3,r4
  804b88:	2884b03a 	or	r2,r5,r2
  804b8c:	38800115 	stw	r2,4(r7)
  804b90:	003fbb06 	br	804a80 <__alt_data_end+0xff804a80>
  804b94:	21800515 	stw	r6,20(r4)
  804b98:	21800415 	stw	r6,16(r4)
  804b9c:	10c00054 	ori	r3,r2,1
  804ba0:	31c00315 	stw	r7,12(r6)
  804ba4:	31c00215 	stw	r7,8(r6)
  804ba8:	30c00115 	stw	r3,4(r6)
  804bac:	308d883a 	add	r6,r6,r2
  804bb0:	30800015 	stw	r2,0(r6)
  804bb4:	003f9506 	br	804a0c <__alt_data_end+0xff804a0c>
  804bb8:	00c01504 	movi	r3,84
  804bbc:	19400536 	bltu	r3,r5,804bd4 <_free_r+0x2b8>
  804bc0:	100ad33a 	srli	r5,r2,12
  804bc4:	28c01bc4 	addi	r3,r5,111
  804bc8:	18c7883a 	add	r3,r3,r3
  804bcc:	29401b84 	addi	r5,r5,110
  804bd0:	003f9c06 	br	804a44 <__alt_data_end+0xff804a44>
  804bd4:	00c05504 	movi	r3,340
  804bd8:	19400536 	bltu	r3,r5,804bf0 <_free_r+0x2d4>
  804bdc:	100ad3fa 	srli	r5,r2,15
  804be0:	28c01e04 	addi	r3,r5,120
  804be4:	18c7883a 	add	r3,r3,r3
  804be8:	29401dc4 	addi	r5,r5,119
  804bec:	003f9506 	br	804a44 <__alt_data_end+0xff804a44>
  804bf0:	00c15504 	movi	r3,1364
  804bf4:	19400536 	bltu	r3,r5,804c0c <_free_r+0x2f0>
  804bf8:	100ad4ba 	srli	r5,r2,18
  804bfc:	28c01f44 	addi	r3,r5,125
  804c00:	18c7883a 	add	r3,r3,r3
  804c04:	29401f04 	addi	r5,r5,124
  804c08:	003f8e06 	br	804a44 <__alt_data_end+0xff804a44>
  804c0c:	00c03f84 	movi	r3,254
  804c10:	01401f84 	movi	r5,126
  804c14:	003f8b06 	br	804a44 <__alt_data_end+0xff804a44>
  804c18:	10c00054 	ori	r3,r2,1
  804c1c:	30c00115 	stw	r3,4(r6)
  804c20:	308d883a 	add	r6,r6,r2
  804c24:	30800015 	stw	r2,0(r6)
  804c28:	003f7806 	br	804a0c <__alt_data_end+0xff804a0c>

00804c2c <_fwalk>:
  804c2c:	defff704 	addi	sp,sp,-36
  804c30:	dd000415 	stw	r20,16(sp)
  804c34:	dfc00815 	stw	ra,32(sp)
  804c38:	ddc00715 	stw	r23,28(sp)
  804c3c:	dd800615 	stw	r22,24(sp)
  804c40:	dd400515 	stw	r21,20(sp)
  804c44:	dcc00315 	stw	r19,12(sp)
  804c48:	dc800215 	stw	r18,8(sp)
  804c4c:	dc400115 	stw	r17,4(sp)
  804c50:	dc000015 	stw	r16,0(sp)
  804c54:	2500b804 	addi	r20,r4,736
  804c58:	a0002326 	beq	r20,zero,804ce8 <_fwalk+0xbc>
  804c5c:	282b883a 	mov	r21,r5
  804c60:	002f883a 	mov	r23,zero
  804c64:	05800044 	movi	r22,1
  804c68:	04ffffc4 	movi	r19,-1
  804c6c:	a4400117 	ldw	r17,4(r20)
  804c70:	a4800217 	ldw	r18,8(r20)
  804c74:	8c7fffc4 	addi	r17,r17,-1
  804c78:	88000d16 	blt	r17,zero,804cb0 <_fwalk+0x84>
  804c7c:	94000304 	addi	r16,r18,12
  804c80:	94800384 	addi	r18,r18,14
  804c84:	8080000b 	ldhu	r2,0(r16)
  804c88:	8c7fffc4 	addi	r17,r17,-1
  804c8c:	813ffd04 	addi	r4,r16,-12
  804c90:	b080042e 	bgeu	r22,r2,804ca4 <_fwalk+0x78>
  804c94:	9080000f 	ldh	r2,0(r18)
  804c98:	14c00226 	beq	r2,r19,804ca4 <_fwalk+0x78>
  804c9c:	a83ee83a 	callr	r21
  804ca0:	b8aeb03a 	or	r23,r23,r2
  804ca4:	84001a04 	addi	r16,r16,104
  804ca8:	94801a04 	addi	r18,r18,104
  804cac:	8cfff51e 	bne	r17,r19,804c84 <__alt_data_end+0xff804c84>
  804cb0:	a5000017 	ldw	r20,0(r20)
  804cb4:	a03fed1e 	bne	r20,zero,804c6c <__alt_data_end+0xff804c6c>
  804cb8:	b805883a 	mov	r2,r23
  804cbc:	dfc00817 	ldw	ra,32(sp)
  804cc0:	ddc00717 	ldw	r23,28(sp)
  804cc4:	dd800617 	ldw	r22,24(sp)
  804cc8:	dd400517 	ldw	r21,20(sp)
  804ccc:	dd000417 	ldw	r20,16(sp)
  804cd0:	dcc00317 	ldw	r19,12(sp)
  804cd4:	dc800217 	ldw	r18,8(sp)
  804cd8:	dc400117 	ldw	r17,4(sp)
  804cdc:	dc000017 	ldw	r16,0(sp)
  804ce0:	dec00904 	addi	sp,sp,36
  804ce4:	f800283a 	ret
  804ce8:	002f883a 	mov	r23,zero
  804cec:	003ff206 	br	804cb8 <__alt_data_end+0xff804cb8>

00804cf0 <_fwalk_reent>:
  804cf0:	defff704 	addi	sp,sp,-36
  804cf4:	dd000415 	stw	r20,16(sp)
  804cf8:	dfc00815 	stw	ra,32(sp)
  804cfc:	ddc00715 	stw	r23,28(sp)
  804d00:	dd800615 	stw	r22,24(sp)
  804d04:	dd400515 	stw	r21,20(sp)
  804d08:	dcc00315 	stw	r19,12(sp)
  804d0c:	dc800215 	stw	r18,8(sp)
  804d10:	dc400115 	stw	r17,4(sp)
  804d14:	dc000015 	stw	r16,0(sp)
  804d18:	2500b804 	addi	r20,r4,736
  804d1c:	a0002326 	beq	r20,zero,804dac <_fwalk_reent+0xbc>
  804d20:	282b883a 	mov	r21,r5
  804d24:	2027883a 	mov	r19,r4
  804d28:	002f883a 	mov	r23,zero
  804d2c:	05800044 	movi	r22,1
  804d30:	04bfffc4 	movi	r18,-1
  804d34:	a4400117 	ldw	r17,4(r20)
  804d38:	a4000217 	ldw	r16,8(r20)
  804d3c:	8c7fffc4 	addi	r17,r17,-1
  804d40:	88000c16 	blt	r17,zero,804d74 <_fwalk_reent+0x84>
  804d44:	84000304 	addi	r16,r16,12
  804d48:	8080000b 	ldhu	r2,0(r16)
  804d4c:	8c7fffc4 	addi	r17,r17,-1
  804d50:	817ffd04 	addi	r5,r16,-12
  804d54:	b080052e 	bgeu	r22,r2,804d6c <_fwalk_reent+0x7c>
  804d58:	8080008f 	ldh	r2,2(r16)
  804d5c:	9809883a 	mov	r4,r19
  804d60:	14800226 	beq	r2,r18,804d6c <_fwalk_reent+0x7c>
  804d64:	a83ee83a 	callr	r21
  804d68:	b8aeb03a 	or	r23,r23,r2
  804d6c:	84001a04 	addi	r16,r16,104
  804d70:	8cbff51e 	bne	r17,r18,804d48 <__alt_data_end+0xff804d48>
  804d74:	a5000017 	ldw	r20,0(r20)
  804d78:	a03fee1e 	bne	r20,zero,804d34 <__alt_data_end+0xff804d34>
  804d7c:	b805883a 	mov	r2,r23
  804d80:	dfc00817 	ldw	ra,32(sp)
  804d84:	ddc00717 	ldw	r23,28(sp)
  804d88:	dd800617 	ldw	r22,24(sp)
  804d8c:	dd400517 	ldw	r21,20(sp)
  804d90:	dd000417 	ldw	r20,16(sp)
  804d94:	dcc00317 	ldw	r19,12(sp)
  804d98:	dc800217 	ldw	r18,8(sp)
  804d9c:	dc400117 	ldw	r17,4(sp)
  804da0:	dc000017 	ldw	r16,0(sp)
  804da4:	dec00904 	addi	sp,sp,36
  804da8:	f800283a 	ret
  804dac:	002f883a 	mov	r23,zero
  804db0:	003ff206 	br	804d7c <__alt_data_end+0xff804d7c>

00804db4 <_setlocale_r>:
  804db4:	30001b26 	beq	r6,zero,804e24 <_setlocale_r+0x70>
  804db8:	01402074 	movhi	r5,129
  804dbc:	defffe04 	addi	sp,sp,-8
  804dc0:	29415204 	addi	r5,r5,1352
  804dc4:	3009883a 	mov	r4,r6
  804dc8:	dc000015 	stw	r16,0(sp)
  804dcc:	dfc00115 	stw	ra,4(sp)
  804dd0:	3021883a 	mov	r16,r6
  804dd4:	0806dac0 	call	806dac <strcmp>
  804dd8:	1000061e 	bne	r2,zero,804df4 <_setlocale_r+0x40>
  804ddc:	00802074 	movhi	r2,129
  804de0:	10815104 	addi	r2,r2,1348
  804de4:	dfc00117 	ldw	ra,4(sp)
  804de8:	dc000017 	ldw	r16,0(sp)
  804dec:	dec00204 	addi	sp,sp,8
  804df0:	f800283a 	ret
  804df4:	01402074 	movhi	r5,129
  804df8:	29415104 	addi	r5,r5,1348
  804dfc:	8009883a 	mov	r4,r16
  804e00:	0806dac0 	call	806dac <strcmp>
  804e04:	103ff526 	beq	r2,zero,804ddc <__alt_data_end+0xff804ddc>
  804e08:	01402074 	movhi	r5,129
  804e0c:	29413c04 	addi	r5,r5,1264
  804e10:	8009883a 	mov	r4,r16
  804e14:	0806dac0 	call	806dac <strcmp>
  804e18:	103ff026 	beq	r2,zero,804ddc <__alt_data_end+0xff804ddc>
  804e1c:	0005883a 	mov	r2,zero
  804e20:	003ff006 	br	804de4 <__alt_data_end+0xff804de4>
  804e24:	00802074 	movhi	r2,129
  804e28:	10815104 	addi	r2,r2,1348
  804e2c:	f800283a 	ret

00804e30 <__locale_charset>:
  804e30:	00802074 	movhi	r2,129
  804e34:	1083b504 	addi	r2,r2,3796
  804e38:	f800283a 	ret

00804e3c <__locale_mb_cur_max>:
  804e3c:	00802074 	movhi	r2,129
  804e40:	1085d604 	addi	r2,r2,5976
  804e44:	10800017 	ldw	r2,0(r2)
  804e48:	f800283a 	ret

00804e4c <__locale_msgcharset>:
  804e4c:	00802074 	movhi	r2,129
  804e50:	1083ad04 	addi	r2,r2,3764
  804e54:	f800283a 	ret

00804e58 <__locale_cjk_lang>:
  804e58:	0005883a 	mov	r2,zero
  804e5c:	f800283a 	ret

00804e60 <_localeconv_r>:
  804e60:	00802074 	movhi	r2,129
  804e64:	1083bd04 	addi	r2,r2,3828
  804e68:	f800283a 	ret

00804e6c <setlocale>:
  804e6c:	00802074 	movhi	r2,129
  804e70:	1085d504 	addi	r2,r2,5972
  804e74:	280d883a 	mov	r6,r5
  804e78:	200b883a 	mov	r5,r4
  804e7c:	11000017 	ldw	r4,0(r2)
  804e80:	0804db41 	jmpi	804db4 <_setlocale_r>

00804e84 <localeconv>:
  804e84:	00802074 	movhi	r2,129
  804e88:	1083bd04 	addi	r2,r2,3828
  804e8c:	f800283a 	ret

00804e90 <__smakebuf_r>:
  804e90:	2880030b 	ldhu	r2,12(r5)
  804e94:	10c0008c 	andi	r3,r2,2
  804e98:	1800411e 	bne	r3,zero,804fa0 <__smakebuf_r+0x110>
  804e9c:	deffec04 	addi	sp,sp,-80
  804ea0:	dc000f15 	stw	r16,60(sp)
  804ea4:	2821883a 	mov	r16,r5
  804ea8:	2940038f 	ldh	r5,14(r5)
  804eac:	dc401015 	stw	r17,64(sp)
  804eb0:	dfc01315 	stw	ra,76(sp)
  804eb4:	dcc01215 	stw	r19,72(sp)
  804eb8:	dc801115 	stw	r18,68(sp)
  804ebc:	2023883a 	mov	r17,r4
  804ec0:	28001c16 	blt	r5,zero,804f34 <__smakebuf_r+0xa4>
  804ec4:	d80d883a 	mov	r6,sp
  804ec8:	08089ec0 	call	8089ec <_fstat_r>
  804ecc:	10001816 	blt	r2,zero,804f30 <__smakebuf_r+0xa0>
  804ed0:	d8800117 	ldw	r2,4(sp)
  804ed4:	00e00014 	movui	r3,32768
  804ed8:	10bc000c 	andi	r2,r2,61440
  804edc:	14c80020 	cmpeqi	r19,r2,8192
  804ee0:	10c03726 	beq	r2,r3,804fc0 <__smakebuf_r+0x130>
  804ee4:	80c0030b 	ldhu	r3,12(r16)
  804ee8:	18c20014 	ori	r3,r3,2048
  804eec:	80c0030d 	sth	r3,12(r16)
  804ef0:	00c80004 	movi	r3,8192
  804ef4:	10c0521e 	bne	r2,r3,805040 <__smakebuf_r+0x1b0>
  804ef8:	8140038f 	ldh	r5,14(r16)
  804efc:	8809883a 	mov	r4,r17
  804f00:	0808f040 	call	808f04 <_isatty_r>
  804f04:	10004c26 	beq	r2,zero,805038 <__smakebuf_r+0x1a8>
  804f08:	8080030b 	ldhu	r2,12(r16)
  804f0c:	80c010c4 	addi	r3,r16,67
  804f10:	80c00015 	stw	r3,0(r16)
  804f14:	10800054 	ori	r2,r2,1
  804f18:	8080030d 	sth	r2,12(r16)
  804f1c:	00800044 	movi	r2,1
  804f20:	80c00415 	stw	r3,16(r16)
  804f24:	80800515 	stw	r2,20(r16)
  804f28:	04810004 	movi	r18,1024
  804f2c:	00000706 	br	804f4c <__smakebuf_r+0xbc>
  804f30:	8080030b 	ldhu	r2,12(r16)
  804f34:	10c0200c 	andi	r3,r2,128
  804f38:	18001f1e 	bne	r3,zero,804fb8 <__smakebuf_r+0x128>
  804f3c:	04810004 	movi	r18,1024
  804f40:	10820014 	ori	r2,r2,2048
  804f44:	8080030d 	sth	r2,12(r16)
  804f48:	0027883a 	mov	r19,zero
  804f4c:	900b883a 	mov	r5,r18
  804f50:	8809883a 	mov	r4,r17
  804f54:	080504c0 	call	80504c <_malloc_r>
  804f58:	10002c26 	beq	r2,zero,80500c <__smakebuf_r+0x17c>
  804f5c:	80c0030b 	ldhu	r3,12(r16)
  804f60:	01002034 	movhi	r4,128
  804f64:	21111804 	addi	r4,r4,17504
  804f68:	89000f15 	stw	r4,60(r17)
  804f6c:	18c02014 	ori	r3,r3,128
  804f70:	80c0030d 	sth	r3,12(r16)
  804f74:	80800015 	stw	r2,0(r16)
  804f78:	80800415 	stw	r2,16(r16)
  804f7c:	84800515 	stw	r18,20(r16)
  804f80:	98001a1e 	bne	r19,zero,804fec <__smakebuf_r+0x15c>
  804f84:	dfc01317 	ldw	ra,76(sp)
  804f88:	dcc01217 	ldw	r19,72(sp)
  804f8c:	dc801117 	ldw	r18,68(sp)
  804f90:	dc401017 	ldw	r17,64(sp)
  804f94:	dc000f17 	ldw	r16,60(sp)
  804f98:	dec01404 	addi	sp,sp,80
  804f9c:	f800283a 	ret
  804fa0:	288010c4 	addi	r2,r5,67
  804fa4:	28800015 	stw	r2,0(r5)
  804fa8:	28800415 	stw	r2,16(r5)
  804fac:	00800044 	movi	r2,1
  804fb0:	28800515 	stw	r2,20(r5)
  804fb4:	f800283a 	ret
  804fb8:	04801004 	movi	r18,64
  804fbc:	003fe006 	br	804f40 <__alt_data_end+0xff804f40>
  804fc0:	81000a17 	ldw	r4,40(r16)
  804fc4:	00c02034 	movhi	r3,128
  804fc8:	18db5204 	addi	r3,r3,27976
  804fcc:	20ffc51e 	bne	r4,r3,804ee4 <__alt_data_end+0xff804ee4>
  804fd0:	8080030b 	ldhu	r2,12(r16)
  804fd4:	04810004 	movi	r18,1024
  804fd8:	84801315 	stw	r18,76(r16)
  804fdc:	1484b03a 	or	r2,r2,r18
  804fe0:	8080030d 	sth	r2,12(r16)
  804fe4:	0027883a 	mov	r19,zero
  804fe8:	003fd806 	br	804f4c <__alt_data_end+0xff804f4c>
  804fec:	8140038f 	ldh	r5,14(r16)
  804ff0:	8809883a 	mov	r4,r17
  804ff4:	0808f040 	call	808f04 <_isatty_r>
  804ff8:	103fe226 	beq	r2,zero,804f84 <__alt_data_end+0xff804f84>
  804ffc:	8080030b 	ldhu	r2,12(r16)
  805000:	10800054 	ori	r2,r2,1
  805004:	8080030d 	sth	r2,12(r16)
  805008:	003fde06 	br	804f84 <__alt_data_end+0xff804f84>
  80500c:	8080030b 	ldhu	r2,12(r16)
  805010:	10c0800c 	andi	r3,r2,512
  805014:	183fdb1e 	bne	r3,zero,804f84 <__alt_data_end+0xff804f84>
  805018:	10800094 	ori	r2,r2,2
  80501c:	80c010c4 	addi	r3,r16,67
  805020:	8080030d 	sth	r2,12(r16)
  805024:	00800044 	movi	r2,1
  805028:	80c00015 	stw	r3,0(r16)
  80502c:	80c00415 	stw	r3,16(r16)
  805030:	80800515 	stw	r2,20(r16)
  805034:	003fd306 	br	804f84 <__alt_data_end+0xff804f84>
  805038:	04810004 	movi	r18,1024
  80503c:	003fc306 	br	804f4c <__alt_data_end+0xff804f4c>
  805040:	0027883a 	mov	r19,zero
  805044:	04810004 	movi	r18,1024
  805048:	003fc006 	br	804f4c <__alt_data_end+0xff804f4c>

0080504c <_malloc_r>:
  80504c:	defff504 	addi	sp,sp,-44
  805050:	dc800315 	stw	r18,12(sp)
  805054:	dfc00a15 	stw	ra,40(sp)
  805058:	df000915 	stw	fp,36(sp)
  80505c:	ddc00815 	stw	r23,32(sp)
  805060:	dd800715 	stw	r22,28(sp)
  805064:	dd400615 	stw	r21,24(sp)
  805068:	dd000515 	stw	r20,20(sp)
  80506c:	dcc00415 	stw	r19,16(sp)
  805070:	dc400215 	stw	r17,8(sp)
  805074:	dc000115 	stw	r16,4(sp)
  805078:	288002c4 	addi	r2,r5,11
  80507c:	00c00584 	movi	r3,22
  805080:	2025883a 	mov	r18,r4
  805084:	18807f2e 	bgeu	r3,r2,805284 <_malloc_r+0x238>
  805088:	047ffe04 	movi	r17,-8
  80508c:	1462703a 	and	r17,r2,r17
  805090:	8800a316 	blt	r17,zero,805320 <_malloc_r+0x2d4>
  805094:	8940a236 	bltu	r17,r5,805320 <_malloc_r+0x2d4>
  805098:	080d3e00 	call	80d3e0 <__malloc_lock>
  80509c:	00807dc4 	movi	r2,503
  8050a0:	1441e92e 	bgeu	r2,r17,805848 <_malloc_r+0x7fc>
  8050a4:	8804d27a 	srli	r2,r17,9
  8050a8:	1000a126 	beq	r2,zero,805330 <_malloc_r+0x2e4>
  8050ac:	00c00104 	movi	r3,4
  8050b0:	18811e36 	bltu	r3,r2,80552c <_malloc_r+0x4e0>
  8050b4:	8804d1ba 	srli	r2,r17,6
  8050b8:	12000e44 	addi	r8,r2,57
  8050bc:	11c00e04 	addi	r7,r2,56
  8050c0:	4209883a 	add	r4,r8,r8
  8050c4:	04c02074 	movhi	r19,129
  8050c8:	2109883a 	add	r4,r4,r4
  8050cc:	9cc3cb04 	addi	r19,r19,3884
  8050d0:	2109883a 	add	r4,r4,r4
  8050d4:	9909883a 	add	r4,r19,r4
  8050d8:	24000117 	ldw	r16,4(r4)
  8050dc:	213ffe04 	addi	r4,r4,-8
  8050e0:	24009726 	beq	r4,r16,805340 <_malloc_r+0x2f4>
  8050e4:	80800117 	ldw	r2,4(r16)
  8050e8:	01bfff04 	movi	r6,-4
  8050ec:	014003c4 	movi	r5,15
  8050f0:	1184703a 	and	r2,r2,r6
  8050f4:	1447c83a 	sub	r3,r2,r17
  8050f8:	28c00716 	blt	r5,r3,805118 <_malloc_r+0xcc>
  8050fc:	1800920e 	bge	r3,zero,805348 <_malloc_r+0x2fc>
  805100:	84000317 	ldw	r16,12(r16)
  805104:	24008e26 	beq	r4,r16,805340 <_malloc_r+0x2f4>
  805108:	80800117 	ldw	r2,4(r16)
  80510c:	1184703a 	and	r2,r2,r6
  805110:	1447c83a 	sub	r3,r2,r17
  805114:	28fff90e 	bge	r5,r3,8050fc <__alt_data_end+0xff8050fc>
  805118:	3809883a 	mov	r4,r7
  80511c:	01802074 	movhi	r6,129
  805120:	9c000417 	ldw	r16,16(r19)
  805124:	3183cb04 	addi	r6,r6,3884
  805128:	32000204 	addi	r8,r6,8
  80512c:	82013426 	beq	r16,r8,805600 <_malloc_r+0x5b4>
  805130:	80c00117 	ldw	r3,4(r16)
  805134:	00bfff04 	movi	r2,-4
  805138:	188e703a 	and	r7,r3,r2
  80513c:	3c45c83a 	sub	r2,r7,r17
  805140:	00c003c4 	movi	r3,15
  805144:	18811f16 	blt	r3,r2,8055c4 <_malloc_r+0x578>
  805148:	32000515 	stw	r8,20(r6)
  80514c:	32000415 	stw	r8,16(r6)
  805150:	10007f0e 	bge	r2,zero,805350 <_malloc_r+0x304>
  805154:	00807fc4 	movi	r2,511
  805158:	11c0fd36 	bltu	r2,r7,805550 <_malloc_r+0x504>
  80515c:	3806d0fa 	srli	r3,r7,3
  805160:	01c00044 	movi	r7,1
  805164:	30800117 	ldw	r2,4(r6)
  805168:	19400044 	addi	r5,r3,1
  80516c:	294b883a 	add	r5,r5,r5
  805170:	1807d0ba 	srai	r3,r3,2
  805174:	294b883a 	add	r5,r5,r5
  805178:	294b883a 	add	r5,r5,r5
  80517c:	298b883a 	add	r5,r5,r6
  805180:	38c6983a 	sll	r3,r7,r3
  805184:	29c00017 	ldw	r7,0(r5)
  805188:	2a7ffe04 	addi	r9,r5,-8
  80518c:	1886b03a 	or	r3,r3,r2
  805190:	82400315 	stw	r9,12(r16)
  805194:	81c00215 	stw	r7,8(r16)
  805198:	30c00115 	stw	r3,4(r6)
  80519c:	2c000015 	stw	r16,0(r5)
  8051a0:	3c000315 	stw	r16,12(r7)
  8051a4:	2005d0ba 	srai	r2,r4,2
  8051a8:	01400044 	movi	r5,1
  8051ac:	288a983a 	sll	r5,r5,r2
  8051b0:	19406f36 	bltu	r3,r5,805370 <_malloc_r+0x324>
  8051b4:	28c4703a 	and	r2,r5,r3
  8051b8:	10000a1e 	bne	r2,zero,8051e4 <_malloc_r+0x198>
  8051bc:	00bfff04 	movi	r2,-4
  8051c0:	294b883a 	add	r5,r5,r5
  8051c4:	2088703a 	and	r4,r4,r2
  8051c8:	28c4703a 	and	r2,r5,r3
  8051cc:	21000104 	addi	r4,r4,4
  8051d0:	1000041e 	bne	r2,zero,8051e4 <_malloc_r+0x198>
  8051d4:	294b883a 	add	r5,r5,r5
  8051d8:	28c4703a 	and	r2,r5,r3
  8051dc:	21000104 	addi	r4,r4,4
  8051e0:	103ffc26 	beq	r2,zero,8051d4 <__alt_data_end+0xff8051d4>
  8051e4:	02bfff04 	movi	r10,-4
  8051e8:	024003c4 	movi	r9,15
  8051ec:	21800044 	addi	r6,r4,1
  8051f0:	318d883a 	add	r6,r6,r6
  8051f4:	318d883a 	add	r6,r6,r6
  8051f8:	318d883a 	add	r6,r6,r6
  8051fc:	998d883a 	add	r6,r19,r6
  805200:	333ffe04 	addi	r12,r6,-8
  805204:	2017883a 	mov	r11,r4
  805208:	31800104 	addi	r6,r6,4
  80520c:	34000017 	ldw	r16,0(r6)
  805210:	31fffd04 	addi	r7,r6,-12
  805214:	81c0041e 	bne	r16,r7,805228 <_malloc_r+0x1dc>
  805218:	0000fb06 	br	805608 <_malloc_r+0x5bc>
  80521c:	1801030e 	bge	r3,zero,80562c <_malloc_r+0x5e0>
  805220:	84000317 	ldw	r16,12(r16)
  805224:	81c0f826 	beq	r16,r7,805608 <_malloc_r+0x5bc>
  805228:	80800117 	ldw	r2,4(r16)
  80522c:	1284703a 	and	r2,r2,r10
  805230:	1447c83a 	sub	r3,r2,r17
  805234:	48fff90e 	bge	r9,r3,80521c <__alt_data_end+0xff80521c>
  805238:	80800317 	ldw	r2,12(r16)
  80523c:	81000217 	ldw	r4,8(r16)
  805240:	89400054 	ori	r5,r17,1
  805244:	81400115 	stw	r5,4(r16)
  805248:	20800315 	stw	r2,12(r4)
  80524c:	11000215 	stw	r4,8(r2)
  805250:	8463883a 	add	r17,r16,r17
  805254:	9c400515 	stw	r17,20(r19)
  805258:	9c400415 	stw	r17,16(r19)
  80525c:	18800054 	ori	r2,r3,1
  805260:	88800115 	stw	r2,4(r17)
  805264:	8a000315 	stw	r8,12(r17)
  805268:	8a000215 	stw	r8,8(r17)
  80526c:	88e3883a 	add	r17,r17,r3
  805270:	88c00015 	stw	r3,0(r17)
  805274:	9009883a 	mov	r4,r18
  805278:	080d4040 	call	80d404 <__malloc_unlock>
  80527c:	80800204 	addi	r2,r16,8
  805280:	00001b06 	br	8052f0 <_malloc_r+0x2a4>
  805284:	04400404 	movi	r17,16
  805288:	89402536 	bltu	r17,r5,805320 <_malloc_r+0x2d4>
  80528c:	080d3e00 	call	80d3e0 <__malloc_lock>
  805290:	00800184 	movi	r2,6
  805294:	01000084 	movi	r4,2
  805298:	04c02074 	movhi	r19,129
  80529c:	1085883a 	add	r2,r2,r2
  8052a0:	9cc3cb04 	addi	r19,r19,3884
  8052a4:	1085883a 	add	r2,r2,r2
  8052a8:	9885883a 	add	r2,r19,r2
  8052ac:	14000117 	ldw	r16,4(r2)
  8052b0:	10fffe04 	addi	r3,r2,-8
  8052b4:	80c0d926 	beq	r16,r3,80561c <_malloc_r+0x5d0>
  8052b8:	80c00117 	ldw	r3,4(r16)
  8052bc:	81000317 	ldw	r4,12(r16)
  8052c0:	00bfff04 	movi	r2,-4
  8052c4:	1884703a 	and	r2,r3,r2
  8052c8:	81400217 	ldw	r5,8(r16)
  8052cc:	8085883a 	add	r2,r16,r2
  8052d0:	10c00117 	ldw	r3,4(r2)
  8052d4:	29000315 	stw	r4,12(r5)
  8052d8:	21400215 	stw	r5,8(r4)
  8052dc:	18c00054 	ori	r3,r3,1
  8052e0:	10c00115 	stw	r3,4(r2)
  8052e4:	9009883a 	mov	r4,r18
  8052e8:	080d4040 	call	80d404 <__malloc_unlock>
  8052ec:	80800204 	addi	r2,r16,8
  8052f0:	dfc00a17 	ldw	ra,40(sp)
  8052f4:	df000917 	ldw	fp,36(sp)
  8052f8:	ddc00817 	ldw	r23,32(sp)
  8052fc:	dd800717 	ldw	r22,28(sp)
  805300:	dd400617 	ldw	r21,24(sp)
  805304:	dd000517 	ldw	r20,20(sp)
  805308:	dcc00417 	ldw	r19,16(sp)
  80530c:	dc800317 	ldw	r18,12(sp)
  805310:	dc400217 	ldw	r17,8(sp)
  805314:	dc000117 	ldw	r16,4(sp)
  805318:	dec00b04 	addi	sp,sp,44
  80531c:	f800283a 	ret
  805320:	00800304 	movi	r2,12
  805324:	90800015 	stw	r2,0(r18)
  805328:	0005883a 	mov	r2,zero
  80532c:	003ff006 	br	8052f0 <__alt_data_end+0xff8052f0>
  805330:	01002004 	movi	r4,128
  805334:	02001004 	movi	r8,64
  805338:	01c00fc4 	movi	r7,63
  80533c:	003f6106 	br	8050c4 <__alt_data_end+0xff8050c4>
  805340:	4009883a 	mov	r4,r8
  805344:	003f7506 	br	80511c <__alt_data_end+0xff80511c>
  805348:	81000317 	ldw	r4,12(r16)
  80534c:	003fde06 	br	8052c8 <__alt_data_end+0xff8052c8>
  805350:	81c5883a 	add	r2,r16,r7
  805354:	11400117 	ldw	r5,4(r2)
  805358:	9009883a 	mov	r4,r18
  80535c:	29400054 	ori	r5,r5,1
  805360:	11400115 	stw	r5,4(r2)
  805364:	080d4040 	call	80d404 <__malloc_unlock>
  805368:	80800204 	addi	r2,r16,8
  80536c:	003fe006 	br	8052f0 <__alt_data_end+0xff8052f0>
  805370:	9c000217 	ldw	r16,8(r19)
  805374:	00bfff04 	movi	r2,-4
  805378:	85800117 	ldw	r22,4(r16)
  80537c:	b0ac703a 	and	r22,r22,r2
  805380:	b4400336 	bltu	r22,r17,805390 <_malloc_r+0x344>
  805384:	b445c83a 	sub	r2,r22,r17
  805388:	00c003c4 	movi	r3,15
  80538c:	18805d16 	blt	r3,r2,805504 <_malloc_r+0x4b8>
  805390:	05c02074 	movhi	r23,129
  805394:	00802074 	movhi	r2,129
  805398:	10892f04 	addi	r2,r2,9404
  80539c:	bdc5d704 	addi	r23,r23,5980
  8053a0:	15400017 	ldw	r21,0(r2)
  8053a4:	b8c00017 	ldw	r3,0(r23)
  8053a8:	00bfffc4 	movi	r2,-1
  8053ac:	858d883a 	add	r6,r16,r22
  8053b0:	8d6b883a 	add	r21,r17,r21
  8053b4:	1880ea26 	beq	r3,r2,805760 <_malloc_r+0x714>
  8053b8:	ad4403c4 	addi	r21,r21,4111
  8053bc:	00bc0004 	movi	r2,-4096
  8053c0:	a8aa703a 	and	r21,r21,r2
  8053c4:	a80b883a 	mov	r5,r21
  8053c8:	9009883a 	mov	r4,r18
  8053cc:	d9800015 	stw	r6,0(sp)
  8053d0:	0806c1c0 	call	806c1c <_sbrk_r>
  8053d4:	1029883a 	mov	r20,r2
  8053d8:	00bfffc4 	movi	r2,-1
  8053dc:	d9800017 	ldw	r6,0(sp)
  8053e0:	a080e826 	beq	r20,r2,805784 <_malloc_r+0x738>
  8053e4:	a180a636 	bltu	r20,r6,805680 <_malloc_r+0x634>
  8053e8:	07002074 	movhi	fp,129
  8053ec:	e7093804 	addi	fp,fp,9440
  8053f0:	e0800017 	ldw	r2,0(fp)
  8053f4:	a887883a 	add	r3,r21,r2
  8053f8:	e0c00015 	stw	r3,0(fp)
  8053fc:	3500e626 	beq	r6,r20,805798 <_malloc_r+0x74c>
  805400:	b9000017 	ldw	r4,0(r23)
  805404:	00bfffc4 	movi	r2,-1
  805408:	2080ee26 	beq	r4,r2,8057c4 <_malloc_r+0x778>
  80540c:	a185c83a 	sub	r2,r20,r6
  805410:	10c5883a 	add	r2,r2,r3
  805414:	e0800015 	stw	r2,0(fp)
  805418:	a0c001cc 	andi	r3,r20,7
  80541c:	1800bc26 	beq	r3,zero,805710 <_malloc_r+0x6c4>
  805420:	a0e9c83a 	sub	r20,r20,r3
  805424:	00840204 	movi	r2,4104
  805428:	a5000204 	addi	r20,r20,8
  80542c:	10c7c83a 	sub	r3,r2,r3
  805430:	a545883a 	add	r2,r20,r21
  805434:	1083ffcc 	andi	r2,r2,4095
  805438:	18abc83a 	sub	r21,r3,r2
  80543c:	a80b883a 	mov	r5,r21
  805440:	9009883a 	mov	r4,r18
  805444:	0806c1c0 	call	806c1c <_sbrk_r>
  805448:	00ffffc4 	movi	r3,-1
  80544c:	10c0e126 	beq	r2,r3,8057d4 <_malloc_r+0x788>
  805450:	1505c83a 	sub	r2,r2,r20
  805454:	1545883a 	add	r2,r2,r21
  805458:	10800054 	ori	r2,r2,1
  80545c:	e0c00017 	ldw	r3,0(fp)
  805460:	9d000215 	stw	r20,8(r19)
  805464:	a0800115 	stw	r2,4(r20)
  805468:	a8c7883a 	add	r3,r21,r3
  80546c:	e0c00015 	stw	r3,0(fp)
  805470:	84c00e26 	beq	r16,r19,8054ac <_malloc_r+0x460>
  805474:	018003c4 	movi	r6,15
  805478:	3580a72e 	bgeu	r6,r22,805718 <_malloc_r+0x6cc>
  80547c:	81400117 	ldw	r5,4(r16)
  805480:	013ffe04 	movi	r4,-8
  805484:	b0bffd04 	addi	r2,r22,-12
  805488:	1104703a 	and	r2,r2,r4
  80548c:	2900004c 	andi	r4,r5,1
  805490:	2088b03a 	or	r4,r4,r2
  805494:	81000115 	stw	r4,4(r16)
  805498:	01400144 	movi	r5,5
  80549c:	8089883a 	add	r4,r16,r2
  8054a0:	21400115 	stw	r5,4(r4)
  8054a4:	21400215 	stw	r5,8(r4)
  8054a8:	3080cd36 	bltu	r6,r2,8057e0 <_malloc_r+0x794>
  8054ac:	00802074 	movhi	r2,129
  8054b0:	10892e04 	addi	r2,r2,9400
  8054b4:	11000017 	ldw	r4,0(r2)
  8054b8:	20c0012e 	bgeu	r4,r3,8054c0 <_malloc_r+0x474>
  8054bc:	10c00015 	stw	r3,0(r2)
  8054c0:	00802074 	movhi	r2,129
  8054c4:	10892d04 	addi	r2,r2,9396
  8054c8:	11000017 	ldw	r4,0(r2)
  8054cc:	9c000217 	ldw	r16,8(r19)
  8054d0:	20c0012e 	bgeu	r4,r3,8054d8 <_malloc_r+0x48c>
  8054d4:	10c00015 	stw	r3,0(r2)
  8054d8:	80c00117 	ldw	r3,4(r16)
  8054dc:	00bfff04 	movi	r2,-4
  8054e0:	1886703a 	and	r3,r3,r2
  8054e4:	1c45c83a 	sub	r2,r3,r17
  8054e8:	1c400236 	bltu	r3,r17,8054f4 <_malloc_r+0x4a8>
  8054ec:	00c003c4 	movi	r3,15
  8054f0:	18800416 	blt	r3,r2,805504 <_malloc_r+0x4b8>
  8054f4:	9009883a 	mov	r4,r18
  8054f8:	080d4040 	call	80d404 <__malloc_unlock>
  8054fc:	0005883a 	mov	r2,zero
  805500:	003f7b06 	br	8052f0 <__alt_data_end+0xff8052f0>
  805504:	88c00054 	ori	r3,r17,1
  805508:	80c00115 	stw	r3,4(r16)
  80550c:	8463883a 	add	r17,r16,r17
  805510:	10800054 	ori	r2,r2,1
  805514:	9c400215 	stw	r17,8(r19)
  805518:	88800115 	stw	r2,4(r17)
  80551c:	9009883a 	mov	r4,r18
  805520:	080d4040 	call	80d404 <__malloc_unlock>
  805524:	80800204 	addi	r2,r16,8
  805528:	003f7106 	br	8052f0 <__alt_data_end+0xff8052f0>
  80552c:	00c00504 	movi	r3,20
  805530:	18804a2e 	bgeu	r3,r2,80565c <_malloc_r+0x610>
  805534:	00c01504 	movi	r3,84
  805538:	18806e36 	bltu	r3,r2,8056f4 <_malloc_r+0x6a8>
  80553c:	8804d33a 	srli	r2,r17,12
  805540:	12001bc4 	addi	r8,r2,111
  805544:	11c01b84 	addi	r7,r2,110
  805548:	4209883a 	add	r4,r8,r8
  80554c:	003edd06 	br	8050c4 <__alt_data_end+0xff8050c4>
  805550:	3804d27a 	srli	r2,r7,9
  805554:	00c00104 	movi	r3,4
  805558:	1880442e 	bgeu	r3,r2,80566c <_malloc_r+0x620>
  80555c:	00c00504 	movi	r3,20
  805560:	18808136 	bltu	r3,r2,805768 <_malloc_r+0x71c>
  805564:	11401704 	addi	r5,r2,92
  805568:	10c016c4 	addi	r3,r2,91
  80556c:	294b883a 	add	r5,r5,r5
  805570:	294b883a 	add	r5,r5,r5
  805574:	294b883a 	add	r5,r5,r5
  805578:	994b883a 	add	r5,r19,r5
  80557c:	28800017 	ldw	r2,0(r5)
  805580:	01802074 	movhi	r6,129
  805584:	297ffe04 	addi	r5,r5,-8
  805588:	3183cb04 	addi	r6,r6,3884
  80558c:	28806526 	beq	r5,r2,805724 <_malloc_r+0x6d8>
  805590:	01bfff04 	movi	r6,-4
  805594:	10c00117 	ldw	r3,4(r2)
  805598:	1986703a 	and	r3,r3,r6
  80559c:	38c0022e 	bgeu	r7,r3,8055a8 <_malloc_r+0x55c>
  8055a0:	10800217 	ldw	r2,8(r2)
  8055a4:	28bffb1e 	bne	r5,r2,805594 <__alt_data_end+0xff805594>
  8055a8:	11400317 	ldw	r5,12(r2)
  8055ac:	98c00117 	ldw	r3,4(r19)
  8055b0:	81400315 	stw	r5,12(r16)
  8055b4:	80800215 	stw	r2,8(r16)
  8055b8:	2c000215 	stw	r16,8(r5)
  8055bc:	14000315 	stw	r16,12(r2)
  8055c0:	003ef806 	br	8051a4 <__alt_data_end+0xff8051a4>
  8055c4:	88c00054 	ori	r3,r17,1
  8055c8:	80c00115 	stw	r3,4(r16)
  8055cc:	8463883a 	add	r17,r16,r17
  8055d0:	34400515 	stw	r17,20(r6)
  8055d4:	34400415 	stw	r17,16(r6)
  8055d8:	10c00054 	ori	r3,r2,1
  8055dc:	8a000315 	stw	r8,12(r17)
  8055e0:	8a000215 	stw	r8,8(r17)
  8055e4:	88c00115 	stw	r3,4(r17)
  8055e8:	88a3883a 	add	r17,r17,r2
  8055ec:	88800015 	stw	r2,0(r17)
  8055f0:	9009883a 	mov	r4,r18
  8055f4:	080d4040 	call	80d404 <__malloc_unlock>
  8055f8:	80800204 	addi	r2,r16,8
  8055fc:	003f3c06 	br	8052f0 <__alt_data_end+0xff8052f0>
  805600:	30c00117 	ldw	r3,4(r6)
  805604:	003ee706 	br	8051a4 <__alt_data_end+0xff8051a4>
  805608:	5ac00044 	addi	r11,r11,1
  80560c:	588000cc 	andi	r2,r11,3
  805610:	31800204 	addi	r6,r6,8
  805614:	103efd1e 	bne	r2,zero,80520c <__alt_data_end+0xff80520c>
  805618:	00002406 	br	8056ac <_malloc_r+0x660>
  80561c:	14000317 	ldw	r16,12(r2)
  805620:	143f251e 	bne	r2,r16,8052b8 <__alt_data_end+0xff8052b8>
  805624:	21000084 	addi	r4,r4,2
  805628:	003ebc06 	br	80511c <__alt_data_end+0xff80511c>
  80562c:	8085883a 	add	r2,r16,r2
  805630:	10c00117 	ldw	r3,4(r2)
  805634:	81000317 	ldw	r4,12(r16)
  805638:	81400217 	ldw	r5,8(r16)
  80563c:	18c00054 	ori	r3,r3,1
  805640:	10c00115 	stw	r3,4(r2)
  805644:	29000315 	stw	r4,12(r5)
  805648:	21400215 	stw	r5,8(r4)
  80564c:	9009883a 	mov	r4,r18
  805650:	080d4040 	call	80d404 <__malloc_unlock>
  805654:	80800204 	addi	r2,r16,8
  805658:	003f2506 	br	8052f0 <__alt_data_end+0xff8052f0>
  80565c:	12001704 	addi	r8,r2,92
  805660:	11c016c4 	addi	r7,r2,91
  805664:	4209883a 	add	r4,r8,r8
  805668:	003e9606 	br	8050c4 <__alt_data_end+0xff8050c4>
  80566c:	3804d1ba 	srli	r2,r7,6
  805670:	11400e44 	addi	r5,r2,57
  805674:	10c00e04 	addi	r3,r2,56
  805678:	294b883a 	add	r5,r5,r5
  80567c:	003fbc06 	br	805570 <__alt_data_end+0xff805570>
  805680:	84ff5926 	beq	r16,r19,8053e8 <__alt_data_end+0xff8053e8>
  805684:	00802074 	movhi	r2,129
  805688:	1083cb04 	addi	r2,r2,3884
  80568c:	14000217 	ldw	r16,8(r2)
  805690:	00bfff04 	movi	r2,-4
  805694:	80c00117 	ldw	r3,4(r16)
  805698:	1886703a 	and	r3,r3,r2
  80569c:	003f9106 	br	8054e4 <__alt_data_end+0xff8054e4>
  8056a0:	60800217 	ldw	r2,8(r12)
  8056a4:	213fffc4 	addi	r4,r4,-1
  8056a8:	1300651e 	bne	r2,r12,805840 <_malloc_r+0x7f4>
  8056ac:	208000cc 	andi	r2,r4,3
  8056b0:	633ffe04 	addi	r12,r12,-8
  8056b4:	103ffa1e 	bne	r2,zero,8056a0 <__alt_data_end+0xff8056a0>
  8056b8:	98800117 	ldw	r2,4(r19)
  8056bc:	0146303a 	nor	r3,zero,r5
  8056c0:	1884703a 	and	r2,r3,r2
  8056c4:	98800115 	stw	r2,4(r19)
  8056c8:	294b883a 	add	r5,r5,r5
  8056cc:	117f2836 	bltu	r2,r5,805370 <__alt_data_end+0xff805370>
  8056d0:	283f2726 	beq	r5,zero,805370 <__alt_data_end+0xff805370>
  8056d4:	2886703a 	and	r3,r5,r2
  8056d8:	5809883a 	mov	r4,r11
  8056dc:	183ec31e 	bne	r3,zero,8051ec <__alt_data_end+0xff8051ec>
  8056e0:	294b883a 	add	r5,r5,r5
  8056e4:	2886703a 	and	r3,r5,r2
  8056e8:	21000104 	addi	r4,r4,4
  8056ec:	183ffc26 	beq	r3,zero,8056e0 <__alt_data_end+0xff8056e0>
  8056f0:	003ebe06 	br	8051ec <__alt_data_end+0xff8051ec>
  8056f4:	00c05504 	movi	r3,340
  8056f8:	18801236 	bltu	r3,r2,805744 <_malloc_r+0x6f8>
  8056fc:	8804d3fa 	srli	r2,r17,15
  805700:	12001e04 	addi	r8,r2,120
  805704:	11c01dc4 	addi	r7,r2,119
  805708:	4209883a 	add	r4,r8,r8
  80570c:	003e6d06 	br	8050c4 <__alt_data_end+0xff8050c4>
  805710:	00c40004 	movi	r3,4096
  805714:	003f4606 	br	805430 <__alt_data_end+0xff805430>
  805718:	00800044 	movi	r2,1
  80571c:	a0800115 	stw	r2,4(r20)
  805720:	003f7406 	br	8054f4 <__alt_data_end+0xff8054f4>
  805724:	1805d0ba 	srai	r2,r3,2
  805728:	01c00044 	movi	r7,1
  80572c:	30c00117 	ldw	r3,4(r6)
  805730:	388e983a 	sll	r7,r7,r2
  805734:	2805883a 	mov	r2,r5
  805738:	38c6b03a 	or	r3,r7,r3
  80573c:	30c00115 	stw	r3,4(r6)
  805740:	003f9b06 	br	8055b0 <__alt_data_end+0xff8055b0>
  805744:	00c15504 	movi	r3,1364
  805748:	18801a36 	bltu	r3,r2,8057b4 <_malloc_r+0x768>
  80574c:	8804d4ba 	srli	r2,r17,18
  805750:	12001f44 	addi	r8,r2,125
  805754:	11c01f04 	addi	r7,r2,124
  805758:	4209883a 	add	r4,r8,r8
  80575c:	003e5906 	br	8050c4 <__alt_data_end+0xff8050c4>
  805760:	ad400404 	addi	r21,r21,16
  805764:	003f1706 	br	8053c4 <__alt_data_end+0xff8053c4>
  805768:	00c01504 	movi	r3,84
  80576c:	18802336 	bltu	r3,r2,8057fc <_malloc_r+0x7b0>
  805770:	3804d33a 	srli	r2,r7,12
  805774:	11401bc4 	addi	r5,r2,111
  805778:	10c01b84 	addi	r3,r2,110
  80577c:	294b883a 	add	r5,r5,r5
  805780:	003f7b06 	br	805570 <__alt_data_end+0xff805570>
  805784:	9c000217 	ldw	r16,8(r19)
  805788:	00bfff04 	movi	r2,-4
  80578c:	80c00117 	ldw	r3,4(r16)
  805790:	1886703a 	and	r3,r3,r2
  805794:	003f5306 	br	8054e4 <__alt_data_end+0xff8054e4>
  805798:	3083ffcc 	andi	r2,r6,4095
  80579c:	103f181e 	bne	r2,zero,805400 <__alt_data_end+0xff805400>
  8057a0:	99000217 	ldw	r4,8(r19)
  8057a4:	b545883a 	add	r2,r22,r21
  8057a8:	10800054 	ori	r2,r2,1
  8057ac:	20800115 	stw	r2,4(r4)
  8057b0:	003f3e06 	br	8054ac <__alt_data_end+0xff8054ac>
  8057b4:	01003f84 	movi	r4,254
  8057b8:	02001fc4 	movi	r8,127
  8057bc:	01c01f84 	movi	r7,126
  8057c0:	003e4006 	br	8050c4 <__alt_data_end+0xff8050c4>
  8057c4:	00802074 	movhi	r2,129
  8057c8:	1085d704 	addi	r2,r2,5980
  8057cc:	15000015 	stw	r20,0(r2)
  8057d0:	003f1106 	br	805418 <__alt_data_end+0xff805418>
  8057d4:	00800044 	movi	r2,1
  8057d8:	002b883a 	mov	r21,zero
  8057dc:	003f1f06 	br	80545c <__alt_data_end+0xff80545c>
  8057e0:	81400204 	addi	r5,r16,8
  8057e4:	9009883a 	mov	r4,r18
  8057e8:	080491c0 	call	80491c <_free_r>
  8057ec:	00802074 	movhi	r2,129
  8057f0:	10893804 	addi	r2,r2,9440
  8057f4:	10c00017 	ldw	r3,0(r2)
  8057f8:	003f2c06 	br	8054ac <__alt_data_end+0xff8054ac>
  8057fc:	00c05504 	movi	r3,340
  805800:	18800536 	bltu	r3,r2,805818 <_malloc_r+0x7cc>
  805804:	3804d3fa 	srli	r2,r7,15
  805808:	11401e04 	addi	r5,r2,120
  80580c:	10c01dc4 	addi	r3,r2,119
  805810:	294b883a 	add	r5,r5,r5
  805814:	003f5606 	br	805570 <__alt_data_end+0xff805570>
  805818:	00c15504 	movi	r3,1364
  80581c:	18800536 	bltu	r3,r2,805834 <_malloc_r+0x7e8>
  805820:	3804d4ba 	srli	r2,r7,18
  805824:	11401f44 	addi	r5,r2,125
  805828:	10c01f04 	addi	r3,r2,124
  80582c:	294b883a 	add	r5,r5,r5
  805830:	003f4f06 	br	805570 <__alt_data_end+0xff805570>
  805834:	01403f84 	movi	r5,254
  805838:	00c01f84 	movi	r3,126
  80583c:	003f4c06 	br	805570 <__alt_data_end+0xff805570>
  805840:	98800117 	ldw	r2,4(r19)
  805844:	003fa006 	br	8056c8 <__alt_data_end+0xff8056c8>
  805848:	8808d0fa 	srli	r4,r17,3
  80584c:	20800044 	addi	r2,r4,1
  805850:	1085883a 	add	r2,r2,r2
  805854:	003e9006 	br	805298 <__alt_data_end+0xff805298>

00805858 <memchr>:
  805858:	208000cc 	andi	r2,r4,3
  80585c:	280f883a 	mov	r7,r5
  805860:	10003426 	beq	r2,zero,805934 <memchr+0xdc>
  805864:	30bfffc4 	addi	r2,r6,-1
  805868:	30001a26 	beq	r6,zero,8058d4 <memchr+0x7c>
  80586c:	20c00003 	ldbu	r3,0(r4)
  805870:	29803fcc 	andi	r6,r5,255
  805874:	30c0051e 	bne	r6,r3,80588c <memchr+0x34>
  805878:	00001806 	br	8058dc <memchr+0x84>
  80587c:	10001526 	beq	r2,zero,8058d4 <memchr+0x7c>
  805880:	20c00003 	ldbu	r3,0(r4)
  805884:	10bfffc4 	addi	r2,r2,-1
  805888:	30c01426 	beq	r6,r3,8058dc <memchr+0x84>
  80588c:	21000044 	addi	r4,r4,1
  805890:	20c000cc 	andi	r3,r4,3
  805894:	183ff91e 	bne	r3,zero,80587c <__alt_data_end+0xff80587c>
  805898:	020000c4 	movi	r8,3
  80589c:	40801136 	bltu	r8,r2,8058e4 <memchr+0x8c>
  8058a0:	10000c26 	beq	r2,zero,8058d4 <memchr+0x7c>
  8058a4:	20c00003 	ldbu	r3,0(r4)
  8058a8:	29403fcc 	andi	r5,r5,255
  8058ac:	28c00b26 	beq	r5,r3,8058dc <memchr+0x84>
  8058b0:	20c00044 	addi	r3,r4,1
  8058b4:	39803fcc 	andi	r6,r7,255
  8058b8:	2089883a 	add	r4,r4,r2
  8058bc:	00000306 	br	8058cc <memchr+0x74>
  8058c0:	18c00044 	addi	r3,r3,1
  8058c4:	197fffc3 	ldbu	r5,-1(r3)
  8058c8:	31400526 	beq	r6,r5,8058e0 <memchr+0x88>
  8058cc:	1805883a 	mov	r2,r3
  8058d0:	20fffb1e 	bne	r4,r3,8058c0 <__alt_data_end+0xff8058c0>
  8058d4:	0005883a 	mov	r2,zero
  8058d8:	f800283a 	ret
  8058dc:	2005883a 	mov	r2,r4
  8058e0:	f800283a 	ret
  8058e4:	28c03fcc 	andi	r3,r5,255
  8058e8:	1812923a 	slli	r9,r3,8
  8058ec:	02ffbff4 	movhi	r11,65279
  8058f0:	02a02074 	movhi	r10,32897
  8058f4:	48d2b03a 	or	r9,r9,r3
  8058f8:	4806943a 	slli	r3,r9,16
  8058fc:	5affbfc4 	addi	r11,r11,-257
  805900:	52a02004 	addi	r10,r10,-32640
  805904:	48d2b03a 	or	r9,r9,r3
  805908:	20c00017 	ldw	r3,0(r4)
  80590c:	48c6f03a 	xor	r3,r9,r3
  805910:	1acd883a 	add	r6,r3,r11
  805914:	00c6303a 	nor	r3,zero,r3
  805918:	30c6703a 	and	r3,r6,r3
  80591c:	1a86703a 	and	r3,r3,r10
  805920:	183fe01e 	bne	r3,zero,8058a4 <__alt_data_end+0xff8058a4>
  805924:	10bfff04 	addi	r2,r2,-4
  805928:	21000104 	addi	r4,r4,4
  80592c:	40bff636 	bltu	r8,r2,805908 <__alt_data_end+0xff805908>
  805930:	003fdb06 	br	8058a0 <__alt_data_end+0xff8058a0>
  805934:	3005883a 	mov	r2,r6
  805938:	003fd706 	br	805898 <__alt_data_end+0xff805898>

0080593c <memcpy>:
  80593c:	defffd04 	addi	sp,sp,-12
  805940:	dfc00215 	stw	ra,8(sp)
  805944:	dc400115 	stw	r17,4(sp)
  805948:	dc000015 	stw	r16,0(sp)
  80594c:	00c003c4 	movi	r3,15
  805950:	2005883a 	mov	r2,r4
  805954:	1980452e 	bgeu	r3,r6,805a6c <memcpy+0x130>
  805958:	2906b03a 	or	r3,r5,r4
  80595c:	18c000cc 	andi	r3,r3,3
  805960:	1800441e 	bne	r3,zero,805a74 <memcpy+0x138>
  805964:	347ffc04 	addi	r17,r6,-16
  805968:	8822d13a 	srli	r17,r17,4
  80596c:	28c00104 	addi	r3,r5,4
  805970:	23400104 	addi	r13,r4,4
  805974:	8820913a 	slli	r16,r17,4
  805978:	2b000204 	addi	r12,r5,8
  80597c:	22c00204 	addi	r11,r4,8
  805980:	84000504 	addi	r16,r16,20
  805984:	2a800304 	addi	r10,r5,12
  805988:	22400304 	addi	r9,r4,12
  80598c:	2c21883a 	add	r16,r5,r16
  805990:	2811883a 	mov	r8,r5
  805994:	200f883a 	mov	r7,r4
  805998:	41000017 	ldw	r4,0(r8)
  80599c:	1fc00017 	ldw	ra,0(r3)
  8059a0:	63c00017 	ldw	r15,0(r12)
  8059a4:	39000015 	stw	r4,0(r7)
  8059a8:	53800017 	ldw	r14,0(r10)
  8059ac:	6fc00015 	stw	ra,0(r13)
  8059b0:	5bc00015 	stw	r15,0(r11)
  8059b4:	4b800015 	stw	r14,0(r9)
  8059b8:	18c00404 	addi	r3,r3,16
  8059bc:	39c00404 	addi	r7,r7,16
  8059c0:	42000404 	addi	r8,r8,16
  8059c4:	6b400404 	addi	r13,r13,16
  8059c8:	63000404 	addi	r12,r12,16
  8059cc:	5ac00404 	addi	r11,r11,16
  8059d0:	52800404 	addi	r10,r10,16
  8059d4:	4a400404 	addi	r9,r9,16
  8059d8:	1c3fef1e 	bne	r3,r16,805998 <__alt_data_end+0xff805998>
  8059dc:	89c00044 	addi	r7,r17,1
  8059e0:	380e913a 	slli	r7,r7,4
  8059e4:	310003cc 	andi	r4,r6,15
  8059e8:	02c000c4 	movi	r11,3
  8059ec:	11c7883a 	add	r3,r2,r7
  8059f0:	29cb883a 	add	r5,r5,r7
  8059f4:	5900212e 	bgeu	r11,r4,805a7c <memcpy+0x140>
  8059f8:	1813883a 	mov	r9,r3
  8059fc:	2811883a 	mov	r8,r5
  805a00:	200f883a 	mov	r7,r4
  805a04:	42800017 	ldw	r10,0(r8)
  805a08:	4a400104 	addi	r9,r9,4
  805a0c:	39ffff04 	addi	r7,r7,-4
  805a10:	4abfff15 	stw	r10,-4(r9)
  805a14:	42000104 	addi	r8,r8,4
  805a18:	59fffa36 	bltu	r11,r7,805a04 <__alt_data_end+0xff805a04>
  805a1c:	213fff04 	addi	r4,r4,-4
  805a20:	2008d0ba 	srli	r4,r4,2
  805a24:	318000cc 	andi	r6,r6,3
  805a28:	21000044 	addi	r4,r4,1
  805a2c:	2109883a 	add	r4,r4,r4
  805a30:	2109883a 	add	r4,r4,r4
  805a34:	1907883a 	add	r3,r3,r4
  805a38:	290b883a 	add	r5,r5,r4
  805a3c:	30000626 	beq	r6,zero,805a58 <memcpy+0x11c>
  805a40:	198d883a 	add	r6,r3,r6
  805a44:	29c00003 	ldbu	r7,0(r5)
  805a48:	18c00044 	addi	r3,r3,1
  805a4c:	29400044 	addi	r5,r5,1
  805a50:	19ffffc5 	stb	r7,-1(r3)
  805a54:	19bffb1e 	bne	r3,r6,805a44 <__alt_data_end+0xff805a44>
  805a58:	dfc00217 	ldw	ra,8(sp)
  805a5c:	dc400117 	ldw	r17,4(sp)
  805a60:	dc000017 	ldw	r16,0(sp)
  805a64:	dec00304 	addi	sp,sp,12
  805a68:	f800283a 	ret
  805a6c:	2007883a 	mov	r3,r4
  805a70:	003ff206 	br	805a3c <__alt_data_end+0xff805a3c>
  805a74:	2007883a 	mov	r3,r4
  805a78:	003ff106 	br	805a40 <__alt_data_end+0xff805a40>
  805a7c:	200d883a 	mov	r6,r4
  805a80:	003fee06 	br	805a3c <__alt_data_end+0xff805a3c>

00805a84 <memset>:
  805a84:	20c000cc 	andi	r3,r4,3
  805a88:	2005883a 	mov	r2,r4
  805a8c:	18004426 	beq	r3,zero,805ba0 <memset+0x11c>
  805a90:	31ffffc4 	addi	r7,r6,-1
  805a94:	30004026 	beq	r6,zero,805b98 <memset+0x114>
  805a98:	2813883a 	mov	r9,r5
  805a9c:	200d883a 	mov	r6,r4
  805aa0:	2007883a 	mov	r3,r4
  805aa4:	00000406 	br	805ab8 <memset+0x34>
  805aa8:	3a3fffc4 	addi	r8,r7,-1
  805aac:	31800044 	addi	r6,r6,1
  805ab0:	38003926 	beq	r7,zero,805b98 <memset+0x114>
  805ab4:	400f883a 	mov	r7,r8
  805ab8:	18c00044 	addi	r3,r3,1
  805abc:	32400005 	stb	r9,0(r6)
  805ac0:	1a0000cc 	andi	r8,r3,3
  805ac4:	403ff81e 	bne	r8,zero,805aa8 <__alt_data_end+0xff805aa8>
  805ac8:	010000c4 	movi	r4,3
  805acc:	21c02d2e 	bgeu	r4,r7,805b84 <memset+0x100>
  805ad0:	29003fcc 	andi	r4,r5,255
  805ad4:	200c923a 	slli	r6,r4,8
  805ad8:	3108b03a 	or	r4,r6,r4
  805adc:	200c943a 	slli	r6,r4,16
  805ae0:	218cb03a 	or	r6,r4,r6
  805ae4:	010003c4 	movi	r4,15
  805ae8:	21c0182e 	bgeu	r4,r7,805b4c <memset+0xc8>
  805aec:	3b3ffc04 	addi	r12,r7,-16
  805af0:	6018d13a 	srli	r12,r12,4
  805af4:	1a000104 	addi	r8,r3,4
  805af8:	1ac00204 	addi	r11,r3,8
  805afc:	6008913a 	slli	r4,r12,4
  805b00:	1a800304 	addi	r10,r3,12
  805b04:	1813883a 	mov	r9,r3
  805b08:	21000504 	addi	r4,r4,20
  805b0c:	1909883a 	add	r4,r3,r4
  805b10:	49800015 	stw	r6,0(r9)
  805b14:	41800015 	stw	r6,0(r8)
  805b18:	59800015 	stw	r6,0(r11)
  805b1c:	51800015 	stw	r6,0(r10)
  805b20:	42000404 	addi	r8,r8,16
  805b24:	4a400404 	addi	r9,r9,16
  805b28:	5ac00404 	addi	r11,r11,16
  805b2c:	52800404 	addi	r10,r10,16
  805b30:	413ff71e 	bne	r8,r4,805b10 <__alt_data_end+0xff805b10>
  805b34:	63000044 	addi	r12,r12,1
  805b38:	6018913a 	slli	r12,r12,4
  805b3c:	39c003cc 	andi	r7,r7,15
  805b40:	010000c4 	movi	r4,3
  805b44:	1b07883a 	add	r3,r3,r12
  805b48:	21c00e2e 	bgeu	r4,r7,805b84 <memset+0x100>
  805b4c:	1813883a 	mov	r9,r3
  805b50:	3811883a 	mov	r8,r7
  805b54:	010000c4 	movi	r4,3
  805b58:	49800015 	stw	r6,0(r9)
  805b5c:	423fff04 	addi	r8,r8,-4
  805b60:	4a400104 	addi	r9,r9,4
  805b64:	223ffc36 	bltu	r4,r8,805b58 <__alt_data_end+0xff805b58>
  805b68:	393fff04 	addi	r4,r7,-4
  805b6c:	2008d0ba 	srli	r4,r4,2
  805b70:	39c000cc 	andi	r7,r7,3
  805b74:	21000044 	addi	r4,r4,1
  805b78:	2109883a 	add	r4,r4,r4
  805b7c:	2109883a 	add	r4,r4,r4
  805b80:	1907883a 	add	r3,r3,r4
  805b84:	38000526 	beq	r7,zero,805b9c <memset+0x118>
  805b88:	19cf883a 	add	r7,r3,r7
  805b8c:	19400005 	stb	r5,0(r3)
  805b90:	18c00044 	addi	r3,r3,1
  805b94:	38fffd1e 	bne	r7,r3,805b8c <__alt_data_end+0xff805b8c>
  805b98:	f800283a 	ret
  805b9c:	f800283a 	ret
  805ba0:	2007883a 	mov	r3,r4
  805ba4:	300f883a 	mov	r7,r6
  805ba8:	003fc706 	br	805ac8 <__alt_data_end+0xff805ac8>

00805bac <_Balloc>:
  805bac:	20801317 	ldw	r2,76(r4)
  805bb0:	defffc04 	addi	sp,sp,-16
  805bb4:	dc400115 	stw	r17,4(sp)
  805bb8:	dc000015 	stw	r16,0(sp)
  805bbc:	dfc00315 	stw	ra,12(sp)
  805bc0:	dc800215 	stw	r18,8(sp)
  805bc4:	2023883a 	mov	r17,r4
  805bc8:	2821883a 	mov	r16,r5
  805bcc:	10000f26 	beq	r2,zero,805c0c <_Balloc+0x60>
  805bd0:	8407883a 	add	r3,r16,r16
  805bd4:	18c7883a 	add	r3,r3,r3
  805bd8:	10c7883a 	add	r3,r2,r3
  805bdc:	18800017 	ldw	r2,0(r3)
  805be0:	10001126 	beq	r2,zero,805c28 <_Balloc+0x7c>
  805be4:	11000017 	ldw	r4,0(r2)
  805be8:	19000015 	stw	r4,0(r3)
  805bec:	10000415 	stw	zero,16(r2)
  805bf0:	10000315 	stw	zero,12(r2)
  805bf4:	dfc00317 	ldw	ra,12(sp)
  805bf8:	dc800217 	ldw	r18,8(sp)
  805bfc:	dc400117 	ldw	r17,4(sp)
  805c00:	dc000017 	ldw	r16,0(sp)
  805c04:	dec00404 	addi	sp,sp,16
  805c08:	f800283a 	ret
  805c0c:	01800844 	movi	r6,33
  805c10:	01400104 	movi	r5,4
  805c14:	080861c0 	call	80861c <_calloc_r>
  805c18:	88801315 	stw	r2,76(r17)
  805c1c:	103fec1e 	bne	r2,zero,805bd0 <__alt_data_end+0xff805bd0>
  805c20:	0005883a 	mov	r2,zero
  805c24:	003ff306 	br	805bf4 <__alt_data_end+0xff805bf4>
  805c28:	01400044 	movi	r5,1
  805c2c:	2c24983a 	sll	r18,r5,r16
  805c30:	8809883a 	mov	r4,r17
  805c34:	91800144 	addi	r6,r18,5
  805c38:	318d883a 	add	r6,r6,r6
  805c3c:	318d883a 	add	r6,r6,r6
  805c40:	080861c0 	call	80861c <_calloc_r>
  805c44:	103ff626 	beq	r2,zero,805c20 <__alt_data_end+0xff805c20>
  805c48:	14000115 	stw	r16,4(r2)
  805c4c:	14800215 	stw	r18,8(r2)
  805c50:	003fe606 	br	805bec <__alt_data_end+0xff805bec>

00805c54 <_Bfree>:
  805c54:	28000826 	beq	r5,zero,805c78 <_Bfree+0x24>
  805c58:	28c00117 	ldw	r3,4(r5)
  805c5c:	20801317 	ldw	r2,76(r4)
  805c60:	18c7883a 	add	r3,r3,r3
  805c64:	18c7883a 	add	r3,r3,r3
  805c68:	10c5883a 	add	r2,r2,r3
  805c6c:	10c00017 	ldw	r3,0(r2)
  805c70:	28c00015 	stw	r3,0(r5)
  805c74:	11400015 	stw	r5,0(r2)
  805c78:	f800283a 	ret

00805c7c <__multadd>:
  805c7c:	defffa04 	addi	sp,sp,-24
  805c80:	dc800315 	stw	r18,12(sp)
  805c84:	dc400215 	stw	r17,8(sp)
  805c88:	dc000115 	stw	r16,4(sp)
  805c8c:	2823883a 	mov	r17,r5
  805c90:	2c000417 	ldw	r16,16(r5)
  805c94:	dfc00515 	stw	ra,20(sp)
  805c98:	dcc00415 	stw	r19,16(sp)
  805c9c:	2025883a 	mov	r18,r4
  805ca0:	29400504 	addi	r5,r5,20
  805ca4:	0011883a 	mov	r8,zero
  805ca8:	28c00017 	ldw	r3,0(r5)
  805cac:	29400104 	addi	r5,r5,4
  805cb0:	42000044 	addi	r8,r8,1
  805cb4:	18bfffcc 	andi	r2,r3,65535
  805cb8:	1185383a 	mul	r2,r2,r6
  805cbc:	1806d43a 	srli	r3,r3,16
  805cc0:	11cf883a 	add	r7,r2,r7
  805cc4:	3808d43a 	srli	r4,r7,16
  805cc8:	1987383a 	mul	r3,r3,r6
  805ccc:	38bfffcc 	andi	r2,r7,65535
  805cd0:	1907883a 	add	r3,r3,r4
  805cd4:	1808943a 	slli	r4,r3,16
  805cd8:	180ed43a 	srli	r7,r3,16
  805cdc:	2085883a 	add	r2,r4,r2
  805ce0:	28bfff15 	stw	r2,-4(r5)
  805ce4:	443ff016 	blt	r8,r16,805ca8 <__alt_data_end+0xff805ca8>
  805ce8:	38000926 	beq	r7,zero,805d10 <__multadd+0x94>
  805cec:	88800217 	ldw	r2,8(r17)
  805cf0:	80800f0e 	bge	r16,r2,805d30 <__multadd+0xb4>
  805cf4:	80800144 	addi	r2,r16,5
  805cf8:	1085883a 	add	r2,r2,r2
  805cfc:	1085883a 	add	r2,r2,r2
  805d00:	8885883a 	add	r2,r17,r2
  805d04:	11c00015 	stw	r7,0(r2)
  805d08:	84000044 	addi	r16,r16,1
  805d0c:	8c000415 	stw	r16,16(r17)
  805d10:	8805883a 	mov	r2,r17
  805d14:	dfc00517 	ldw	ra,20(sp)
  805d18:	dcc00417 	ldw	r19,16(sp)
  805d1c:	dc800317 	ldw	r18,12(sp)
  805d20:	dc400217 	ldw	r17,8(sp)
  805d24:	dc000117 	ldw	r16,4(sp)
  805d28:	dec00604 	addi	sp,sp,24
  805d2c:	f800283a 	ret
  805d30:	89400117 	ldw	r5,4(r17)
  805d34:	9009883a 	mov	r4,r18
  805d38:	d9c00015 	stw	r7,0(sp)
  805d3c:	29400044 	addi	r5,r5,1
  805d40:	0805bac0 	call	805bac <_Balloc>
  805d44:	89800417 	ldw	r6,16(r17)
  805d48:	89400304 	addi	r5,r17,12
  805d4c:	11000304 	addi	r4,r2,12
  805d50:	31800084 	addi	r6,r6,2
  805d54:	318d883a 	add	r6,r6,r6
  805d58:	318d883a 	add	r6,r6,r6
  805d5c:	1027883a 	mov	r19,r2
  805d60:	080593c0 	call	80593c <memcpy>
  805d64:	d9c00017 	ldw	r7,0(sp)
  805d68:	88000a26 	beq	r17,zero,805d94 <__multadd+0x118>
  805d6c:	88c00117 	ldw	r3,4(r17)
  805d70:	90801317 	ldw	r2,76(r18)
  805d74:	18c7883a 	add	r3,r3,r3
  805d78:	18c7883a 	add	r3,r3,r3
  805d7c:	10c5883a 	add	r2,r2,r3
  805d80:	10c00017 	ldw	r3,0(r2)
  805d84:	88c00015 	stw	r3,0(r17)
  805d88:	14400015 	stw	r17,0(r2)
  805d8c:	9823883a 	mov	r17,r19
  805d90:	003fd806 	br	805cf4 <__alt_data_end+0xff805cf4>
  805d94:	9823883a 	mov	r17,r19
  805d98:	003fd606 	br	805cf4 <__alt_data_end+0xff805cf4>

00805d9c <__s2b>:
  805d9c:	defff904 	addi	sp,sp,-28
  805da0:	dc400115 	stw	r17,4(sp)
  805da4:	dc000015 	stw	r16,0(sp)
  805da8:	2023883a 	mov	r17,r4
  805dac:	2821883a 	mov	r16,r5
  805db0:	39000204 	addi	r4,r7,8
  805db4:	01400244 	movi	r5,9
  805db8:	dcc00315 	stw	r19,12(sp)
  805dbc:	dc800215 	stw	r18,8(sp)
  805dc0:	dfc00615 	stw	ra,24(sp)
  805dc4:	dd400515 	stw	r21,20(sp)
  805dc8:	dd000415 	stw	r20,16(sp)
  805dcc:	3825883a 	mov	r18,r7
  805dd0:	3027883a 	mov	r19,r6
  805dd4:	080a4c80 	call	80a4c8 <__divsi3>
  805dd8:	00c00044 	movi	r3,1
  805ddc:	000b883a 	mov	r5,zero
  805de0:	1880030e 	bge	r3,r2,805df0 <__s2b+0x54>
  805de4:	18c7883a 	add	r3,r3,r3
  805de8:	29400044 	addi	r5,r5,1
  805dec:	18bffd16 	blt	r3,r2,805de4 <__alt_data_end+0xff805de4>
  805df0:	8809883a 	mov	r4,r17
  805df4:	0805bac0 	call	805bac <_Balloc>
  805df8:	d8c00717 	ldw	r3,28(sp)
  805dfc:	10c00515 	stw	r3,20(r2)
  805e00:	00c00044 	movi	r3,1
  805e04:	10c00415 	stw	r3,16(r2)
  805e08:	00c00244 	movi	r3,9
  805e0c:	1cc0210e 	bge	r3,r19,805e94 <__s2b+0xf8>
  805e10:	80eb883a 	add	r21,r16,r3
  805e14:	a829883a 	mov	r20,r21
  805e18:	84e1883a 	add	r16,r16,r19
  805e1c:	a1c00007 	ldb	r7,0(r20)
  805e20:	01800284 	movi	r6,10
  805e24:	a5000044 	addi	r20,r20,1
  805e28:	100b883a 	mov	r5,r2
  805e2c:	39fff404 	addi	r7,r7,-48
  805e30:	8809883a 	mov	r4,r17
  805e34:	0805c7c0 	call	805c7c <__multadd>
  805e38:	a43ff81e 	bne	r20,r16,805e1c <__alt_data_end+0xff805e1c>
  805e3c:	ace1883a 	add	r16,r21,r19
  805e40:	843ffe04 	addi	r16,r16,-8
  805e44:	9c800a0e 	bge	r19,r18,805e70 <__s2b+0xd4>
  805e48:	94e5c83a 	sub	r18,r18,r19
  805e4c:	84a5883a 	add	r18,r16,r18
  805e50:	81c00007 	ldb	r7,0(r16)
  805e54:	01800284 	movi	r6,10
  805e58:	84000044 	addi	r16,r16,1
  805e5c:	100b883a 	mov	r5,r2
  805e60:	39fff404 	addi	r7,r7,-48
  805e64:	8809883a 	mov	r4,r17
  805e68:	0805c7c0 	call	805c7c <__multadd>
  805e6c:	84bff81e 	bne	r16,r18,805e50 <__alt_data_end+0xff805e50>
  805e70:	dfc00617 	ldw	ra,24(sp)
  805e74:	dd400517 	ldw	r21,20(sp)
  805e78:	dd000417 	ldw	r20,16(sp)
  805e7c:	dcc00317 	ldw	r19,12(sp)
  805e80:	dc800217 	ldw	r18,8(sp)
  805e84:	dc400117 	ldw	r17,4(sp)
  805e88:	dc000017 	ldw	r16,0(sp)
  805e8c:	dec00704 	addi	sp,sp,28
  805e90:	f800283a 	ret
  805e94:	84000284 	addi	r16,r16,10
  805e98:	1827883a 	mov	r19,r3
  805e9c:	003fe906 	br	805e44 <__alt_data_end+0xff805e44>

00805ea0 <__hi0bits>:
  805ea0:	20bfffec 	andhi	r2,r4,65535
  805ea4:	1000141e 	bne	r2,zero,805ef8 <__hi0bits+0x58>
  805ea8:	2008943a 	slli	r4,r4,16
  805eac:	00800404 	movi	r2,16
  805eb0:	20ffc02c 	andhi	r3,r4,65280
  805eb4:	1800021e 	bne	r3,zero,805ec0 <__hi0bits+0x20>
  805eb8:	2008923a 	slli	r4,r4,8
  805ebc:	10800204 	addi	r2,r2,8
  805ec0:	20fc002c 	andhi	r3,r4,61440
  805ec4:	1800021e 	bne	r3,zero,805ed0 <__hi0bits+0x30>
  805ec8:	2008913a 	slli	r4,r4,4
  805ecc:	10800104 	addi	r2,r2,4
  805ed0:	20f0002c 	andhi	r3,r4,49152
  805ed4:	1800031e 	bne	r3,zero,805ee4 <__hi0bits+0x44>
  805ed8:	2109883a 	add	r4,r4,r4
  805edc:	10800084 	addi	r2,r2,2
  805ee0:	2109883a 	add	r4,r4,r4
  805ee4:	20000316 	blt	r4,zero,805ef4 <__hi0bits+0x54>
  805ee8:	2110002c 	andhi	r4,r4,16384
  805eec:	2000041e 	bne	r4,zero,805f00 <__hi0bits+0x60>
  805ef0:	00800804 	movi	r2,32
  805ef4:	f800283a 	ret
  805ef8:	0005883a 	mov	r2,zero
  805efc:	003fec06 	br	805eb0 <__alt_data_end+0xff805eb0>
  805f00:	10800044 	addi	r2,r2,1
  805f04:	f800283a 	ret

00805f08 <__lo0bits>:
  805f08:	20c00017 	ldw	r3,0(r4)
  805f0c:	188001cc 	andi	r2,r3,7
  805f10:	10000826 	beq	r2,zero,805f34 <__lo0bits+0x2c>
  805f14:	1880004c 	andi	r2,r3,1
  805f18:	1000211e 	bne	r2,zero,805fa0 <__lo0bits+0x98>
  805f1c:	1880008c 	andi	r2,r3,2
  805f20:	1000211e 	bne	r2,zero,805fa8 <__lo0bits+0xa0>
  805f24:	1806d0ba 	srli	r3,r3,2
  805f28:	00800084 	movi	r2,2
  805f2c:	20c00015 	stw	r3,0(r4)
  805f30:	f800283a 	ret
  805f34:	18bfffcc 	andi	r2,r3,65535
  805f38:	10001326 	beq	r2,zero,805f88 <__lo0bits+0x80>
  805f3c:	0005883a 	mov	r2,zero
  805f40:	19403fcc 	andi	r5,r3,255
  805f44:	2800021e 	bne	r5,zero,805f50 <__lo0bits+0x48>
  805f48:	1806d23a 	srli	r3,r3,8
  805f4c:	10800204 	addi	r2,r2,8
  805f50:	194003cc 	andi	r5,r3,15
  805f54:	2800021e 	bne	r5,zero,805f60 <__lo0bits+0x58>
  805f58:	1806d13a 	srli	r3,r3,4
  805f5c:	10800104 	addi	r2,r2,4
  805f60:	194000cc 	andi	r5,r3,3
  805f64:	2800021e 	bne	r5,zero,805f70 <__lo0bits+0x68>
  805f68:	1806d0ba 	srli	r3,r3,2
  805f6c:	10800084 	addi	r2,r2,2
  805f70:	1940004c 	andi	r5,r3,1
  805f74:	2800081e 	bne	r5,zero,805f98 <__lo0bits+0x90>
  805f78:	1806d07a 	srli	r3,r3,1
  805f7c:	1800051e 	bne	r3,zero,805f94 <__lo0bits+0x8c>
  805f80:	00800804 	movi	r2,32
  805f84:	f800283a 	ret
  805f88:	1806d43a 	srli	r3,r3,16
  805f8c:	00800404 	movi	r2,16
  805f90:	003feb06 	br	805f40 <__alt_data_end+0xff805f40>
  805f94:	10800044 	addi	r2,r2,1
  805f98:	20c00015 	stw	r3,0(r4)
  805f9c:	f800283a 	ret
  805fa0:	0005883a 	mov	r2,zero
  805fa4:	f800283a 	ret
  805fa8:	1806d07a 	srli	r3,r3,1
  805fac:	00800044 	movi	r2,1
  805fb0:	20c00015 	stw	r3,0(r4)
  805fb4:	f800283a 	ret

00805fb8 <__i2b>:
  805fb8:	defffd04 	addi	sp,sp,-12
  805fbc:	dc000015 	stw	r16,0(sp)
  805fc0:	04000044 	movi	r16,1
  805fc4:	dc400115 	stw	r17,4(sp)
  805fc8:	2823883a 	mov	r17,r5
  805fcc:	800b883a 	mov	r5,r16
  805fd0:	dfc00215 	stw	ra,8(sp)
  805fd4:	0805bac0 	call	805bac <_Balloc>
  805fd8:	14400515 	stw	r17,20(r2)
  805fdc:	14000415 	stw	r16,16(r2)
  805fe0:	dfc00217 	ldw	ra,8(sp)
  805fe4:	dc400117 	ldw	r17,4(sp)
  805fe8:	dc000017 	ldw	r16,0(sp)
  805fec:	dec00304 	addi	sp,sp,12
  805ff0:	f800283a 	ret

00805ff4 <__multiply>:
  805ff4:	defffa04 	addi	sp,sp,-24
  805ff8:	dcc00315 	stw	r19,12(sp)
  805ffc:	dc800215 	stw	r18,8(sp)
  806000:	34c00417 	ldw	r19,16(r6)
  806004:	2c800417 	ldw	r18,16(r5)
  806008:	dd000415 	stw	r20,16(sp)
  80600c:	dc400115 	stw	r17,4(sp)
  806010:	dfc00515 	stw	ra,20(sp)
  806014:	dc000015 	stw	r16,0(sp)
  806018:	2829883a 	mov	r20,r5
  80601c:	3023883a 	mov	r17,r6
  806020:	94c0050e 	bge	r18,r19,806038 <__multiply+0x44>
  806024:	9007883a 	mov	r3,r18
  806028:	3029883a 	mov	r20,r6
  80602c:	9825883a 	mov	r18,r19
  806030:	2823883a 	mov	r17,r5
  806034:	1827883a 	mov	r19,r3
  806038:	a0800217 	ldw	r2,8(r20)
  80603c:	94e1883a 	add	r16,r18,r19
  806040:	a1400117 	ldw	r5,4(r20)
  806044:	1400010e 	bge	r2,r16,80604c <__multiply+0x58>
  806048:	29400044 	addi	r5,r5,1
  80604c:	0805bac0 	call	805bac <_Balloc>
  806050:	8415883a 	add	r10,r16,r16
  806054:	12c00504 	addi	r11,r2,20
  806058:	5295883a 	add	r10,r10,r10
  80605c:	5a95883a 	add	r10,r11,r10
  806060:	5807883a 	mov	r3,r11
  806064:	5a80032e 	bgeu	r11,r10,806074 <__multiply+0x80>
  806068:	18000015 	stw	zero,0(r3)
  80606c:	18c00104 	addi	r3,r3,4
  806070:	1abffd36 	bltu	r3,r10,806068 <__alt_data_end+0xff806068>
  806074:	9ce7883a 	add	r19,r19,r19
  806078:	94a5883a 	add	r18,r18,r18
  80607c:	89800504 	addi	r6,r17,20
  806080:	9ce7883a 	add	r19,r19,r19
  806084:	a3400504 	addi	r13,r20,20
  806088:	94a5883a 	add	r18,r18,r18
  80608c:	34d9883a 	add	r12,r6,r19
  806090:	6c93883a 	add	r9,r13,r18
  806094:	3300422e 	bgeu	r6,r12,8061a0 <__multiply+0x1ac>
  806098:	37c00017 	ldw	ra,0(r6)
  80609c:	fbffffcc 	andi	r15,ra,65535
  8060a0:	78001b26 	beq	r15,zero,806110 <__multiply+0x11c>
  8060a4:	5811883a 	mov	r8,r11
  8060a8:	681d883a 	mov	r14,r13
  8060ac:	000f883a 	mov	r7,zero
  8060b0:	71000017 	ldw	r4,0(r14)
  8060b4:	40c00017 	ldw	r3,0(r8)
  8060b8:	73800104 	addi	r14,r14,4
  8060bc:	217fffcc 	andi	r5,r4,65535
  8060c0:	2bcb383a 	mul	r5,r5,r15
  8060c4:	2008d43a 	srli	r4,r4,16
  8060c8:	1c7fffcc 	andi	r17,r3,65535
  8060cc:	2c4b883a 	add	r5,r5,r17
  8060d0:	29cb883a 	add	r5,r5,r7
  8060d4:	23c9383a 	mul	r4,r4,r15
  8060d8:	1806d43a 	srli	r3,r3,16
  8060dc:	280ed43a 	srli	r7,r5,16
  8060e0:	297fffcc 	andi	r5,r5,65535
  8060e4:	20c7883a 	add	r3,r4,r3
  8060e8:	19c7883a 	add	r3,r3,r7
  8060ec:	1808943a 	slli	r4,r3,16
  8060f0:	4023883a 	mov	r17,r8
  8060f4:	180ed43a 	srli	r7,r3,16
  8060f8:	214ab03a 	or	r5,r4,r5
  8060fc:	41400015 	stw	r5,0(r8)
  806100:	42000104 	addi	r8,r8,4
  806104:	727fea36 	bltu	r14,r9,8060b0 <__alt_data_end+0xff8060b0>
  806108:	89c00115 	stw	r7,4(r17)
  80610c:	37c00017 	ldw	ra,0(r6)
  806110:	f83ed43a 	srli	ra,ra,16
  806114:	f8001f26 	beq	ra,zero,806194 <__multiply+0x1a0>
  806118:	58c00017 	ldw	r3,0(r11)
  80611c:	681d883a 	mov	r14,r13
  806120:	581f883a 	mov	r15,r11
  806124:	1811883a 	mov	r8,r3
  806128:	5825883a 	mov	r18,r11
  80612c:	000f883a 	mov	r7,zero
  806130:	00000106 	br	806138 <__multiply+0x144>
  806134:	8825883a 	mov	r18,r17
  806138:	7140000b 	ldhu	r5,0(r14)
  80613c:	4010d43a 	srli	r8,r8,16
  806140:	193fffcc 	andi	r4,r3,65535
  806144:	2fcb383a 	mul	r5,r5,ra
  806148:	7bc00104 	addi	r15,r15,4
  80614c:	73800104 	addi	r14,r14,4
  806150:	2a0b883a 	add	r5,r5,r8
  806154:	29cb883a 	add	r5,r5,r7
  806158:	2806943a 	slli	r3,r5,16
  80615c:	94400104 	addi	r17,r18,4
  806160:	280ad43a 	srli	r5,r5,16
  806164:	1908b03a 	or	r4,r3,r4
  806168:	793fff15 	stw	r4,-4(r15)
  80616c:	70ffff17 	ldw	r3,-4(r14)
  806170:	8a000017 	ldw	r8,0(r17)
  806174:	1806d43a 	srli	r3,r3,16
  806178:	413fffcc 	andi	r4,r8,65535
  80617c:	1fc7383a 	mul	r3,r3,ra
  806180:	1907883a 	add	r3,r3,r4
  806184:	1947883a 	add	r3,r3,r5
  806188:	180ed43a 	srli	r7,r3,16
  80618c:	727fe936 	bltu	r14,r9,806134 <__alt_data_end+0xff806134>
  806190:	90c00115 	stw	r3,4(r18)
  806194:	31800104 	addi	r6,r6,4
  806198:	5ac00104 	addi	r11,r11,4
  80619c:	333fbe36 	bltu	r6,r12,806098 <__alt_data_end+0xff806098>
  8061a0:	0400090e 	bge	zero,r16,8061c8 <__multiply+0x1d4>
  8061a4:	50ffff17 	ldw	r3,-4(r10)
  8061a8:	52bfff04 	addi	r10,r10,-4
  8061ac:	18000326 	beq	r3,zero,8061bc <__multiply+0x1c8>
  8061b0:	00000506 	br	8061c8 <__multiply+0x1d4>
  8061b4:	50c00017 	ldw	r3,0(r10)
  8061b8:	1800031e 	bne	r3,zero,8061c8 <__multiply+0x1d4>
  8061bc:	843fffc4 	addi	r16,r16,-1
  8061c0:	52bfff04 	addi	r10,r10,-4
  8061c4:	803ffb1e 	bne	r16,zero,8061b4 <__alt_data_end+0xff8061b4>
  8061c8:	14000415 	stw	r16,16(r2)
  8061cc:	dfc00517 	ldw	ra,20(sp)
  8061d0:	dd000417 	ldw	r20,16(sp)
  8061d4:	dcc00317 	ldw	r19,12(sp)
  8061d8:	dc800217 	ldw	r18,8(sp)
  8061dc:	dc400117 	ldw	r17,4(sp)
  8061e0:	dc000017 	ldw	r16,0(sp)
  8061e4:	dec00604 	addi	sp,sp,24
  8061e8:	f800283a 	ret

008061ec <__pow5mult>:
  8061ec:	defffa04 	addi	sp,sp,-24
  8061f0:	dcc00315 	stw	r19,12(sp)
  8061f4:	dc000015 	stw	r16,0(sp)
  8061f8:	dfc00515 	stw	ra,20(sp)
  8061fc:	dd000415 	stw	r20,16(sp)
  806200:	dc800215 	stw	r18,8(sp)
  806204:	dc400115 	stw	r17,4(sp)
  806208:	308000cc 	andi	r2,r6,3
  80620c:	3021883a 	mov	r16,r6
  806210:	2027883a 	mov	r19,r4
  806214:	10002f1e 	bne	r2,zero,8062d4 <__pow5mult+0xe8>
  806218:	2825883a 	mov	r18,r5
  80621c:	8021d0ba 	srai	r16,r16,2
  806220:	80001a26 	beq	r16,zero,80628c <__pow5mult+0xa0>
  806224:	9c401217 	ldw	r17,72(r19)
  806228:	8800061e 	bne	r17,zero,806244 <__pow5mult+0x58>
  80622c:	00003406 	br	806300 <__pow5mult+0x114>
  806230:	8021d07a 	srai	r16,r16,1
  806234:	80001526 	beq	r16,zero,80628c <__pow5mult+0xa0>
  806238:	88800017 	ldw	r2,0(r17)
  80623c:	10001c26 	beq	r2,zero,8062b0 <__pow5mult+0xc4>
  806240:	1023883a 	mov	r17,r2
  806244:	8080004c 	andi	r2,r16,1
  806248:	103ff926 	beq	r2,zero,806230 <__alt_data_end+0xff806230>
  80624c:	880d883a 	mov	r6,r17
  806250:	900b883a 	mov	r5,r18
  806254:	9809883a 	mov	r4,r19
  806258:	0805ff40 	call	805ff4 <__multiply>
  80625c:	90001b26 	beq	r18,zero,8062cc <__pow5mult+0xe0>
  806260:	91000117 	ldw	r4,4(r18)
  806264:	98c01317 	ldw	r3,76(r19)
  806268:	8021d07a 	srai	r16,r16,1
  80626c:	2109883a 	add	r4,r4,r4
  806270:	2109883a 	add	r4,r4,r4
  806274:	1907883a 	add	r3,r3,r4
  806278:	19000017 	ldw	r4,0(r3)
  80627c:	91000015 	stw	r4,0(r18)
  806280:	1c800015 	stw	r18,0(r3)
  806284:	1025883a 	mov	r18,r2
  806288:	803feb1e 	bne	r16,zero,806238 <__alt_data_end+0xff806238>
  80628c:	9005883a 	mov	r2,r18
  806290:	dfc00517 	ldw	ra,20(sp)
  806294:	dd000417 	ldw	r20,16(sp)
  806298:	dcc00317 	ldw	r19,12(sp)
  80629c:	dc800217 	ldw	r18,8(sp)
  8062a0:	dc400117 	ldw	r17,4(sp)
  8062a4:	dc000017 	ldw	r16,0(sp)
  8062a8:	dec00604 	addi	sp,sp,24
  8062ac:	f800283a 	ret
  8062b0:	880d883a 	mov	r6,r17
  8062b4:	880b883a 	mov	r5,r17
  8062b8:	9809883a 	mov	r4,r19
  8062bc:	0805ff40 	call	805ff4 <__multiply>
  8062c0:	88800015 	stw	r2,0(r17)
  8062c4:	10000015 	stw	zero,0(r2)
  8062c8:	003fdd06 	br	806240 <__alt_data_end+0xff806240>
  8062cc:	1025883a 	mov	r18,r2
  8062d0:	003fd706 	br	806230 <__alt_data_end+0xff806230>
  8062d4:	10bfffc4 	addi	r2,r2,-1
  8062d8:	1085883a 	add	r2,r2,r2
  8062dc:	00c02074 	movhi	r3,129
  8062e0:	18c15504 	addi	r3,r3,1364
  8062e4:	1085883a 	add	r2,r2,r2
  8062e8:	1885883a 	add	r2,r3,r2
  8062ec:	11800017 	ldw	r6,0(r2)
  8062f0:	000f883a 	mov	r7,zero
  8062f4:	0805c7c0 	call	805c7c <__multadd>
  8062f8:	1025883a 	mov	r18,r2
  8062fc:	003fc706 	br	80621c <__alt_data_end+0xff80621c>
  806300:	05000044 	movi	r20,1
  806304:	a00b883a 	mov	r5,r20
  806308:	9809883a 	mov	r4,r19
  80630c:	0805bac0 	call	805bac <_Balloc>
  806310:	1023883a 	mov	r17,r2
  806314:	00809c44 	movi	r2,625
  806318:	88800515 	stw	r2,20(r17)
  80631c:	8d000415 	stw	r20,16(r17)
  806320:	9c401215 	stw	r17,72(r19)
  806324:	88000015 	stw	zero,0(r17)
  806328:	003fc606 	br	806244 <__alt_data_end+0xff806244>

0080632c <__lshift>:
  80632c:	defff904 	addi	sp,sp,-28
  806330:	dd400515 	stw	r21,20(sp)
  806334:	dcc00315 	stw	r19,12(sp)
  806338:	302bd17a 	srai	r21,r6,5
  80633c:	2cc00417 	ldw	r19,16(r5)
  806340:	28800217 	ldw	r2,8(r5)
  806344:	dd000415 	stw	r20,16(sp)
  806348:	ace7883a 	add	r19,r21,r19
  80634c:	dc800215 	stw	r18,8(sp)
  806350:	dc400115 	stw	r17,4(sp)
  806354:	dc000015 	stw	r16,0(sp)
  806358:	dfc00615 	stw	ra,24(sp)
  80635c:	9c000044 	addi	r16,r19,1
  806360:	2823883a 	mov	r17,r5
  806364:	3029883a 	mov	r20,r6
  806368:	2025883a 	mov	r18,r4
  80636c:	29400117 	ldw	r5,4(r5)
  806370:	1400030e 	bge	r2,r16,806380 <__lshift+0x54>
  806374:	1085883a 	add	r2,r2,r2
  806378:	29400044 	addi	r5,r5,1
  80637c:	143ffd16 	blt	r2,r16,806374 <__alt_data_end+0xff806374>
  806380:	9009883a 	mov	r4,r18
  806384:	0805bac0 	call	805bac <_Balloc>
  806388:	10c00504 	addi	r3,r2,20
  80638c:	0540070e 	bge	zero,r21,8063ac <__lshift+0x80>
  806390:	ad6b883a 	add	r21,r21,r21
  806394:	ad6b883a 	add	r21,r21,r21
  806398:	1809883a 	mov	r4,r3
  80639c:	1d47883a 	add	r3,r3,r21
  8063a0:	20000015 	stw	zero,0(r4)
  8063a4:	21000104 	addi	r4,r4,4
  8063a8:	193ffd1e 	bne	r3,r4,8063a0 <__alt_data_end+0xff8063a0>
  8063ac:	8a000417 	ldw	r8,16(r17)
  8063b0:	89000504 	addi	r4,r17,20
  8063b4:	a18007cc 	andi	r6,r20,31
  8063b8:	4211883a 	add	r8,r8,r8
  8063bc:	4211883a 	add	r8,r8,r8
  8063c0:	2211883a 	add	r8,r4,r8
  8063c4:	30002326 	beq	r6,zero,806454 <__lshift+0x128>
  8063c8:	02400804 	movi	r9,32
  8063cc:	4993c83a 	sub	r9,r9,r6
  8063d0:	000b883a 	mov	r5,zero
  8063d4:	21c00017 	ldw	r7,0(r4)
  8063d8:	1815883a 	mov	r10,r3
  8063dc:	18c00104 	addi	r3,r3,4
  8063e0:	398e983a 	sll	r7,r7,r6
  8063e4:	21000104 	addi	r4,r4,4
  8063e8:	394ab03a 	or	r5,r7,r5
  8063ec:	197fff15 	stw	r5,-4(r3)
  8063f0:	217fff17 	ldw	r5,-4(r4)
  8063f4:	2a4ad83a 	srl	r5,r5,r9
  8063f8:	223ff636 	bltu	r4,r8,8063d4 <__alt_data_end+0xff8063d4>
  8063fc:	51400115 	stw	r5,4(r10)
  806400:	28001a1e 	bne	r5,zero,80646c <__lshift+0x140>
  806404:	843fffc4 	addi	r16,r16,-1
  806408:	14000415 	stw	r16,16(r2)
  80640c:	88000826 	beq	r17,zero,806430 <__lshift+0x104>
  806410:	89000117 	ldw	r4,4(r17)
  806414:	90c01317 	ldw	r3,76(r18)
  806418:	2109883a 	add	r4,r4,r4
  80641c:	2109883a 	add	r4,r4,r4
  806420:	1907883a 	add	r3,r3,r4
  806424:	19000017 	ldw	r4,0(r3)
  806428:	89000015 	stw	r4,0(r17)
  80642c:	1c400015 	stw	r17,0(r3)
  806430:	dfc00617 	ldw	ra,24(sp)
  806434:	dd400517 	ldw	r21,20(sp)
  806438:	dd000417 	ldw	r20,16(sp)
  80643c:	dcc00317 	ldw	r19,12(sp)
  806440:	dc800217 	ldw	r18,8(sp)
  806444:	dc400117 	ldw	r17,4(sp)
  806448:	dc000017 	ldw	r16,0(sp)
  80644c:	dec00704 	addi	sp,sp,28
  806450:	f800283a 	ret
  806454:	21400017 	ldw	r5,0(r4)
  806458:	18c00104 	addi	r3,r3,4
  80645c:	21000104 	addi	r4,r4,4
  806460:	197fff15 	stw	r5,-4(r3)
  806464:	223ffb36 	bltu	r4,r8,806454 <__alt_data_end+0xff806454>
  806468:	003fe606 	br	806404 <__alt_data_end+0xff806404>
  80646c:	9c000084 	addi	r16,r19,2
  806470:	003fe406 	br	806404 <__alt_data_end+0xff806404>

00806474 <__mcmp>:
  806474:	20800417 	ldw	r2,16(r4)
  806478:	28c00417 	ldw	r3,16(r5)
  80647c:	10c5c83a 	sub	r2,r2,r3
  806480:	1000111e 	bne	r2,zero,8064c8 <__mcmp+0x54>
  806484:	18c7883a 	add	r3,r3,r3
  806488:	18c7883a 	add	r3,r3,r3
  80648c:	21000504 	addi	r4,r4,20
  806490:	29400504 	addi	r5,r5,20
  806494:	20c5883a 	add	r2,r4,r3
  806498:	28cb883a 	add	r5,r5,r3
  80649c:	00000106 	br	8064a4 <__mcmp+0x30>
  8064a0:	20800a2e 	bgeu	r4,r2,8064cc <__mcmp+0x58>
  8064a4:	10bfff04 	addi	r2,r2,-4
  8064a8:	297fff04 	addi	r5,r5,-4
  8064ac:	11800017 	ldw	r6,0(r2)
  8064b0:	28c00017 	ldw	r3,0(r5)
  8064b4:	30fffa26 	beq	r6,r3,8064a0 <__alt_data_end+0xff8064a0>
  8064b8:	30c00236 	bltu	r6,r3,8064c4 <__mcmp+0x50>
  8064bc:	00800044 	movi	r2,1
  8064c0:	f800283a 	ret
  8064c4:	00bfffc4 	movi	r2,-1
  8064c8:	f800283a 	ret
  8064cc:	0005883a 	mov	r2,zero
  8064d0:	f800283a 	ret

008064d4 <__mdiff>:
  8064d4:	28c00417 	ldw	r3,16(r5)
  8064d8:	30800417 	ldw	r2,16(r6)
  8064dc:	defffa04 	addi	sp,sp,-24
  8064e0:	dcc00315 	stw	r19,12(sp)
  8064e4:	dc800215 	stw	r18,8(sp)
  8064e8:	dfc00515 	stw	ra,20(sp)
  8064ec:	dd000415 	stw	r20,16(sp)
  8064f0:	dc400115 	stw	r17,4(sp)
  8064f4:	dc000015 	stw	r16,0(sp)
  8064f8:	1887c83a 	sub	r3,r3,r2
  8064fc:	2825883a 	mov	r18,r5
  806500:	3027883a 	mov	r19,r6
  806504:	1800141e 	bne	r3,zero,806558 <__mdiff+0x84>
  806508:	1085883a 	add	r2,r2,r2
  80650c:	1085883a 	add	r2,r2,r2
  806510:	2a000504 	addi	r8,r5,20
  806514:	34000504 	addi	r16,r6,20
  806518:	4087883a 	add	r3,r8,r2
  80651c:	8085883a 	add	r2,r16,r2
  806520:	00000106 	br	806528 <__mdiff+0x54>
  806524:	40c0592e 	bgeu	r8,r3,80668c <__mdiff+0x1b8>
  806528:	18ffff04 	addi	r3,r3,-4
  80652c:	10bfff04 	addi	r2,r2,-4
  806530:	19c00017 	ldw	r7,0(r3)
  806534:	11400017 	ldw	r5,0(r2)
  806538:	397ffa26 	beq	r7,r5,806524 <__alt_data_end+0xff806524>
  80653c:	3940592e 	bgeu	r7,r5,8066a4 <__mdiff+0x1d0>
  806540:	9005883a 	mov	r2,r18
  806544:	4023883a 	mov	r17,r8
  806548:	9825883a 	mov	r18,r19
  80654c:	05000044 	movi	r20,1
  806550:	1027883a 	mov	r19,r2
  806554:	00000406 	br	806568 <__mdiff+0x94>
  806558:	18005616 	blt	r3,zero,8066b4 <__mdiff+0x1e0>
  80655c:	34400504 	addi	r17,r6,20
  806560:	2c000504 	addi	r16,r5,20
  806564:	0029883a 	mov	r20,zero
  806568:	91400117 	ldw	r5,4(r18)
  80656c:	0805bac0 	call	805bac <_Balloc>
  806570:	92400417 	ldw	r9,16(r18)
  806574:	9b000417 	ldw	r12,16(r19)
  806578:	12c00504 	addi	r11,r2,20
  80657c:	4a51883a 	add	r8,r9,r9
  806580:	6319883a 	add	r12,r12,r12
  806584:	4211883a 	add	r8,r8,r8
  806588:	6319883a 	add	r12,r12,r12
  80658c:	15000315 	stw	r20,12(r2)
  806590:	8211883a 	add	r8,r16,r8
  806594:	8b19883a 	add	r12,r17,r12
  806598:	0007883a 	mov	r3,zero
  80659c:	81400017 	ldw	r5,0(r16)
  8065a0:	89c00017 	ldw	r7,0(r17)
  8065a4:	59800104 	addi	r6,r11,4
  8065a8:	293fffcc 	andi	r4,r5,65535
  8065ac:	20c7883a 	add	r3,r4,r3
  8065b0:	393fffcc 	andi	r4,r7,65535
  8065b4:	1909c83a 	sub	r4,r3,r4
  8065b8:	280ad43a 	srli	r5,r5,16
  8065bc:	380ed43a 	srli	r7,r7,16
  8065c0:	2007d43a 	srai	r3,r4,16
  8065c4:	213fffcc 	andi	r4,r4,65535
  8065c8:	29cbc83a 	sub	r5,r5,r7
  8065cc:	28c7883a 	add	r3,r5,r3
  8065d0:	180a943a 	slli	r5,r3,16
  8065d4:	8c400104 	addi	r17,r17,4
  8065d8:	84000104 	addi	r16,r16,4
  8065dc:	2908b03a 	or	r4,r5,r4
  8065e0:	59000015 	stw	r4,0(r11)
  8065e4:	1807d43a 	srai	r3,r3,16
  8065e8:	3015883a 	mov	r10,r6
  8065ec:	3017883a 	mov	r11,r6
  8065f0:	8b3fea36 	bltu	r17,r12,80659c <__alt_data_end+0xff80659c>
  8065f4:	8200162e 	bgeu	r16,r8,806650 <__mdiff+0x17c>
  8065f8:	8017883a 	mov	r11,r16
  8065fc:	59400017 	ldw	r5,0(r11)
  806600:	31800104 	addi	r6,r6,4
  806604:	5ac00104 	addi	r11,r11,4
  806608:	293fffcc 	andi	r4,r5,65535
  80660c:	20c7883a 	add	r3,r4,r3
  806610:	280ed43a 	srli	r7,r5,16
  806614:	180bd43a 	srai	r5,r3,16
  806618:	193fffcc 	andi	r4,r3,65535
  80661c:	3947883a 	add	r3,r7,r5
  806620:	180a943a 	slli	r5,r3,16
  806624:	1807d43a 	srai	r3,r3,16
  806628:	2908b03a 	or	r4,r5,r4
  80662c:	313fff15 	stw	r4,-4(r6)
  806630:	5a3ff236 	bltu	r11,r8,8065fc <__alt_data_end+0xff8065fc>
  806634:	0406303a 	nor	r3,zero,r16
  806638:	1a07883a 	add	r3,r3,r8
  80663c:	1806d0ba 	srli	r3,r3,2
  806640:	18c00044 	addi	r3,r3,1
  806644:	18c7883a 	add	r3,r3,r3
  806648:	18c7883a 	add	r3,r3,r3
  80664c:	50d5883a 	add	r10,r10,r3
  806650:	50ffff04 	addi	r3,r10,-4
  806654:	2000041e 	bne	r4,zero,806668 <__mdiff+0x194>
  806658:	18ffff04 	addi	r3,r3,-4
  80665c:	19000017 	ldw	r4,0(r3)
  806660:	4a7fffc4 	addi	r9,r9,-1
  806664:	203ffc26 	beq	r4,zero,806658 <__alt_data_end+0xff806658>
  806668:	12400415 	stw	r9,16(r2)
  80666c:	dfc00517 	ldw	ra,20(sp)
  806670:	dd000417 	ldw	r20,16(sp)
  806674:	dcc00317 	ldw	r19,12(sp)
  806678:	dc800217 	ldw	r18,8(sp)
  80667c:	dc400117 	ldw	r17,4(sp)
  806680:	dc000017 	ldw	r16,0(sp)
  806684:	dec00604 	addi	sp,sp,24
  806688:	f800283a 	ret
  80668c:	000b883a 	mov	r5,zero
  806690:	0805bac0 	call	805bac <_Balloc>
  806694:	00c00044 	movi	r3,1
  806698:	10c00415 	stw	r3,16(r2)
  80669c:	10000515 	stw	zero,20(r2)
  8066a0:	003ff206 	br	80666c <__alt_data_end+0xff80666c>
  8066a4:	8023883a 	mov	r17,r16
  8066a8:	0029883a 	mov	r20,zero
  8066ac:	4021883a 	mov	r16,r8
  8066b0:	003fad06 	br	806568 <__alt_data_end+0xff806568>
  8066b4:	9005883a 	mov	r2,r18
  8066b8:	94400504 	addi	r17,r18,20
  8066bc:	9c000504 	addi	r16,r19,20
  8066c0:	9825883a 	mov	r18,r19
  8066c4:	05000044 	movi	r20,1
  8066c8:	1027883a 	mov	r19,r2
  8066cc:	003fa606 	br	806568 <__alt_data_end+0xff806568>

008066d0 <__ulp>:
  8066d0:	295ffc2c 	andhi	r5,r5,32752
  8066d4:	00bf3034 	movhi	r2,64704
  8066d8:	2887883a 	add	r3,r5,r2
  8066dc:	00c0020e 	bge	zero,r3,8066e8 <__ulp+0x18>
  8066e0:	0005883a 	mov	r2,zero
  8066e4:	f800283a 	ret
  8066e8:	00c7c83a 	sub	r3,zero,r3
  8066ec:	1807d53a 	srai	r3,r3,20
  8066f0:	008004c4 	movi	r2,19
  8066f4:	10c00b0e 	bge	r2,r3,806724 <__ulp+0x54>
  8066f8:	18bffb04 	addi	r2,r3,-20
  8066fc:	01000784 	movi	r4,30
  806700:	0007883a 	mov	r3,zero
  806704:	20800516 	blt	r4,r2,80671c <__ulp+0x4c>
  806708:	010007c4 	movi	r4,31
  80670c:	2089c83a 	sub	r4,r4,r2
  806710:	00800044 	movi	r2,1
  806714:	1104983a 	sll	r2,r2,r4
  806718:	f800283a 	ret
  80671c:	00800044 	movi	r2,1
  806720:	f800283a 	ret
  806724:	01400234 	movhi	r5,8
  806728:	28c7d83a 	sra	r3,r5,r3
  80672c:	0005883a 	mov	r2,zero
  806730:	f800283a 	ret

00806734 <__b2d>:
  806734:	defffa04 	addi	sp,sp,-24
  806738:	dc000015 	stw	r16,0(sp)
  80673c:	24000417 	ldw	r16,16(r4)
  806740:	dc400115 	stw	r17,4(sp)
  806744:	24400504 	addi	r17,r4,20
  806748:	8421883a 	add	r16,r16,r16
  80674c:	8421883a 	add	r16,r16,r16
  806750:	8c21883a 	add	r16,r17,r16
  806754:	dc800215 	stw	r18,8(sp)
  806758:	84bfff17 	ldw	r18,-4(r16)
  80675c:	dd000415 	stw	r20,16(sp)
  806760:	dcc00315 	stw	r19,12(sp)
  806764:	9009883a 	mov	r4,r18
  806768:	2829883a 	mov	r20,r5
  80676c:	dfc00515 	stw	ra,20(sp)
  806770:	0805ea00 	call	805ea0 <__hi0bits>
  806774:	00c00804 	movi	r3,32
  806778:	1889c83a 	sub	r4,r3,r2
  80677c:	a1000015 	stw	r4,0(r20)
  806780:	01000284 	movi	r4,10
  806784:	84ffff04 	addi	r19,r16,-4
  806788:	20801216 	blt	r4,r2,8067d4 <__b2d+0xa0>
  80678c:	018002c4 	movi	r6,11
  806790:	308dc83a 	sub	r6,r6,r2
  806794:	9186d83a 	srl	r3,r18,r6
  806798:	18cffc34 	orhi	r3,r3,16368
  80679c:	8cc0212e 	bgeu	r17,r19,806824 <__b2d+0xf0>
  8067a0:	813ffe17 	ldw	r4,-8(r16)
  8067a4:	218cd83a 	srl	r6,r4,r6
  8067a8:	10800544 	addi	r2,r2,21
  8067ac:	9084983a 	sll	r2,r18,r2
  8067b0:	1184b03a 	or	r2,r2,r6
  8067b4:	dfc00517 	ldw	ra,20(sp)
  8067b8:	dd000417 	ldw	r20,16(sp)
  8067bc:	dcc00317 	ldw	r19,12(sp)
  8067c0:	dc800217 	ldw	r18,8(sp)
  8067c4:	dc400117 	ldw	r17,4(sp)
  8067c8:	dc000017 	ldw	r16,0(sp)
  8067cc:	dec00604 	addi	sp,sp,24
  8067d0:	f800283a 	ret
  8067d4:	8cc00f2e 	bgeu	r17,r19,806814 <__b2d+0xe0>
  8067d8:	117ffd44 	addi	r5,r2,-11
  8067dc:	80bffe17 	ldw	r2,-8(r16)
  8067e0:	28000e26 	beq	r5,zero,80681c <__b2d+0xe8>
  8067e4:	1949c83a 	sub	r4,r3,r5
  8067e8:	9164983a 	sll	r18,r18,r5
  8067ec:	1106d83a 	srl	r3,r2,r4
  8067f0:	81bffe04 	addi	r6,r16,-8
  8067f4:	948ffc34 	orhi	r18,r18,16368
  8067f8:	90c6b03a 	or	r3,r18,r3
  8067fc:	89800e2e 	bgeu	r17,r6,806838 <__b2d+0x104>
  806800:	81bffd17 	ldw	r6,-12(r16)
  806804:	1144983a 	sll	r2,r2,r5
  806808:	310ad83a 	srl	r5,r6,r4
  80680c:	2884b03a 	or	r2,r5,r2
  806810:	003fe806 	br	8067b4 <__alt_data_end+0xff8067b4>
  806814:	10bffd44 	addi	r2,r2,-11
  806818:	1000041e 	bne	r2,zero,80682c <__b2d+0xf8>
  80681c:	90cffc34 	orhi	r3,r18,16368
  806820:	003fe406 	br	8067b4 <__alt_data_end+0xff8067b4>
  806824:	000d883a 	mov	r6,zero
  806828:	003fdf06 	br	8067a8 <__alt_data_end+0xff8067a8>
  80682c:	90a4983a 	sll	r18,r18,r2
  806830:	0005883a 	mov	r2,zero
  806834:	003ff906 	br	80681c <__alt_data_end+0xff80681c>
  806838:	1144983a 	sll	r2,r2,r5
  80683c:	003fdd06 	br	8067b4 <__alt_data_end+0xff8067b4>

00806840 <__d2b>:
  806840:	defff804 	addi	sp,sp,-32
  806844:	dc000215 	stw	r16,8(sp)
  806848:	3021883a 	mov	r16,r6
  80684c:	dc400315 	stw	r17,12(sp)
  806850:	8022907a 	slli	r17,r16,1
  806854:	dd000615 	stw	r20,24(sp)
  806858:	2829883a 	mov	r20,r5
  80685c:	01400044 	movi	r5,1
  806860:	dcc00515 	stw	r19,20(sp)
  806864:	dc800415 	stw	r18,16(sp)
  806868:	dfc00715 	stw	ra,28(sp)
  80686c:	3825883a 	mov	r18,r7
  806870:	8822d57a 	srli	r17,r17,21
  806874:	0805bac0 	call	805bac <_Balloc>
  806878:	1027883a 	mov	r19,r2
  80687c:	00800434 	movhi	r2,16
  806880:	10bfffc4 	addi	r2,r2,-1
  806884:	808c703a 	and	r6,r16,r2
  806888:	88000126 	beq	r17,zero,806890 <__d2b+0x50>
  80688c:	31800434 	orhi	r6,r6,16
  806890:	d9800015 	stw	r6,0(sp)
  806894:	a0002426 	beq	r20,zero,806928 <__d2b+0xe8>
  806898:	d9000104 	addi	r4,sp,4
  80689c:	dd000115 	stw	r20,4(sp)
  8068a0:	0805f080 	call	805f08 <__lo0bits>
  8068a4:	d8c00017 	ldw	r3,0(sp)
  8068a8:	10002f1e 	bne	r2,zero,806968 <__d2b+0x128>
  8068ac:	d9000117 	ldw	r4,4(sp)
  8068b0:	99000515 	stw	r4,20(r19)
  8068b4:	1821003a 	cmpeq	r16,r3,zero
  8068b8:	01000084 	movi	r4,2
  8068bc:	2421c83a 	sub	r16,r4,r16
  8068c0:	98c00615 	stw	r3,24(r19)
  8068c4:	9c000415 	stw	r16,16(r19)
  8068c8:	88001f1e 	bne	r17,zero,806948 <__d2b+0x108>
  8068cc:	10bef384 	addi	r2,r2,-1074
  8068d0:	90800015 	stw	r2,0(r18)
  8068d4:	00900034 	movhi	r2,16384
  8068d8:	10bfffc4 	addi	r2,r2,-1
  8068dc:	8085883a 	add	r2,r16,r2
  8068e0:	1085883a 	add	r2,r2,r2
  8068e4:	1085883a 	add	r2,r2,r2
  8068e8:	9885883a 	add	r2,r19,r2
  8068ec:	11000517 	ldw	r4,20(r2)
  8068f0:	8020917a 	slli	r16,r16,5
  8068f4:	0805ea00 	call	805ea0 <__hi0bits>
  8068f8:	d8c00817 	ldw	r3,32(sp)
  8068fc:	8085c83a 	sub	r2,r16,r2
  806900:	18800015 	stw	r2,0(r3)
  806904:	9805883a 	mov	r2,r19
  806908:	dfc00717 	ldw	ra,28(sp)
  80690c:	dd000617 	ldw	r20,24(sp)
  806910:	dcc00517 	ldw	r19,20(sp)
  806914:	dc800417 	ldw	r18,16(sp)
  806918:	dc400317 	ldw	r17,12(sp)
  80691c:	dc000217 	ldw	r16,8(sp)
  806920:	dec00804 	addi	sp,sp,32
  806924:	f800283a 	ret
  806928:	d809883a 	mov	r4,sp
  80692c:	0805f080 	call	805f08 <__lo0bits>
  806930:	d8c00017 	ldw	r3,0(sp)
  806934:	04000044 	movi	r16,1
  806938:	9c000415 	stw	r16,16(r19)
  80693c:	98c00515 	stw	r3,20(r19)
  806940:	10800804 	addi	r2,r2,32
  806944:	883fe126 	beq	r17,zero,8068cc <__alt_data_end+0xff8068cc>
  806948:	00c00d44 	movi	r3,53
  80694c:	8c7ef344 	addi	r17,r17,-1075
  806950:	88a3883a 	add	r17,r17,r2
  806954:	1885c83a 	sub	r2,r3,r2
  806958:	d8c00817 	ldw	r3,32(sp)
  80695c:	94400015 	stw	r17,0(r18)
  806960:	18800015 	stw	r2,0(r3)
  806964:	003fe706 	br	806904 <__alt_data_end+0xff806904>
  806968:	01000804 	movi	r4,32
  80696c:	2089c83a 	sub	r4,r4,r2
  806970:	1908983a 	sll	r4,r3,r4
  806974:	d9400117 	ldw	r5,4(sp)
  806978:	1886d83a 	srl	r3,r3,r2
  80697c:	2148b03a 	or	r4,r4,r5
  806980:	99000515 	stw	r4,20(r19)
  806984:	d8c00015 	stw	r3,0(sp)
  806988:	003fca06 	br	8068b4 <__alt_data_end+0xff8068b4>

0080698c <__ratio>:
  80698c:	defff904 	addi	sp,sp,-28
  806990:	dc400315 	stw	r17,12(sp)
  806994:	2823883a 	mov	r17,r5
  806998:	d9400104 	addi	r5,sp,4
  80699c:	dfc00615 	stw	ra,24(sp)
  8069a0:	dcc00515 	stw	r19,20(sp)
  8069a4:	dc800415 	stw	r18,16(sp)
  8069a8:	2027883a 	mov	r19,r4
  8069ac:	dc000215 	stw	r16,8(sp)
  8069b0:	08067340 	call	806734 <__b2d>
  8069b4:	d80b883a 	mov	r5,sp
  8069b8:	8809883a 	mov	r4,r17
  8069bc:	1025883a 	mov	r18,r2
  8069c0:	1821883a 	mov	r16,r3
  8069c4:	08067340 	call	806734 <__b2d>
  8069c8:	8a000417 	ldw	r8,16(r17)
  8069cc:	99000417 	ldw	r4,16(r19)
  8069d0:	d9400117 	ldw	r5,4(sp)
  8069d4:	2209c83a 	sub	r4,r4,r8
  8069d8:	2010917a 	slli	r8,r4,5
  8069dc:	d9000017 	ldw	r4,0(sp)
  8069e0:	2909c83a 	sub	r4,r5,r4
  8069e4:	4109883a 	add	r4,r8,r4
  8069e8:	01000e0e 	bge	zero,r4,806a24 <__ratio+0x98>
  8069ec:	2008953a 	slli	r4,r4,20
  8069f0:	2421883a 	add	r16,r4,r16
  8069f4:	100d883a 	mov	r6,r2
  8069f8:	180f883a 	mov	r7,r3
  8069fc:	9009883a 	mov	r4,r18
  806a00:	800b883a 	mov	r5,r16
  806a04:	080af280 	call	80af28 <__divdf3>
  806a08:	dfc00617 	ldw	ra,24(sp)
  806a0c:	dcc00517 	ldw	r19,20(sp)
  806a10:	dc800417 	ldw	r18,16(sp)
  806a14:	dc400317 	ldw	r17,12(sp)
  806a18:	dc000217 	ldw	r16,8(sp)
  806a1c:	dec00704 	addi	sp,sp,28
  806a20:	f800283a 	ret
  806a24:	2008953a 	slli	r4,r4,20
  806a28:	1907c83a 	sub	r3,r3,r4
  806a2c:	003ff106 	br	8069f4 <__alt_data_end+0xff8069f4>

00806a30 <_mprec_log10>:
  806a30:	defffe04 	addi	sp,sp,-8
  806a34:	dc000015 	stw	r16,0(sp)
  806a38:	dfc00115 	stw	ra,4(sp)
  806a3c:	008005c4 	movi	r2,23
  806a40:	2021883a 	mov	r16,r4
  806a44:	11000d0e 	bge	r2,r4,806a7c <_mprec_log10+0x4c>
  806a48:	0005883a 	mov	r2,zero
  806a4c:	00cffc34 	movhi	r3,16368
  806a50:	843fffc4 	addi	r16,r16,-1
  806a54:	000d883a 	mov	r6,zero
  806a58:	01d00934 	movhi	r7,16420
  806a5c:	1009883a 	mov	r4,r2
  806a60:	180b883a 	mov	r5,r3
  806a64:	080ba680 	call	80ba68 <__muldf3>
  806a68:	803ff91e 	bne	r16,zero,806a50 <__alt_data_end+0xff806a50>
  806a6c:	dfc00117 	ldw	ra,4(sp)
  806a70:	dc000017 	ldw	r16,0(sp)
  806a74:	dec00204 	addi	sp,sp,8
  806a78:	f800283a 	ret
  806a7c:	202090fa 	slli	r16,r4,3
  806a80:	00802074 	movhi	r2,129
  806a84:	10816c04 	addi	r2,r2,1456
  806a88:	1421883a 	add	r16,r2,r16
  806a8c:	80800017 	ldw	r2,0(r16)
  806a90:	80c00117 	ldw	r3,4(r16)
  806a94:	dfc00117 	ldw	ra,4(sp)
  806a98:	dc000017 	ldw	r16,0(sp)
  806a9c:	dec00204 	addi	sp,sp,8
  806aa0:	f800283a 	ret

00806aa4 <__copybits>:
  806aa4:	297fffc4 	addi	r5,r5,-1
  806aa8:	280fd17a 	srai	r7,r5,5
  806aac:	30c00417 	ldw	r3,16(r6)
  806ab0:	30800504 	addi	r2,r6,20
  806ab4:	39c00044 	addi	r7,r7,1
  806ab8:	18c7883a 	add	r3,r3,r3
  806abc:	39cf883a 	add	r7,r7,r7
  806ac0:	18c7883a 	add	r3,r3,r3
  806ac4:	39cf883a 	add	r7,r7,r7
  806ac8:	10c7883a 	add	r3,r2,r3
  806acc:	21cf883a 	add	r7,r4,r7
  806ad0:	10c00d2e 	bgeu	r2,r3,806b08 <__copybits+0x64>
  806ad4:	200b883a 	mov	r5,r4
  806ad8:	12000017 	ldw	r8,0(r2)
  806adc:	29400104 	addi	r5,r5,4
  806ae0:	10800104 	addi	r2,r2,4
  806ae4:	2a3fff15 	stw	r8,-4(r5)
  806ae8:	10fffb36 	bltu	r2,r3,806ad8 <__alt_data_end+0xff806ad8>
  806aec:	1985c83a 	sub	r2,r3,r6
  806af0:	10bffac4 	addi	r2,r2,-21
  806af4:	1004d0ba 	srli	r2,r2,2
  806af8:	10800044 	addi	r2,r2,1
  806afc:	1085883a 	add	r2,r2,r2
  806b00:	1085883a 	add	r2,r2,r2
  806b04:	2089883a 	add	r4,r4,r2
  806b08:	21c0032e 	bgeu	r4,r7,806b18 <__copybits+0x74>
  806b0c:	20000015 	stw	zero,0(r4)
  806b10:	21000104 	addi	r4,r4,4
  806b14:	21fffd36 	bltu	r4,r7,806b0c <__alt_data_end+0xff806b0c>
  806b18:	f800283a 	ret

00806b1c <__any_on>:
  806b1c:	20c00417 	ldw	r3,16(r4)
  806b20:	2805d17a 	srai	r2,r5,5
  806b24:	21000504 	addi	r4,r4,20
  806b28:	18800d0e 	bge	r3,r2,806b60 <__any_on+0x44>
  806b2c:	18c7883a 	add	r3,r3,r3
  806b30:	18c7883a 	add	r3,r3,r3
  806b34:	20c7883a 	add	r3,r4,r3
  806b38:	20c0192e 	bgeu	r4,r3,806ba0 <__any_on+0x84>
  806b3c:	18bfff17 	ldw	r2,-4(r3)
  806b40:	18ffff04 	addi	r3,r3,-4
  806b44:	1000041e 	bne	r2,zero,806b58 <__any_on+0x3c>
  806b48:	20c0142e 	bgeu	r4,r3,806b9c <__any_on+0x80>
  806b4c:	18ffff04 	addi	r3,r3,-4
  806b50:	19400017 	ldw	r5,0(r3)
  806b54:	283ffc26 	beq	r5,zero,806b48 <__alt_data_end+0xff806b48>
  806b58:	00800044 	movi	r2,1
  806b5c:	f800283a 	ret
  806b60:	10c00a0e 	bge	r2,r3,806b8c <__any_on+0x70>
  806b64:	1085883a 	add	r2,r2,r2
  806b68:	1085883a 	add	r2,r2,r2
  806b6c:	294007cc 	andi	r5,r5,31
  806b70:	2087883a 	add	r3,r4,r2
  806b74:	283ff026 	beq	r5,zero,806b38 <__alt_data_end+0xff806b38>
  806b78:	19800017 	ldw	r6,0(r3)
  806b7c:	3144d83a 	srl	r2,r6,r5
  806b80:	114a983a 	sll	r5,r2,r5
  806b84:	317ff41e 	bne	r6,r5,806b58 <__alt_data_end+0xff806b58>
  806b88:	003feb06 	br	806b38 <__alt_data_end+0xff806b38>
  806b8c:	1085883a 	add	r2,r2,r2
  806b90:	1085883a 	add	r2,r2,r2
  806b94:	2087883a 	add	r3,r4,r2
  806b98:	003fe706 	br	806b38 <__alt_data_end+0xff806b38>
  806b9c:	f800283a 	ret
  806ba0:	0005883a 	mov	r2,zero
  806ba4:	f800283a 	ret

00806ba8 <__fpclassifyd>:
  806ba8:	00a00034 	movhi	r2,32768
  806bac:	10bfffc4 	addi	r2,r2,-1
  806bb0:	2884703a 	and	r2,r5,r2
  806bb4:	10000726 	beq	r2,zero,806bd4 <__fpclassifyd+0x2c>
  806bb8:	00fffc34 	movhi	r3,65520
  806bbc:	019ff834 	movhi	r6,32736
  806bc0:	28c7883a 	add	r3,r5,r3
  806bc4:	31bfffc4 	addi	r6,r6,-1
  806bc8:	30c00536 	bltu	r6,r3,806be0 <__fpclassifyd+0x38>
  806bcc:	00800104 	movi	r2,4
  806bd0:	f800283a 	ret
  806bd4:	2000021e 	bne	r4,zero,806be0 <__fpclassifyd+0x38>
  806bd8:	00800084 	movi	r2,2
  806bdc:	f800283a 	ret
  806be0:	00dffc34 	movhi	r3,32752
  806be4:	019ff834 	movhi	r6,32736
  806be8:	28cb883a 	add	r5,r5,r3
  806bec:	31bfffc4 	addi	r6,r6,-1
  806bf0:	317ff62e 	bgeu	r6,r5,806bcc <__alt_data_end+0xff806bcc>
  806bf4:	01400434 	movhi	r5,16
  806bf8:	297fffc4 	addi	r5,r5,-1
  806bfc:	28800236 	bltu	r5,r2,806c08 <__fpclassifyd+0x60>
  806c00:	008000c4 	movi	r2,3
  806c04:	f800283a 	ret
  806c08:	10c00226 	beq	r2,r3,806c14 <__fpclassifyd+0x6c>
  806c0c:	0005883a 	mov	r2,zero
  806c10:	f800283a 	ret
  806c14:	2005003a 	cmpeq	r2,r4,zero
  806c18:	f800283a 	ret

00806c1c <_sbrk_r>:
  806c1c:	defffd04 	addi	sp,sp,-12
  806c20:	dc000015 	stw	r16,0(sp)
  806c24:	04002074 	movhi	r16,129
  806c28:	dc400115 	stw	r17,4(sp)
  806c2c:	84093004 	addi	r16,r16,9408
  806c30:	2023883a 	mov	r17,r4
  806c34:	2809883a 	mov	r4,r5
  806c38:	dfc00215 	stw	ra,8(sp)
  806c3c:	80000015 	stw	zero,0(r16)
  806c40:	080d5c40 	call	80d5c4 <sbrk>
  806c44:	00ffffc4 	movi	r3,-1
  806c48:	10c00526 	beq	r2,r3,806c60 <_sbrk_r+0x44>
  806c4c:	dfc00217 	ldw	ra,8(sp)
  806c50:	dc400117 	ldw	r17,4(sp)
  806c54:	dc000017 	ldw	r16,0(sp)
  806c58:	dec00304 	addi	sp,sp,12
  806c5c:	f800283a 	ret
  806c60:	80c00017 	ldw	r3,0(r16)
  806c64:	183ff926 	beq	r3,zero,806c4c <__alt_data_end+0xff806c4c>
  806c68:	88c00015 	stw	r3,0(r17)
  806c6c:	003ff706 	br	806c4c <__alt_data_end+0xff806c4c>

00806c70 <__sread>:
  806c70:	defffe04 	addi	sp,sp,-8
  806c74:	dc000015 	stw	r16,0(sp)
  806c78:	2821883a 	mov	r16,r5
  806c7c:	2940038f 	ldh	r5,14(r5)
  806c80:	dfc00115 	stw	ra,4(sp)
  806c84:	08091140 	call	809114 <_read_r>
  806c88:	10000716 	blt	r2,zero,806ca8 <__sread+0x38>
  806c8c:	80c01417 	ldw	r3,80(r16)
  806c90:	1887883a 	add	r3,r3,r2
  806c94:	80c01415 	stw	r3,80(r16)
  806c98:	dfc00117 	ldw	ra,4(sp)
  806c9c:	dc000017 	ldw	r16,0(sp)
  806ca0:	dec00204 	addi	sp,sp,8
  806ca4:	f800283a 	ret
  806ca8:	80c0030b 	ldhu	r3,12(r16)
  806cac:	18fbffcc 	andi	r3,r3,61439
  806cb0:	80c0030d 	sth	r3,12(r16)
  806cb4:	dfc00117 	ldw	ra,4(sp)
  806cb8:	dc000017 	ldw	r16,0(sp)
  806cbc:	dec00204 	addi	sp,sp,8
  806cc0:	f800283a 	ret

00806cc4 <__seofread>:
  806cc4:	0005883a 	mov	r2,zero
  806cc8:	f800283a 	ret

00806ccc <__swrite>:
  806ccc:	2880030b 	ldhu	r2,12(r5)
  806cd0:	defffb04 	addi	sp,sp,-20
  806cd4:	dcc00315 	stw	r19,12(sp)
  806cd8:	dc800215 	stw	r18,8(sp)
  806cdc:	dc400115 	stw	r17,4(sp)
  806ce0:	dc000015 	stw	r16,0(sp)
  806ce4:	dfc00415 	stw	ra,16(sp)
  806ce8:	10c0400c 	andi	r3,r2,256
  806cec:	2821883a 	mov	r16,r5
  806cf0:	2023883a 	mov	r17,r4
  806cf4:	3025883a 	mov	r18,r6
  806cf8:	3827883a 	mov	r19,r7
  806cfc:	18000526 	beq	r3,zero,806d14 <__swrite+0x48>
  806d00:	2940038f 	ldh	r5,14(r5)
  806d04:	01c00084 	movi	r7,2
  806d08:	000d883a 	mov	r6,zero
  806d0c:	0808f580 	call	808f58 <_lseek_r>
  806d10:	8080030b 	ldhu	r2,12(r16)
  806d14:	8140038f 	ldh	r5,14(r16)
  806d18:	10bbffcc 	andi	r2,r2,61439
  806d1c:	980f883a 	mov	r7,r19
  806d20:	900d883a 	mov	r6,r18
  806d24:	8809883a 	mov	r4,r17
  806d28:	8080030d 	sth	r2,12(r16)
  806d2c:	dfc00417 	ldw	ra,16(sp)
  806d30:	dcc00317 	ldw	r19,12(sp)
  806d34:	dc800217 	ldw	r18,8(sp)
  806d38:	dc400117 	ldw	r17,4(sp)
  806d3c:	dc000017 	ldw	r16,0(sp)
  806d40:	dec00504 	addi	sp,sp,20
  806d44:	08085681 	jmpi	808568 <_write_r>

00806d48 <__sseek>:
  806d48:	defffe04 	addi	sp,sp,-8
  806d4c:	dc000015 	stw	r16,0(sp)
  806d50:	2821883a 	mov	r16,r5
  806d54:	2940038f 	ldh	r5,14(r5)
  806d58:	dfc00115 	stw	ra,4(sp)
  806d5c:	0808f580 	call	808f58 <_lseek_r>
  806d60:	00ffffc4 	movi	r3,-1
  806d64:	10c00826 	beq	r2,r3,806d88 <__sseek+0x40>
  806d68:	80c0030b 	ldhu	r3,12(r16)
  806d6c:	80801415 	stw	r2,80(r16)
  806d70:	18c40014 	ori	r3,r3,4096
  806d74:	80c0030d 	sth	r3,12(r16)
  806d78:	dfc00117 	ldw	ra,4(sp)
  806d7c:	dc000017 	ldw	r16,0(sp)
  806d80:	dec00204 	addi	sp,sp,8
  806d84:	f800283a 	ret
  806d88:	80c0030b 	ldhu	r3,12(r16)
  806d8c:	18fbffcc 	andi	r3,r3,61439
  806d90:	80c0030d 	sth	r3,12(r16)
  806d94:	dfc00117 	ldw	ra,4(sp)
  806d98:	dc000017 	ldw	r16,0(sp)
  806d9c:	dec00204 	addi	sp,sp,8
  806da0:	f800283a 	ret

00806da4 <__sclose>:
  806da4:	2940038f 	ldh	r5,14(r5)
  806da8:	08085c81 	jmpi	8085c8 <_close_r>

00806dac <strcmp>:
  806dac:	2144b03a 	or	r2,r4,r5
  806db0:	108000cc 	andi	r2,r2,3
  806db4:	1000171e 	bne	r2,zero,806e14 <strcmp+0x68>
  806db8:	20800017 	ldw	r2,0(r4)
  806dbc:	28c00017 	ldw	r3,0(r5)
  806dc0:	10c0141e 	bne	r2,r3,806e14 <strcmp+0x68>
  806dc4:	027fbff4 	movhi	r9,65279
  806dc8:	4a7fbfc4 	addi	r9,r9,-257
  806dcc:	0086303a 	nor	r3,zero,r2
  806dd0:	02202074 	movhi	r8,32897
  806dd4:	1245883a 	add	r2,r2,r9
  806dd8:	42202004 	addi	r8,r8,-32640
  806ddc:	10c4703a 	and	r2,r2,r3
  806de0:	1204703a 	and	r2,r2,r8
  806de4:	10000226 	beq	r2,zero,806df0 <strcmp+0x44>
  806de8:	00002306 	br	806e78 <strcmp+0xcc>
  806dec:	1000221e 	bne	r2,zero,806e78 <strcmp+0xcc>
  806df0:	21000104 	addi	r4,r4,4
  806df4:	20c00017 	ldw	r3,0(r4)
  806df8:	29400104 	addi	r5,r5,4
  806dfc:	29800017 	ldw	r6,0(r5)
  806e00:	1a4f883a 	add	r7,r3,r9
  806e04:	00c4303a 	nor	r2,zero,r3
  806e08:	3884703a 	and	r2,r7,r2
  806e0c:	1204703a 	and	r2,r2,r8
  806e10:	19bff626 	beq	r3,r6,806dec <__alt_data_end+0xff806dec>
  806e14:	20800003 	ldbu	r2,0(r4)
  806e18:	10c03fcc 	andi	r3,r2,255
  806e1c:	18c0201c 	xori	r3,r3,128
  806e20:	18ffe004 	addi	r3,r3,-128
  806e24:	18000c26 	beq	r3,zero,806e58 <strcmp+0xac>
  806e28:	29800007 	ldb	r6,0(r5)
  806e2c:	19800326 	beq	r3,r6,806e3c <strcmp+0x90>
  806e30:	00001306 	br	806e80 <strcmp+0xd4>
  806e34:	29800007 	ldb	r6,0(r5)
  806e38:	11800b1e 	bne	r2,r6,806e68 <strcmp+0xbc>
  806e3c:	21000044 	addi	r4,r4,1
  806e40:	20c00003 	ldbu	r3,0(r4)
  806e44:	29400044 	addi	r5,r5,1
  806e48:	18803fcc 	andi	r2,r3,255
  806e4c:	1080201c 	xori	r2,r2,128
  806e50:	10bfe004 	addi	r2,r2,-128
  806e54:	103ff71e 	bne	r2,zero,806e34 <__alt_data_end+0xff806e34>
  806e58:	0007883a 	mov	r3,zero
  806e5c:	28800003 	ldbu	r2,0(r5)
  806e60:	1885c83a 	sub	r2,r3,r2
  806e64:	f800283a 	ret
  806e68:	28800003 	ldbu	r2,0(r5)
  806e6c:	18c03fcc 	andi	r3,r3,255
  806e70:	1885c83a 	sub	r2,r3,r2
  806e74:	f800283a 	ret
  806e78:	0005883a 	mov	r2,zero
  806e7c:	f800283a 	ret
  806e80:	10c03fcc 	andi	r3,r2,255
  806e84:	003ff506 	br	806e5c <__alt_data_end+0xff806e5c>

00806e88 <strlen>:
  806e88:	208000cc 	andi	r2,r4,3
  806e8c:	10002026 	beq	r2,zero,806f10 <strlen+0x88>
  806e90:	20800007 	ldb	r2,0(r4)
  806e94:	10002026 	beq	r2,zero,806f18 <strlen+0x90>
  806e98:	2005883a 	mov	r2,r4
  806e9c:	00000206 	br	806ea8 <strlen+0x20>
  806ea0:	10c00007 	ldb	r3,0(r2)
  806ea4:	18001826 	beq	r3,zero,806f08 <strlen+0x80>
  806ea8:	10800044 	addi	r2,r2,1
  806eac:	10c000cc 	andi	r3,r2,3
  806eb0:	183ffb1e 	bne	r3,zero,806ea0 <__alt_data_end+0xff806ea0>
  806eb4:	10c00017 	ldw	r3,0(r2)
  806eb8:	01ffbff4 	movhi	r7,65279
  806ebc:	39ffbfc4 	addi	r7,r7,-257
  806ec0:	00ca303a 	nor	r5,zero,r3
  806ec4:	01a02074 	movhi	r6,32897
  806ec8:	19c7883a 	add	r3,r3,r7
  806ecc:	31a02004 	addi	r6,r6,-32640
  806ed0:	1946703a 	and	r3,r3,r5
  806ed4:	1986703a 	and	r3,r3,r6
  806ed8:	1800091e 	bne	r3,zero,806f00 <strlen+0x78>
  806edc:	10800104 	addi	r2,r2,4
  806ee0:	10c00017 	ldw	r3,0(r2)
  806ee4:	19cb883a 	add	r5,r3,r7
  806ee8:	00c6303a 	nor	r3,zero,r3
  806eec:	28c6703a 	and	r3,r5,r3
  806ef0:	1986703a 	and	r3,r3,r6
  806ef4:	183ff926 	beq	r3,zero,806edc <__alt_data_end+0xff806edc>
  806ef8:	00000106 	br	806f00 <strlen+0x78>
  806efc:	10800044 	addi	r2,r2,1
  806f00:	10c00007 	ldb	r3,0(r2)
  806f04:	183ffd1e 	bne	r3,zero,806efc <__alt_data_end+0xff806efc>
  806f08:	1105c83a 	sub	r2,r2,r4
  806f0c:	f800283a 	ret
  806f10:	2005883a 	mov	r2,r4
  806f14:	003fe706 	br	806eb4 <__alt_data_end+0xff806eb4>
  806f18:	0005883a 	mov	r2,zero
  806f1c:	f800283a 	ret

00806f20 <__sprint_r.part.0>:
  806f20:	28801917 	ldw	r2,100(r5)
  806f24:	defff604 	addi	sp,sp,-40
  806f28:	dd400515 	stw	r21,20(sp)
  806f2c:	dfc00915 	stw	ra,36(sp)
  806f30:	df000815 	stw	fp,32(sp)
  806f34:	ddc00715 	stw	r23,28(sp)
  806f38:	dd800615 	stw	r22,24(sp)
  806f3c:	dd000415 	stw	r20,16(sp)
  806f40:	dcc00315 	stw	r19,12(sp)
  806f44:	dc800215 	stw	r18,8(sp)
  806f48:	dc400115 	stw	r17,4(sp)
  806f4c:	dc000015 	stw	r16,0(sp)
  806f50:	1088000c 	andi	r2,r2,8192
  806f54:	302b883a 	mov	r21,r6
  806f58:	10002e26 	beq	r2,zero,807014 <__sprint_r.part.0+0xf4>
  806f5c:	30800217 	ldw	r2,8(r6)
  806f60:	35800017 	ldw	r22,0(r6)
  806f64:	10002926 	beq	r2,zero,80700c <__sprint_r.part.0+0xec>
  806f68:	2827883a 	mov	r19,r5
  806f6c:	2029883a 	mov	r20,r4
  806f70:	b5c00104 	addi	r23,r22,4
  806f74:	04bfffc4 	movi	r18,-1
  806f78:	bc400017 	ldw	r17,0(r23)
  806f7c:	b4000017 	ldw	r16,0(r22)
  806f80:	0039883a 	mov	fp,zero
  806f84:	8822d0ba 	srli	r17,r17,2
  806f88:	8800031e 	bne	r17,zero,806f98 <__sprint_r.part.0+0x78>
  806f8c:	00001806 	br	806ff0 <__sprint_r.part.0+0xd0>
  806f90:	84000104 	addi	r16,r16,4
  806f94:	8f001526 	beq	r17,fp,806fec <__sprint_r.part.0+0xcc>
  806f98:	81400017 	ldw	r5,0(r16)
  806f9c:	980d883a 	mov	r6,r19
  806fa0:	a009883a 	mov	r4,r20
  806fa4:	08089480 	call	808948 <_fputwc_r>
  806fa8:	e7000044 	addi	fp,fp,1
  806fac:	14bff81e 	bne	r2,r18,806f90 <__alt_data_end+0xff806f90>
  806fb0:	9005883a 	mov	r2,r18
  806fb4:	a8000215 	stw	zero,8(r21)
  806fb8:	a8000115 	stw	zero,4(r21)
  806fbc:	dfc00917 	ldw	ra,36(sp)
  806fc0:	df000817 	ldw	fp,32(sp)
  806fc4:	ddc00717 	ldw	r23,28(sp)
  806fc8:	dd800617 	ldw	r22,24(sp)
  806fcc:	dd400517 	ldw	r21,20(sp)
  806fd0:	dd000417 	ldw	r20,16(sp)
  806fd4:	dcc00317 	ldw	r19,12(sp)
  806fd8:	dc800217 	ldw	r18,8(sp)
  806fdc:	dc400117 	ldw	r17,4(sp)
  806fe0:	dc000017 	ldw	r16,0(sp)
  806fe4:	dec00a04 	addi	sp,sp,40
  806fe8:	f800283a 	ret
  806fec:	a8800217 	ldw	r2,8(r21)
  806ff0:	8c63883a 	add	r17,r17,r17
  806ff4:	8c63883a 	add	r17,r17,r17
  806ff8:	1445c83a 	sub	r2,r2,r17
  806ffc:	a8800215 	stw	r2,8(r21)
  807000:	b5800204 	addi	r22,r22,8
  807004:	bdc00204 	addi	r23,r23,8
  807008:	103fdb1e 	bne	r2,zero,806f78 <__alt_data_end+0xff806f78>
  80700c:	0005883a 	mov	r2,zero
  807010:	003fe806 	br	806fb4 <__alt_data_end+0xff806fb4>
  807014:	0808a480 	call	808a48 <__sfvwrite_r>
  807018:	003fe606 	br	806fb4 <__alt_data_end+0xff806fb4>

0080701c <__sprint_r>:
  80701c:	30c00217 	ldw	r3,8(r6)
  807020:	18000126 	beq	r3,zero,807028 <__sprint_r+0xc>
  807024:	0806f201 	jmpi	806f20 <__sprint_r.part.0>
  807028:	30000115 	stw	zero,4(r6)
  80702c:	0005883a 	mov	r2,zero
  807030:	f800283a 	ret

00807034 <___vfiprintf_internal_r>:
  807034:	deffc904 	addi	sp,sp,-220
  807038:	df003515 	stw	fp,212(sp)
  80703c:	dd003115 	stw	r20,196(sp)
  807040:	dfc03615 	stw	ra,216(sp)
  807044:	ddc03415 	stw	r23,208(sp)
  807048:	dd803315 	stw	r22,204(sp)
  80704c:	dd403215 	stw	r21,200(sp)
  807050:	dcc03015 	stw	r19,192(sp)
  807054:	dc802f15 	stw	r18,188(sp)
  807058:	dc402e15 	stw	r17,184(sp)
  80705c:	dc002d15 	stw	r16,180(sp)
  807060:	d9002015 	stw	r4,128(sp)
  807064:	d9c02215 	stw	r7,136(sp)
  807068:	2829883a 	mov	r20,r5
  80706c:	3039883a 	mov	fp,r6
  807070:	20000226 	beq	r4,zero,80707c <___vfiprintf_internal_r+0x48>
  807074:	20800e17 	ldw	r2,56(r4)
  807078:	1000cf26 	beq	r2,zero,8073b8 <___vfiprintf_internal_r+0x384>
  80707c:	a080030b 	ldhu	r2,12(r20)
  807080:	10c8000c 	andi	r3,r2,8192
  807084:	1800061e 	bne	r3,zero,8070a0 <___vfiprintf_internal_r+0x6c>
  807088:	a1001917 	ldw	r4,100(r20)
  80708c:	00f7ffc4 	movi	r3,-8193
  807090:	10880014 	ori	r2,r2,8192
  807094:	20c6703a 	and	r3,r4,r3
  807098:	a080030d 	sth	r2,12(r20)
  80709c:	a0c01915 	stw	r3,100(r20)
  8070a0:	10c0020c 	andi	r3,r2,8
  8070a4:	1800a926 	beq	r3,zero,80734c <___vfiprintf_internal_r+0x318>
  8070a8:	a0c00417 	ldw	r3,16(r20)
  8070ac:	1800a726 	beq	r3,zero,80734c <___vfiprintf_internal_r+0x318>
  8070b0:	1080068c 	andi	r2,r2,26
  8070b4:	00c00284 	movi	r3,10
  8070b8:	10c0ac26 	beq	r2,r3,80736c <___vfiprintf_internal_r+0x338>
  8070bc:	da801a04 	addi	r10,sp,104
  8070c0:	da801e15 	stw	r10,120(sp)
  8070c4:	d8801e17 	ldw	r2,120(sp)
  8070c8:	da8019c4 	addi	r10,sp,103
  8070cc:	05802074 	movhi	r22,129
  8070d0:	05c02074 	movhi	r23,129
  8070d4:	da801f15 	stw	r10,124(sp)
  8070d8:	1295c83a 	sub	r10,r2,r10
  8070dc:	b581a204 	addi	r22,r22,1672
  8070e0:	bdc19e04 	addi	r23,r23,1656
  8070e4:	dec01a15 	stw	sp,104(sp)
  8070e8:	d8001c15 	stw	zero,112(sp)
  8070ec:	d8001b15 	stw	zero,108(sp)
  8070f0:	d8002615 	stw	zero,152(sp)
  8070f4:	d8002315 	stw	zero,140(sp)
  8070f8:	da802715 	stw	r10,156(sp)
  8070fc:	d811883a 	mov	r8,sp
  807100:	dd002115 	stw	r20,132(sp)
  807104:	e021883a 	mov	r16,fp
  807108:	80800007 	ldb	r2,0(r16)
  80710c:	1003ea26 	beq	r2,zero,8080b8 <___vfiprintf_internal_r+0x1084>
  807110:	00c00944 	movi	r3,37
  807114:	8025883a 	mov	r18,r16
  807118:	10c0021e 	bne	r2,r3,807124 <___vfiprintf_internal_r+0xf0>
  80711c:	00001606 	br	807178 <___vfiprintf_internal_r+0x144>
  807120:	10c00326 	beq	r2,r3,807130 <___vfiprintf_internal_r+0xfc>
  807124:	94800044 	addi	r18,r18,1
  807128:	90800007 	ldb	r2,0(r18)
  80712c:	103ffc1e 	bne	r2,zero,807120 <__alt_data_end+0xff807120>
  807130:	9423c83a 	sub	r17,r18,r16
  807134:	88001026 	beq	r17,zero,807178 <___vfiprintf_internal_r+0x144>
  807138:	d8c01c17 	ldw	r3,112(sp)
  80713c:	d8801b17 	ldw	r2,108(sp)
  807140:	44000015 	stw	r16,0(r8)
  807144:	88c7883a 	add	r3,r17,r3
  807148:	10800044 	addi	r2,r2,1
  80714c:	44400115 	stw	r17,4(r8)
  807150:	d8c01c15 	stw	r3,112(sp)
  807154:	d8801b15 	stw	r2,108(sp)
  807158:	010001c4 	movi	r4,7
  80715c:	2080760e 	bge	r4,r2,807338 <___vfiprintf_internal_r+0x304>
  807160:	1803821e 	bne	r3,zero,807f6c <___vfiprintf_internal_r+0xf38>
  807164:	da802317 	ldw	r10,140(sp)
  807168:	d8001b15 	stw	zero,108(sp)
  80716c:	d811883a 	mov	r8,sp
  807170:	5455883a 	add	r10,r10,r17
  807174:	da802315 	stw	r10,140(sp)
  807178:	90800007 	ldb	r2,0(r18)
  80717c:	10044626 	beq	r2,zero,808298 <___vfiprintf_internal_r+0x1264>
  807180:	90c00047 	ldb	r3,1(r18)
  807184:	94000044 	addi	r16,r18,1
  807188:	d8001d85 	stb	zero,118(sp)
  80718c:	0009883a 	mov	r4,zero
  807190:	000f883a 	mov	r7,zero
  807194:	027fffc4 	movi	r9,-1
  807198:	0023883a 	mov	r17,zero
  80719c:	0029883a 	mov	r20,zero
  8071a0:	01401604 	movi	r5,88
  8071a4:	01800244 	movi	r6,9
  8071a8:	03400a84 	movi	r13,42
  8071ac:	03001b04 	movi	r12,108
  8071b0:	84000044 	addi	r16,r16,1
  8071b4:	18bff804 	addi	r2,r3,-32
  8071b8:	28827336 	bltu	r5,r2,807b88 <___vfiprintf_internal_r+0xb54>
  8071bc:	100490ba 	slli	r2,r2,2
  8071c0:	02802034 	movhi	r10,128
  8071c4:	529c7504 	addi	r10,r10,29140
  8071c8:	1285883a 	add	r2,r2,r10
  8071cc:	10800017 	ldw	r2,0(r2)
  8071d0:	1000683a 	jmp	r2
  8071d4:	008078bc 	xorhi	r2,zero,482
  8071d8:	00807b88 	cmpgei	r2,zero,494
  8071dc:	00807b88 	cmpgei	r2,zero,494
  8071e0:	008078dc 	xori	r2,zero,483
  8071e4:	00807b88 	cmpgei	r2,zero,494
  8071e8:	00807b88 	cmpgei	r2,zero,494
  8071ec:	00807b88 	cmpgei	r2,zero,494
  8071f0:	00807b88 	cmpgei	r2,zero,494
  8071f4:	00807b88 	cmpgei	r2,zero,494
  8071f8:	00807b88 	cmpgei	r2,zero,494
  8071fc:	00807ac4 	movi	r2,491
  807200:	00807ae0 	cmpeqi	r2,zero,491
  807204:	00807b88 	cmpgei	r2,zero,494
  807208:	008073c8 	cmpgei	r2,zero,463
  80720c:	00807af0 	cmpltui	r2,zero,491
  807210:	00807b88 	cmpgei	r2,zero,494
  807214:	008078e8 	cmpgeui	r2,zero,483
  807218:	008078f4 	movhi	r2,483
  80721c:	008078f4 	movhi	r2,483
  807220:	008078f4 	movhi	r2,483
  807224:	008078f4 	movhi	r2,483
  807228:	008078f4 	movhi	r2,483
  80722c:	008078f4 	movhi	r2,483
  807230:	008078f4 	movhi	r2,483
  807234:	008078f4 	movhi	r2,483
  807238:	008078f4 	movhi	r2,483
  80723c:	00807b88 	cmpgei	r2,zero,494
  807240:	00807b88 	cmpgei	r2,zero,494
  807244:	00807b88 	cmpgei	r2,zero,494
  807248:	00807b88 	cmpgei	r2,zero,494
  80724c:	00807b88 	cmpgei	r2,zero,494
  807250:	00807b88 	cmpgei	r2,zero,494
  807254:	00807b88 	cmpgei	r2,zero,494
  807258:	00807b88 	cmpgei	r2,zero,494
  80725c:	00807b88 	cmpgei	r2,zero,494
  807260:	00807b88 	cmpgei	r2,zero,494
  807264:	00807920 	cmpeqi	r2,zero,484
  807268:	00807b88 	cmpgei	r2,zero,494
  80726c:	00807b88 	cmpgei	r2,zero,494
  807270:	00807b88 	cmpgei	r2,zero,494
  807274:	00807b88 	cmpgei	r2,zero,494
  807278:	00807b88 	cmpgei	r2,zero,494
  80727c:	00807b88 	cmpgei	r2,zero,494
  807280:	00807b88 	cmpgei	r2,zero,494
  807284:	00807b88 	cmpgei	r2,zero,494
  807288:	00807b88 	cmpgei	r2,zero,494
  80728c:	00807b88 	cmpgei	r2,zero,494
  807290:	00807958 	cmpnei	r2,zero,485
  807294:	00807b88 	cmpgei	r2,zero,494
  807298:	00807b88 	cmpgei	r2,zero,494
  80729c:	00807b88 	cmpgei	r2,zero,494
  8072a0:	00807b88 	cmpgei	r2,zero,494
  8072a4:	00807b88 	cmpgei	r2,zero,494
  8072a8:	008079b0 	cmpltui	r2,zero,486
  8072ac:	00807b88 	cmpgei	r2,zero,494
  8072b0:	00807b88 	cmpgei	r2,zero,494
  8072b4:	00807a20 	cmpeqi	r2,zero,488
  8072b8:	00807b88 	cmpgei	r2,zero,494
  8072bc:	00807b88 	cmpgei	r2,zero,494
  8072c0:	00807b88 	cmpgei	r2,zero,494
  8072c4:	00807b88 	cmpgei	r2,zero,494
  8072c8:	00807b88 	cmpgei	r2,zero,494
  8072cc:	00807b88 	cmpgei	r2,zero,494
  8072d0:	00807b88 	cmpgei	r2,zero,494
  8072d4:	00807b88 	cmpgei	r2,zero,494
  8072d8:	00807b88 	cmpgei	r2,zero,494
  8072dc:	00807b88 	cmpgei	r2,zero,494
  8072e0:	008077cc 	andi	r2,zero,479
  8072e4:	008077f8 	rdprs	r2,zero,479
  8072e8:	00807b88 	cmpgei	r2,zero,494
  8072ec:	00807b88 	cmpgei	r2,zero,494
  8072f0:	00807b88 	cmpgei	r2,zero,494
  8072f4:	00807b30 	cmpltui	r2,zero,492
  8072f8:	008077f8 	rdprs	r2,zero,479
  8072fc:	00807b88 	cmpgei	r2,zero,494
  807300:	00807b88 	cmpgei	r2,zero,494
  807304:	0080768c 	andi	r2,zero,474
  807308:	00807b88 	cmpgei	r2,zero,494
  80730c:	0080769c 	xori	r2,zero,474
  807310:	008076d8 	cmpnei	r2,zero,475
  807314:	008073d4 	movui	r2,463
  807318:	00807680 	call	80768 <__alt_mem_new_sdram_controller_0-0x77f898>
  80731c:	00807b88 	cmpgei	r2,zero,494
  807320:	00807a5c 	xori	r2,zero,489
  807324:	00807b88 	cmpgei	r2,zero,494
  807328:	00807ab4 	movhi	r2,490
  80732c:	00807b88 	cmpgei	r2,zero,494
  807330:	00807b88 	cmpgei	r2,zero,494
  807334:	00807778 	rdprs	r2,zero,477
  807338:	42000204 	addi	r8,r8,8
  80733c:	da802317 	ldw	r10,140(sp)
  807340:	5455883a 	add	r10,r10,r17
  807344:	da802315 	stw	r10,140(sp)
  807348:	003f8b06 	br	807178 <__alt_data_end+0xff807178>
  80734c:	d9002017 	ldw	r4,128(sp)
  807350:	a00b883a 	mov	r5,r20
  807354:	08027d40 	call	8027d4 <__swsetup_r>
  807358:	1003b11e 	bne	r2,zero,808220 <___vfiprintf_internal_r+0x11ec>
  80735c:	a080030b 	ldhu	r2,12(r20)
  807360:	00c00284 	movi	r3,10
  807364:	1080068c 	andi	r2,r2,26
  807368:	10ff541e 	bne	r2,r3,8070bc <__alt_data_end+0xff8070bc>
  80736c:	a080038f 	ldh	r2,14(r20)
  807370:	103f5216 	blt	r2,zero,8070bc <__alt_data_end+0xff8070bc>
  807374:	d9c02217 	ldw	r7,136(sp)
  807378:	d9002017 	ldw	r4,128(sp)
  80737c:	e00d883a 	mov	r6,fp
  807380:	a00b883a 	mov	r5,r20
  807384:	08084ac0 	call	8084ac <__sbprintf>
  807388:	dfc03617 	ldw	ra,216(sp)
  80738c:	df003517 	ldw	fp,212(sp)
  807390:	ddc03417 	ldw	r23,208(sp)
  807394:	dd803317 	ldw	r22,204(sp)
  807398:	dd403217 	ldw	r21,200(sp)
  80739c:	dd003117 	ldw	r20,196(sp)
  8073a0:	dcc03017 	ldw	r19,192(sp)
  8073a4:	dc802f17 	ldw	r18,188(sp)
  8073a8:	dc402e17 	ldw	r17,184(sp)
  8073ac:	dc002d17 	ldw	r16,180(sp)
  8073b0:	dec03704 	addi	sp,sp,220
  8073b4:	f800283a 	ret
  8073b8:	08047a80 	call	8047a8 <__sinit>
  8073bc:	003f2f06 	br	80707c <__alt_data_end+0xff80707c>
  8073c0:	0463c83a 	sub	r17,zero,r17
  8073c4:	d8802215 	stw	r2,136(sp)
  8073c8:	a5000114 	ori	r20,r20,4
  8073cc:	80c00007 	ldb	r3,0(r16)
  8073d0:	003f7706 	br	8071b0 <__alt_data_end+0xff8071b0>
  8073d4:	00800c04 	movi	r2,48
  8073d8:	da802217 	ldw	r10,136(sp)
  8073dc:	d8801d05 	stb	r2,116(sp)
  8073e0:	00801e04 	movi	r2,120
  8073e4:	d8801d45 	stb	r2,117(sp)
  8073e8:	d8001d85 	stb	zero,118(sp)
  8073ec:	50c00104 	addi	r3,r10,4
  8073f0:	54800017 	ldw	r18,0(r10)
  8073f4:	0027883a 	mov	r19,zero
  8073f8:	a0800094 	ori	r2,r20,2
  8073fc:	48030b16 	blt	r9,zero,80802c <___vfiprintf_internal_r+0xff8>
  807400:	00bfdfc4 	movi	r2,-129
  807404:	a096703a 	and	r11,r20,r2
  807408:	d8c02215 	stw	r3,136(sp)
  80740c:	5d000094 	ori	r20,r11,2
  807410:	90032b1e 	bne	r18,zero,8080c0 <___vfiprintf_internal_r+0x108c>
  807414:	00802074 	movhi	r2,129
  807418:	10813d04 	addi	r2,r2,1268
  80741c:	d8802615 	stw	r2,152(sp)
  807420:	0039883a 	mov	fp,zero
  807424:	48017b1e 	bne	r9,zero,807a14 <___vfiprintf_internal_r+0x9e0>
  807428:	0013883a 	mov	r9,zero
  80742c:	0027883a 	mov	r19,zero
  807430:	dd401a04 	addi	r21,sp,104
  807434:	4825883a 	mov	r18,r9
  807438:	4cc0010e 	bge	r9,r19,807440 <___vfiprintf_internal_r+0x40c>
  80743c:	9825883a 	mov	r18,r19
  807440:	e7003fcc 	andi	fp,fp,255
  807444:	e700201c 	xori	fp,fp,128
  807448:	e73fe004 	addi	fp,fp,-128
  80744c:	e0000126 	beq	fp,zero,807454 <___vfiprintf_internal_r+0x420>
  807450:	94800044 	addi	r18,r18,1
  807454:	a380008c 	andi	r14,r20,2
  807458:	70000126 	beq	r14,zero,807460 <___vfiprintf_internal_r+0x42c>
  80745c:	94800084 	addi	r18,r18,2
  807460:	a700210c 	andi	fp,r20,132
  807464:	e001df1e 	bne	fp,zero,807be4 <___vfiprintf_internal_r+0xbb0>
  807468:	8c87c83a 	sub	r3,r17,r18
  80746c:	00c1dd0e 	bge	zero,r3,807be4 <___vfiprintf_internal_r+0xbb0>
  807470:	01c00404 	movi	r7,16
  807474:	d8801c17 	ldw	r2,112(sp)
  807478:	38c3ad0e 	bge	r7,r3,808330 <___vfiprintf_internal_r+0x12fc>
  80747c:	02802074 	movhi	r10,129
  807480:	5281a204 	addi	r10,r10,1672
  807484:	dc002915 	stw	r16,164(sp)
  807488:	d9801b17 	ldw	r6,108(sp)
  80748c:	da802415 	stw	r10,144(sp)
  807490:	03c001c4 	movi	r15,7
  807494:	da402515 	stw	r9,148(sp)
  807498:	db802815 	stw	r14,160(sp)
  80749c:	1821883a 	mov	r16,r3
  8074a0:	00000506 	br	8074b8 <___vfiprintf_internal_r+0x484>
  8074a4:	31400084 	addi	r5,r6,2
  8074a8:	42000204 	addi	r8,r8,8
  8074ac:	200d883a 	mov	r6,r4
  8074b0:	843ffc04 	addi	r16,r16,-16
  8074b4:	3c000d0e 	bge	r7,r16,8074ec <___vfiprintf_internal_r+0x4b8>
  8074b8:	10800404 	addi	r2,r2,16
  8074bc:	31000044 	addi	r4,r6,1
  8074c0:	45800015 	stw	r22,0(r8)
  8074c4:	41c00115 	stw	r7,4(r8)
  8074c8:	d8801c15 	stw	r2,112(sp)
  8074cc:	d9001b15 	stw	r4,108(sp)
  8074d0:	793ff40e 	bge	r15,r4,8074a4 <__alt_data_end+0xff8074a4>
  8074d4:	1001b51e 	bne	r2,zero,807bac <___vfiprintf_internal_r+0xb78>
  8074d8:	843ffc04 	addi	r16,r16,-16
  8074dc:	000d883a 	mov	r6,zero
  8074e0:	01400044 	movi	r5,1
  8074e4:	d811883a 	mov	r8,sp
  8074e8:	3c3ff316 	blt	r7,r16,8074b8 <__alt_data_end+0xff8074b8>
  8074ec:	8007883a 	mov	r3,r16
  8074f0:	da402517 	ldw	r9,148(sp)
  8074f4:	db802817 	ldw	r14,160(sp)
  8074f8:	dc002917 	ldw	r16,164(sp)
  8074fc:	da802417 	ldw	r10,144(sp)
  807500:	1885883a 	add	r2,r3,r2
  807504:	40c00115 	stw	r3,4(r8)
  807508:	42800015 	stw	r10,0(r8)
  80750c:	d8801c15 	stw	r2,112(sp)
  807510:	d9401b15 	stw	r5,108(sp)
  807514:	00c001c4 	movi	r3,7
  807518:	19426016 	blt	r3,r5,807e9c <___vfiprintf_internal_r+0xe68>
  80751c:	d8c01d87 	ldb	r3,118(sp)
  807520:	42000204 	addi	r8,r8,8
  807524:	29000044 	addi	r4,r5,1
  807528:	1801b31e 	bne	r3,zero,807bf8 <___vfiprintf_internal_r+0xbc4>
  80752c:	7001c026 	beq	r14,zero,807c30 <___vfiprintf_internal_r+0xbfc>
  807530:	d8c01d04 	addi	r3,sp,116
  807534:	10800084 	addi	r2,r2,2
  807538:	40c00015 	stw	r3,0(r8)
  80753c:	00c00084 	movi	r3,2
  807540:	40c00115 	stw	r3,4(r8)
  807544:	d8801c15 	stw	r2,112(sp)
  807548:	d9001b15 	stw	r4,108(sp)
  80754c:	00c001c4 	movi	r3,7
  807550:	1902650e 	bge	r3,r4,807ee8 <___vfiprintf_internal_r+0xeb4>
  807554:	10029a1e 	bne	r2,zero,807fc0 <___vfiprintf_internal_r+0xf8c>
  807558:	00c02004 	movi	r3,128
  80755c:	01000044 	movi	r4,1
  807560:	000b883a 	mov	r5,zero
  807564:	d811883a 	mov	r8,sp
  807568:	e0c1b31e 	bne	fp,r3,807c38 <___vfiprintf_internal_r+0xc04>
  80756c:	8cb9c83a 	sub	fp,r17,r18
  807570:	0701b10e 	bge	zero,fp,807c38 <___vfiprintf_internal_r+0xc04>
  807574:	01c00404 	movi	r7,16
  807578:	3f03890e 	bge	r7,fp,8083a0 <___vfiprintf_internal_r+0x136c>
  80757c:	00c02074 	movhi	r3,129
  807580:	18c19e04 	addi	r3,r3,1656
  807584:	d8c02415 	stw	r3,144(sp)
  807588:	8007883a 	mov	r3,r16
  80758c:	034001c4 	movi	r13,7
  807590:	e021883a 	mov	r16,fp
  807594:	da402515 	stw	r9,148(sp)
  807598:	1839883a 	mov	fp,r3
  80759c:	00000506 	br	8075b4 <___vfiprintf_internal_r+0x580>
  8075a0:	29800084 	addi	r6,r5,2
  8075a4:	42000204 	addi	r8,r8,8
  8075a8:	180b883a 	mov	r5,r3
  8075ac:	843ffc04 	addi	r16,r16,-16
  8075b0:	3c000d0e 	bge	r7,r16,8075e8 <___vfiprintf_internal_r+0x5b4>
  8075b4:	10800404 	addi	r2,r2,16
  8075b8:	28c00044 	addi	r3,r5,1
  8075bc:	45c00015 	stw	r23,0(r8)
  8075c0:	41c00115 	stw	r7,4(r8)
  8075c4:	d8801c15 	stw	r2,112(sp)
  8075c8:	d8c01b15 	stw	r3,108(sp)
  8075cc:	68fff40e 	bge	r13,r3,8075a0 <__alt_data_end+0xff8075a0>
  8075d0:	1002241e 	bne	r2,zero,807e64 <___vfiprintf_internal_r+0xe30>
  8075d4:	843ffc04 	addi	r16,r16,-16
  8075d8:	01800044 	movi	r6,1
  8075dc:	000b883a 	mov	r5,zero
  8075e0:	d811883a 	mov	r8,sp
  8075e4:	3c3ff316 	blt	r7,r16,8075b4 <__alt_data_end+0xff8075b4>
  8075e8:	da402517 	ldw	r9,148(sp)
  8075ec:	e007883a 	mov	r3,fp
  8075f0:	8039883a 	mov	fp,r16
  8075f4:	1821883a 	mov	r16,r3
  8075f8:	d8c02417 	ldw	r3,144(sp)
  8075fc:	1705883a 	add	r2,r2,fp
  807600:	47000115 	stw	fp,4(r8)
  807604:	40c00015 	stw	r3,0(r8)
  807608:	d8801c15 	stw	r2,112(sp)
  80760c:	d9801b15 	stw	r6,108(sp)
  807610:	00c001c4 	movi	r3,7
  807614:	19827616 	blt	r3,r6,807ff0 <___vfiprintf_internal_r+0xfbc>
  807618:	4cf9c83a 	sub	fp,r9,r19
  80761c:	42000204 	addi	r8,r8,8
  807620:	31000044 	addi	r4,r6,1
  807624:	300b883a 	mov	r5,r6
  807628:	07018516 	blt	zero,fp,807c40 <___vfiprintf_internal_r+0xc0c>
  80762c:	9885883a 	add	r2,r19,r2
  807630:	45400015 	stw	r21,0(r8)
  807634:	44c00115 	stw	r19,4(r8)
  807638:	d8801c15 	stw	r2,112(sp)
  80763c:	d9001b15 	stw	r4,108(sp)
  807640:	00c001c4 	movi	r3,7
  807644:	1901dd0e 	bge	r3,r4,807dbc <___vfiprintf_internal_r+0xd88>
  807648:	1002401e 	bne	r2,zero,807f4c <___vfiprintf_internal_r+0xf18>
  80764c:	d8001b15 	stw	zero,108(sp)
  807650:	a2c0010c 	andi	r11,r20,4
  807654:	58000226 	beq	r11,zero,807660 <___vfiprintf_internal_r+0x62c>
  807658:	8ca7c83a 	sub	r19,r17,r18
  80765c:	04c2f216 	blt	zero,r19,808228 <___vfiprintf_internal_r+0x11f4>
  807660:	8c80010e 	bge	r17,r18,807668 <___vfiprintf_internal_r+0x634>
  807664:	9023883a 	mov	r17,r18
  807668:	da802317 	ldw	r10,140(sp)
  80766c:	5455883a 	add	r10,r10,r17
  807670:	da802315 	stw	r10,140(sp)
  807674:	d8001b15 	stw	zero,108(sp)
  807678:	d811883a 	mov	r8,sp
  80767c:	003ea206 	br	807108 <__alt_data_end+0xff807108>
  807680:	a5000814 	ori	r20,r20,32
  807684:	80c00007 	ldb	r3,0(r16)
  807688:	003ec906 	br	8071b0 <__alt_data_end+0xff8071b0>
  80768c:	80c00007 	ldb	r3,0(r16)
  807690:	1b030926 	beq	r3,r12,8082b8 <___vfiprintf_internal_r+0x1284>
  807694:	a5000414 	ori	r20,r20,16
  807698:	003ec506 	br	8071b0 <__alt_data_end+0xff8071b0>
  80769c:	21003fcc 	andi	r4,r4,255
  8076a0:	20035e1e 	bne	r4,zero,80841c <___vfiprintf_internal_r+0x13e8>
  8076a4:	a080080c 	andi	r2,r20,32
  8076a8:	1002a526 	beq	r2,zero,808140 <___vfiprintf_internal_r+0x110c>
  8076ac:	da802217 	ldw	r10,136(sp)
  8076b0:	50800017 	ldw	r2,0(r10)
  8076b4:	da802317 	ldw	r10,140(sp)
  8076b8:	5007d7fa 	srai	r3,r10,31
  8076bc:	da802217 	ldw	r10,136(sp)
  8076c0:	10c00115 	stw	r3,4(r2)
  8076c4:	52800104 	addi	r10,r10,4
  8076c8:	da802215 	stw	r10,136(sp)
  8076cc:	da802317 	ldw	r10,140(sp)
  8076d0:	12800015 	stw	r10,0(r2)
  8076d4:	003e8c06 	br	807108 <__alt_data_end+0xff807108>
  8076d8:	21003fcc 	andi	r4,r4,255
  8076dc:	2003511e 	bne	r4,zero,808424 <___vfiprintf_internal_r+0x13f0>
  8076e0:	a080080c 	andi	r2,r20,32
  8076e4:	1000a126 	beq	r2,zero,80796c <___vfiprintf_internal_r+0x938>
  8076e8:	da802217 	ldw	r10,136(sp)
  8076ec:	d8001d85 	stb	zero,118(sp)
  8076f0:	50800204 	addi	r2,r10,8
  8076f4:	54800017 	ldw	r18,0(r10)
  8076f8:	54c00117 	ldw	r19,4(r10)
  8076fc:	4802b416 	blt	r9,zero,8081d0 <___vfiprintf_internal_r+0x119c>
  807700:	013fdfc4 	movi	r4,-129
  807704:	94c6b03a 	or	r3,r18,r19
  807708:	d8802215 	stw	r2,136(sp)
  80770c:	a128703a 	and	r20,r20,r4
  807710:	1800a226 	beq	r3,zero,80799c <___vfiprintf_internal_r+0x968>
  807714:	0039883a 	mov	fp,zero
  807718:	dd401a04 	addi	r21,sp,104
  80771c:	9006d0fa 	srli	r3,r18,3
  807720:	9808977a 	slli	r4,r19,29
  807724:	9826d0fa 	srli	r19,r19,3
  807728:	948001cc 	andi	r18,r18,7
  80772c:	90800c04 	addi	r2,r18,48
  807730:	ad7fffc4 	addi	r21,r21,-1
  807734:	20e4b03a 	or	r18,r4,r3
  807738:	a8800005 	stb	r2,0(r21)
  80773c:	94c6b03a 	or	r3,r18,r19
  807740:	183ff61e 	bne	r3,zero,80771c <__alt_data_end+0xff80771c>
  807744:	a0c0004c 	andi	r3,r20,1
  807748:	18005926 	beq	r3,zero,8078b0 <___vfiprintf_internal_r+0x87c>
  80774c:	10803fcc 	andi	r2,r2,255
  807750:	1080201c 	xori	r2,r2,128
  807754:	10bfe004 	addi	r2,r2,-128
  807758:	00c00c04 	movi	r3,48
  80775c:	10c05426 	beq	r2,r3,8078b0 <___vfiprintf_internal_r+0x87c>
  807760:	da801e17 	ldw	r10,120(sp)
  807764:	a8bfffc4 	addi	r2,r21,-1
  807768:	a8ffffc5 	stb	r3,-1(r21)
  80776c:	50a7c83a 	sub	r19,r10,r2
  807770:	102b883a 	mov	r21,r2
  807774:	003f2f06 	br	807434 <__alt_data_end+0xff807434>
  807778:	21003fcc 	andi	r4,r4,255
  80777c:	2003421e 	bne	r4,zero,808488 <___vfiprintf_internal_r+0x1454>
  807780:	00802074 	movhi	r2,129
  807784:	10813d04 	addi	r2,r2,1268
  807788:	d8802615 	stw	r2,152(sp)
  80778c:	a080080c 	andi	r2,r20,32
  807790:	1000aa26 	beq	r2,zero,807a3c <___vfiprintf_internal_r+0xa08>
  807794:	da802217 	ldw	r10,136(sp)
  807798:	54800017 	ldw	r18,0(r10)
  80779c:	54c00117 	ldw	r19,4(r10)
  8077a0:	52800204 	addi	r10,r10,8
  8077a4:	da802215 	stw	r10,136(sp)
  8077a8:	a080004c 	andi	r2,r20,1
  8077ac:	1001d226 	beq	r2,zero,807ef8 <___vfiprintf_internal_r+0xec4>
  8077b0:	94c4b03a 	or	r2,r18,r19
  8077b4:	1002351e 	bne	r2,zero,80808c <___vfiprintf_internal_r+0x1058>
  8077b8:	d8001d85 	stb	zero,118(sp)
  8077bc:	48022216 	blt	r9,zero,808048 <___vfiprintf_internal_r+0x1014>
  8077c0:	00bfdfc4 	movi	r2,-129
  8077c4:	a0a8703a 	and	r20,r20,r2
  8077c8:	003f1506 	br	807420 <__alt_data_end+0xff807420>
  8077cc:	da802217 	ldw	r10,136(sp)
  8077d0:	04800044 	movi	r18,1
  8077d4:	d8001d85 	stb	zero,118(sp)
  8077d8:	50800017 	ldw	r2,0(r10)
  8077dc:	52800104 	addi	r10,r10,4
  8077e0:	da802215 	stw	r10,136(sp)
  8077e4:	d8801005 	stb	r2,64(sp)
  8077e8:	9027883a 	mov	r19,r18
  8077ec:	dd401004 	addi	r21,sp,64
  8077f0:	0013883a 	mov	r9,zero
  8077f4:	003f1706 	br	807454 <__alt_data_end+0xff807454>
  8077f8:	21003fcc 	andi	r4,r4,255
  8077fc:	2003201e 	bne	r4,zero,808480 <___vfiprintf_internal_r+0x144c>
  807800:	a080080c 	andi	r2,r20,32
  807804:	10004b26 	beq	r2,zero,807934 <___vfiprintf_internal_r+0x900>
  807808:	da802217 	ldw	r10,136(sp)
  80780c:	50800117 	ldw	r2,4(r10)
  807810:	54800017 	ldw	r18,0(r10)
  807814:	52800204 	addi	r10,r10,8
  807818:	da802215 	stw	r10,136(sp)
  80781c:	1027883a 	mov	r19,r2
  807820:	10022c16 	blt	r2,zero,8080d4 <___vfiprintf_internal_r+0x10a0>
  807824:	df001d83 	ldbu	fp,118(sp)
  807828:	48007216 	blt	r9,zero,8079f4 <___vfiprintf_internal_r+0x9c0>
  80782c:	00ffdfc4 	movi	r3,-129
  807830:	94c4b03a 	or	r2,r18,r19
  807834:	a0e8703a 	and	r20,r20,r3
  807838:	1000cc26 	beq	r2,zero,807b6c <___vfiprintf_internal_r+0xb38>
  80783c:	98021026 	beq	r19,zero,808080 <___vfiprintf_internal_r+0x104c>
  807840:	dc402415 	stw	r17,144(sp)
  807844:	dc002515 	stw	r16,148(sp)
  807848:	9823883a 	mov	r17,r19
  80784c:	9021883a 	mov	r16,r18
  807850:	dd401a04 	addi	r21,sp,104
  807854:	4825883a 	mov	r18,r9
  807858:	4027883a 	mov	r19,r8
  80785c:	8009883a 	mov	r4,r16
  807860:	880b883a 	mov	r5,r17
  807864:	01800284 	movi	r6,10
  807868:	000f883a 	mov	r7,zero
  80786c:	0809f900 	call	809f90 <__umoddi3>
  807870:	10800c04 	addi	r2,r2,48
  807874:	ad7fffc4 	addi	r21,r21,-1
  807878:	8009883a 	mov	r4,r16
  80787c:	880b883a 	mov	r5,r17
  807880:	a8800005 	stb	r2,0(r21)
  807884:	01800284 	movi	r6,10
  807888:	000f883a 	mov	r7,zero
  80788c:	0809a180 	call	809a18 <__udivdi3>
  807890:	1021883a 	mov	r16,r2
  807894:	10c4b03a 	or	r2,r2,r3
  807898:	1823883a 	mov	r17,r3
  80789c:	103fef1e 	bne	r2,zero,80785c <__alt_data_end+0xff80785c>
  8078a0:	dc402417 	ldw	r17,144(sp)
  8078a4:	dc002517 	ldw	r16,148(sp)
  8078a8:	9013883a 	mov	r9,r18
  8078ac:	9811883a 	mov	r8,r19
  8078b0:	da801e17 	ldw	r10,120(sp)
  8078b4:	5567c83a 	sub	r19,r10,r21
  8078b8:	003ede06 	br	807434 <__alt_data_end+0xff807434>
  8078bc:	38803fcc 	andi	r2,r7,255
  8078c0:	1080201c 	xori	r2,r2,128
  8078c4:	10bfe004 	addi	r2,r2,-128
  8078c8:	1002371e 	bne	r2,zero,8081a8 <___vfiprintf_internal_r+0x1174>
  8078cc:	01000044 	movi	r4,1
  8078d0:	01c00804 	movi	r7,32
  8078d4:	80c00007 	ldb	r3,0(r16)
  8078d8:	003e3506 	br	8071b0 <__alt_data_end+0xff8071b0>
  8078dc:	a5000054 	ori	r20,r20,1
  8078e0:	80c00007 	ldb	r3,0(r16)
  8078e4:	003e3206 	br	8071b0 <__alt_data_end+0xff8071b0>
  8078e8:	a5002014 	ori	r20,r20,128
  8078ec:	80c00007 	ldb	r3,0(r16)
  8078f0:	003e2f06 	br	8071b0 <__alt_data_end+0xff8071b0>
  8078f4:	8015883a 	mov	r10,r16
  8078f8:	0023883a 	mov	r17,zero
  8078fc:	18bff404 	addi	r2,r3,-48
  807900:	50c00007 	ldb	r3,0(r10)
  807904:	8c4002a4 	muli	r17,r17,10
  807908:	84000044 	addi	r16,r16,1
  80790c:	8015883a 	mov	r10,r16
  807910:	1463883a 	add	r17,r2,r17
  807914:	18bff404 	addi	r2,r3,-48
  807918:	30bff92e 	bgeu	r6,r2,807900 <__alt_data_end+0xff807900>
  80791c:	003e2506 	br	8071b4 <__alt_data_end+0xff8071b4>
  807920:	21003fcc 	andi	r4,r4,255
  807924:	2002d41e 	bne	r4,zero,808478 <___vfiprintf_internal_r+0x1444>
  807928:	a5000414 	ori	r20,r20,16
  80792c:	a080080c 	andi	r2,r20,32
  807930:	103fb51e 	bne	r2,zero,807808 <__alt_data_end+0xff807808>
  807934:	a080040c 	andi	r2,r20,16
  807938:	1001f826 	beq	r2,zero,80811c <___vfiprintf_internal_r+0x10e8>
  80793c:	da802217 	ldw	r10,136(sp)
  807940:	54800017 	ldw	r18,0(r10)
  807944:	52800104 	addi	r10,r10,4
  807948:	da802215 	stw	r10,136(sp)
  80794c:	9027d7fa 	srai	r19,r18,31
  807950:	9805883a 	mov	r2,r19
  807954:	003fb206 	br	807820 <__alt_data_end+0xff807820>
  807958:	21003fcc 	andi	r4,r4,255
  80795c:	2002c41e 	bne	r4,zero,808470 <___vfiprintf_internal_r+0x143c>
  807960:	a5000414 	ori	r20,r20,16
  807964:	a080080c 	andi	r2,r20,32
  807968:	103f5f1e 	bne	r2,zero,8076e8 <__alt_data_end+0xff8076e8>
  80796c:	a080040c 	andi	r2,r20,16
  807970:	10020f26 	beq	r2,zero,8081b0 <___vfiprintf_internal_r+0x117c>
  807974:	da802217 	ldw	r10,136(sp)
  807978:	d8001d85 	stb	zero,118(sp)
  80797c:	0027883a 	mov	r19,zero
  807980:	50800104 	addi	r2,r10,4
  807984:	54800017 	ldw	r18,0(r10)
  807988:	48021116 	blt	r9,zero,8081d0 <___vfiprintf_internal_r+0x119c>
  80798c:	00ffdfc4 	movi	r3,-129
  807990:	d8802215 	stw	r2,136(sp)
  807994:	a0e8703a 	and	r20,r20,r3
  807998:	903f5e1e 	bne	r18,zero,807714 <__alt_data_end+0xff807714>
  80799c:	0039883a 	mov	fp,zero
  8079a0:	4802a626 	beq	r9,zero,80843c <___vfiprintf_internal_r+0x1408>
  8079a4:	0025883a 	mov	r18,zero
  8079a8:	0027883a 	mov	r19,zero
  8079ac:	003f5a06 	br	807718 <__alt_data_end+0xff807718>
  8079b0:	21003fcc 	andi	r4,r4,255
  8079b4:	20029f1e 	bne	r4,zero,808434 <___vfiprintf_internal_r+0x1400>
  8079b8:	a5000414 	ori	r20,r20,16
  8079bc:	a080080c 	andi	r2,r20,32
  8079c0:	10005e1e 	bne	r2,zero,807b3c <___vfiprintf_internal_r+0xb08>
  8079c4:	a080040c 	andi	r2,r20,16
  8079c8:	1001a21e 	bne	r2,zero,808054 <___vfiprintf_internal_r+0x1020>
  8079cc:	a080100c 	andi	r2,r20,64
  8079d0:	d8001d85 	stb	zero,118(sp)
  8079d4:	da802217 	ldw	r10,136(sp)
  8079d8:	1002231e 	bne	r2,zero,808268 <___vfiprintf_internal_r+0x1234>
  8079dc:	50800104 	addi	r2,r10,4
  8079e0:	54800017 	ldw	r18,0(r10)
  8079e4:	0027883a 	mov	r19,zero
  8079e8:	4801a00e 	bge	r9,zero,80806c <___vfiprintf_internal_r+0x1038>
  8079ec:	d8802215 	stw	r2,136(sp)
  8079f0:	0039883a 	mov	fp,zero
  8079f4:	94c4b03a 	or	r2,r18,r19
  8079f8:	103f901e 	bne	r2,zero,80783c <__alt_data_end+0xff80783c>
  8079fc:	00800044 	movi	r2,1
  807a00:	10803fcc 	andi	r2,r2,255
  807a04:	00c00044 	movi	r3,1
  807a08:	10c05926 	beq	r2,r3,807b70 <___vfiprintf_internal_r+0xb3c>
  807a0c:	00c00084 	movi	r3,2
  807a10:	10ffe41e 	bne	r2,r3,8079a4 <__alt_data_end+0xff8079a4>
  807a14:	0025883a 	mov	r18,zero
  807a18:	0027883a 	mov	r19,zero
  807a1c:	00013d06 	br	807f14 <___vfiprintf_internal_r+0xee0>
  807a20:	21003fcc 	andi	r4,r4,255
  807a24:	2002811e 	bne	r4,zero,80842c <___vfiprintf_internal_r+0x13f8>
  807a28:	00802074 	movhi	r2,129
  807a2c:	10813804 	addi	r2,r2,1248
  807a30:	d8802615 	stw	r2,152(sp)
  807a34:	a080080c 	andi	r2,r20,32
  807a38:	103f561e 	bne	r2,zero,807794 <__alt_data_end+0xff807794>
  807a3c:	a080040c 	andi	r2,r20,16
  807a40:	1001d126 	beq	r2,zero,808188 <___vfiprintf_internal_r+0x1154>
  807a44:	da802217 	ldw	r10,136(sp)
  807a48:	0027883a 	mov	r19,zero
  807a4c:	54800017 	ldw	r18,0(r10)
  807a50:	52800104 	addi	r10,r10,4
  807a54:	da802215 	stw	r10,136(sp)
  807a58:	003f5306 	br	8077a8 <__alt_data_end+0xff8077a8>
  807a5c:	da802217 	ldw	r10,136(sp)
  807a60:	d8001d85 	stb	zero,118(sp)
  807a64:	55400017 	ldw	r21,0(r10)
  807a68:	50c00104 	addi	r3,r10,4
  807a6c:	a8024226 	beq	r21,zero,808378 <___vfiprintf_internal_r+0x1344>
  807a70:	48021816 	blt	r9,zero,8082d4 <___vfiprintf_internal_r+0x12a0>
  807a74:	480d883a 	mov	r6,r9
  807a78:	000b883a 	mov	r5,zero
  807a7c:	a809883a 	mov	r4,r21
  807a80:	d8c02a15 	stw	r3,168(sp)
  807a84:	da002b15 	stw	r8,172(sp)
  807a88:	da402c15 	stw	r9,176(sp)
  807a8c:	08058580 	call	805858 <memchr>
  807a90:	d8c02a17 	ldw	r3,168(sp)
  807a94:	da002b17 	ldw	r8,172(sp)
  807a98:	da402c17 	ldw	r9,176(sp)
  807a9c:	10024826 	beq	r2,zero,8083c0 <___vfiprintf_internal_r+0x138c>
  807aa0:	1567c83a 	sub	r19,r2,r21
  807aa4:	df001d83 	ldbu	fp,118(sp)
  807aa8:	d8c02215 	stw	r3,136(sp)
  807aac:	0013883a 	mov	r9,zero
  807ab0:	003e6006 	br	807434 <__alt_data_end+0xff807434>
  807ab4:	21003fcc 	andi	r4,r4,255
  807ab8:	203fc026 	beq	r4,zero,8079bc <__alt_data_end+0xff8079bc>
  807abc:	d9c01d85 	stb	r7,118(sp)
  807ac0:	003fbe06 	br	8079bc <__alt_data_end+0xff8079bc>
  807ac4:	da802217 	ldw	r10,136(sp)
  807ac8:	54400017 	ldw	r17,0(r10)
  807acc:	50800104 	addi	r2,r10,4
  807ad0:	883e3b16 	blt	r17,zero,8073c0 <__alt_data_end+0xff8073c0>
  807ad4:	d8802215 	stw	r2,136(sp)
  807ad8:	80c00007 	ldb	r3,0(r16)
  807adc:	003db406 	br	8071b0 <__alt_data_end+0xff8071b0>
  807ae0:	01000044 	movi	r4,1
  807ae4:	01c00ac4 	movi	r7,43
  807ae8:	80c00007 	ldb	r3,0(r16)
  807aec:	003db006 	br	8071b0 <__alt_data_end+0xff8071b0>
  807af0:	80c00007 	ldb	r3,0(r16)
  807af4:	82800044 	addi	r10,r16,1
  807af8:	1b423c26 	beq	r3,r13,8083ec <___vfiprintf_internal_r+0x13b8>
  807afc:	18bff404 	addi	r2,r3,-48
  807b00:	0013883a 	mov	r9,zero
  807b04:	30822b36 	bltu	r6,r2,8083b4 <___vfiprintf_internal_r+0x1380>
  807b08:	50c00007 	ldb	r3,0(r10)
  807b0c:	4a4002a4 	muli	r9,r9,10
  807b10:	54000044 	addi	r16,r10,1
  807b14:	8015883a 	mov	r10,r16
  807b18:	4893883a 	add	r9,r9,r2
  807b1c:	18bff404 	addi	r2,r3,-48
  807b20:	30bff92e 	bgeu	r6,r2,807b08 <__alt_data_end+0xff807b08>
  807b24:	483da30e 	bge	r9,zero,8071b4 <__alt_data_end+0xff8071b4>
  807b28:	027fffc4 	movi	r9,-1
  807b2c:	003da106 	br	8071b4 <__alt_data_end+0xff8071b4>
  807b30:	a5001014 	ori	r20,r20,64
  807b34:	80c00007 	ldb	r3,0(r16)
  807b38:	003d9d06 	br	8071b0 <__alt_data_end+0xff8071b0>
  807b3c:	da802217 	ldw	r10,136(sp)
  807b40:	d8001d85 	stb	zero,118(sp)
  807b44:	50c00204 	addi	r3,r10,8
  807b48:	54800017 	ldw	r18,0(r10)
  807b4c:	54c00117 	ldw	r19,4(r10)
  807b50:	4801ca16 	blt	r9,zero,80827c <___vfiprintf_internal_r+0x1248>
  807b54:	013fdfc4 	movi	r4,-129
  807b58:	94c4b03a 	or	r2,r18,r19
  807b5c:	d8c02215 	stw	r3,136(sp)
  807b60:	a128703a 	and	r20,r20,r4
  807b64:	0039883a 	mov	fp,zero
  807b68:	103f341e 	bne	r2,zero,80783c <__alt_data_end+0xff80783c>
  807b6c:	483e2e26 	beq	r9,zero,807428 <__alt_data_end+0xff807428>
  807b70:	0025883a 	mov	r18,zero
  807b74:	94800c04 	addi	r18,r18,48
  807b78:	dc8019c5 	stb	r18,103(sp)
  807b7c:	dcc02717 	ldw	r19,156(sp)
  807b80:	dd4019c4 	addi	r21,sp,103
  807b84:	003e2b06 	br	807434 <__alt_data_end+0xff807434>
  807b88:	21003fcc 	andi	r4,r4,255
  807b8c:	2002361e 	bne	r4,zero,808468 <___vfiprintf_internal_r+0x1434>
  807b90:	1801c126 	beq	r3,zero,808298 <___vfiprintf_internal_r+0x1264>
  807b94:	04800044 	movi	r18,1
  807b98:	d8c01005 	stb	r3,64(sp)
  807b9c:	d8001d85 	stb	zero,118(sp)
  807ba0:	9027883a 	mov	r19,r18
  807ba4:	dd401004 	addi	r21,sp,64
  807ba8:	003f1106 	br	8077f0 <__alt_data_end+0xff8077f0>
  807bac:	d9402117 	ldw	r5,132(sp)
  807bb0:	d9002017 	ldw	r4,128(sp)
  807bb4:	d9801a04 	addi	r6,sp,104
  807bb8:	d9c02b15 	stw	r7,172(sp)
  807bbc:	dbc02a15 	stw	r15,168(sp)
  807bc0:	0806f200 	call	806f20 <__sprint_r.part.0>
  807bc4:	d9c02b17 	ldw	r7,172(sp)
  807bc8:	dbc02a17 	ldw	r15,168(sp)
  807bcc:	10006d1e 	bne	r2,zero,807d84 <___vfiprintf_internal_r+0xd50>
  807bd0:	d9801b17 	ldw	r6,108(sp)
  807bd4:	d8801c17 	ldw	r2,112(sp)
  807bd8:	d811883a 	mov	r8,sp
  807bdc:	31400044 	addi	r5,r6,1
  807be0:	003e3306 	br	8074b0 <__alt_data_end+0xff8074b0>
  807be4:	d9401b17 	ldw	r5,108(sp)
  807be8:	d8801c17 	ldw	r2,112(sp)
  807bec:	29000044 	addi	r4,r5,1
  807bf0:	d8c01d87 	ldb	r3,118(sp)
  807bf4:	183e4d26 	beq	r3,zero,80752c <__alt_data_end+0xff80752c>
  807bf8:	00c00044 	movi	r3,1
  807bfc:	d9401d84 	addi	r5,sp,118
  807c00:	10c5883a 	add	r2,r2,r3
  807c04:	41400015 	stw	r5,0(r8)
  807c08:	40c00115 	stw	r3,4(r8)
  807c0c:	d8801c15 	stw	r2,112(sp)
  807c10:	d9001b15 	stw	r4,108(sp)
  807c14:	014001c4 	movi	r5,7
  807c18:	2900a90e 	bge	r5,r4,807ec0 <___vfiprintf_internal_r+0xe8c>
  807c1c:	1000da1e 	bne	r2,zero,807f88 <___vfiprintf_internal_r+0xf54>
  807c20:	7000ab1e 	bne	r14,zero,807ed0 <___vfiprintf_internal_r+0xe9c>
  807c24:	000b883a 	mov	r5,zero
  807c28:	1809883a 	mov	r4,r3
  807c2c:	d811883a 	mov	r8,sp
  807c30:	00c02004 	movi	r3,128
  807c34:	e0fe4d26 	beq	fp,r3,80756c <__alt_data_end+0xff80756c>
  807c38:	4cf9c83a 	sub	fp,r9,r19
  807c3c:	073e7b0e 	bge	zero,fp,80762c <__alt_data_end+0xff80762c>
  807c40:	01c00404 	movi	r7,16
  807c44:	3f01900e 	bge	r7,fp,808288 <___vfiprintf_internal_r+0x1254>
  807c48:	00c02074 	movhi	r3,129
  807c4c:	18c19e04 	addi	r3,r3,1656
  807c50:	d8c02415 	stw	r3,144(sp)
  807c54:	034001c4 	movi	r13,7
  807c58:	00000506 	br	807c70 <___vfiprintf_internal_r+0xc3c>
  807c5c:	29000084 	addi	r4,r5,2
  807c60:	42000204 	addi	r8,r8,8
  807c64:	180b883a 	mov	r5,r3
  807c68:	e73ffc04 	addi	fp,fp,-16
  807c6c:	3f000d0e 	bge	r7,fp,807ca4 <___vfiprintf_internal_r+0xc70>
  807c70:	10800404 	addi	r2,r2,16
  807c74:	28c00044 	addi	r3,r5,1
  807c78:	45c00015 	stw	r23,0(r8)
  807c7c:	41c00115 	stw	r7,4(r8)
  807c80:	d8801c15 	stw	r2,112(sp)
  807c84:	d8c01b15 	stw	r3,108(sp)
  807c88:	68fff40e 	bge	r13,r3,807c5c <__alt_data_end+0xff807c5c>
  807c8c:	1000101e 	bne	r2,zero,807cd0 <___vfiprintf_internal_r+0xc9c>
  807c90:	e73ffc04 	addi	fp,fp,-16
  807c94:	01000044 	movi	r4,1
  807c98:	000b883a 	mov	r5,zero
  807c9c:	d811883a 	mov	r8,sp
  807ca0:	3f3ff316 	blt	r7,fp,807c70 <__alt_data_end+0xff807c70>
  807ca4:	da802417 	ldw	r10,144(sp)
  807ca8:	1705883a 	add	r2,r2,fp
  807cac:	47000115 	stw	fp,4(r8)
  807cb0:	42800015 	stw	r10,0(r8)
  807cb4:	d8801c15 	stw	r2,112(sp)
  807cb8:	d9001b15 	stw	r4,108(sp)
  807cbc:	00c001c4 	movi	r3,7
  807cc0:	19003616 	blt	r3,r4,807d9c <___vfiprintf_internal_r+0xd68>
  807cc4:	42000204 	addi	r8,r8,8
  807cc8:	21000044 	addi	r4,r4,1
  807ccc:	003e5706 	br	80762c <__alt_data_end+0xff80762c>
  807cd0:	d9402117 	ldw	r5,132(sp)
  807cd4:	d9002017 	ldw	r4,128(sp)
  807cd8:	d9801a04 	addi	r6,sp,104
  807cdc:	d9c02b15 	stw	r7,172(sp)
  807ce0:	db402a15 	stw	r13,168(sp)
  807ce4:	0806f200 	call	806f20 <__sprint_r.part.0>
  807ce8:	d9c02b17 	ldw	r7,172(sp)
  807cec:	db402a17 	ldw	r13,168(sp)
  807cf0:	1000241e 	bne	r2,zero,807d84 <___vfiprintf_internal_r+0xd50>
  807cf4:	d9401b17 	ldw	r5,108(sp)
  807cf8:	d8801c17 	ldw	r2,112(sp)
  807cfc:	d811883a 	mov	r8,sp
  807d00:	29000044 	addi	r4,r5,1
  807d04:	003fd806 	br	807c68 <__alt_data_end+0xff807c68>
  807d08:	d9401b17 	ldw	r5,108(sp)
  807d0c:	00c02074 	movhi	r3,129
  807d10:	18c1a204 	addi	r3,r3,1672
  807d14:	d8c02415 	stw	r3,144(sp)
  807d18:	29400044 	addi	r5,r5,1
  807d1c:	d8c02417 	ldw	r3,144(sp)
  807d20:	14c5883a 	add	r2,r2,r19
  807d24:	44c00115 	stw	r19,4(r8)
  807d28:	40c00015 	stw	r3,0(r8)
  807d2c:	d8801c15 	stw	r2,112(sp)
  807d30:	d9401b15 	stw	r5,108(sp)
  807d34:	00c001c4 	movi	r3,7
  807d38:	1940070e 	bge	r3,r5,807d58 <___vfiprintf_internal_r+0xd24>
  807d3c:	103e4826 	beq	r2,zero,807660 <__alt_data_end+0xff807660>
  807d40:	d9402117 	ldw	r5,132(sp)
  807d44:	d9002017 	ldw	r4,128(sp)
  807d48:	d9801a04 	addi	r6,sp,104
  807d4c:	0806f200 	call	806f20 <__sprint_r.part.0>
  807d50:	10000c1e 	bne	r2,zero,807d84 <___vfiprintf_internal_r+0xd50>
  807d54:	d8801c17 	ldw	r2,112(sp)
  807d58:	8c80010e 	bge	r17,r18,807d60 <___vfiprintf_internal_r+0xd2c>
  807d5c:	9023883a 	mov	r17,r18
  807d60:	da802317 	ldw	r10,140(sp)
  807d64:	5455883a 	add	r10,r10,r17
  807d68:	da802315 	stw	r10,140(sp)
  807d6c:	103e4126 	beq	r2,zero,807674 <__alt_data_end+0xff807674>
  807d70:	d9402117 	ldw	r5,132(sp)
  807d74:	d9002017 	ldw	r4,128(sp)
  807d78:	d9801a04 	addi	r6,sp,104
  807d7c:	0806f200 	call	806f20 <__sprint_r.part.0>
  807d80:	103e3c26 	beq	r2,zero,807674 <__alt_data_end+0xff807674>
  807d84:	dd002117 	ldw	r20,132(sp)
  807d88:	a080030b 	ldhu	r2,12(r20)
  807d8c:	1080100c 	andi	r2,r2,64
  807d90:	1001231e 	bne	r2,zero,808220 <___vfiprintf_internal_r+0x11ec>
  807d94:	d8802317 	ldw	r2,140(sp)
  807d98:	003d7b06 	br	807388 <__alt_data_end+0xff807388>
  807d9c:	1000991e 	bne	r2,zero,808004 <___vfiprintf_internal_r+0xfd0>
  807da0:	00c00044 	movi	r3,1
  807da4:	9805883a 	mov	r2,r19
  807da8:	dd400015 	stw	r21,0(sp)
  807dac:	dcc00115 	stw	r19,4(sp)
  807db0:	dcc01c15 	stw	r19,112(sp)
  807db4:	d8c01b15 	stw	r3,108(sp)
  807db8:	d811883a 	mov	r8,sp
  807dbc:	42000204 	addi	r8,r8,8
  807dc0:	a2c0010c 	andi	r11,r20,4
  807dc4:	583fe426 	beq	r11,zero,807d58 <__alt_data_end+0xff807d58>
  807dc8:	8ca7c83a 	sub	r19,r17,r18
  807dcc:	04ffe20e 	bge	zero,r19,807d58 <__alt_data_end+0xff807d58>
  807dd0:	01c00404 	movi	r7,16
  807dd4:	3cffcc0e 	bge	r7,r19,807d08 <__alt_data_end+0xff807d08>
  807dd8:	02802074 	movhi	r10,129
  807ddc:	5281a204 	addi	r10,r10,1672
  807de0:	d9001b17 	ldw	r4,108(sp)
  807de4:	da802415 	stw	r10,144(sp)
  807de8:	382b883a 	mov	r21,r7
  807dec:	050001c4 	movi	r20,7
  807df0:	df002017 	ldw	fp,128(sp)
  807df4:	00000506 	br	807e0c <___vfiprintf_internal_r+0xdd8>
  807df8:	21400084 	addi	r5,r4,2
  807dfc:	42000204 	addi	r8,r8,8
  807e00:	1809883a 	mov	r4,r3
  807e04:	9cfffc04 	addi	r19,r19,-16
  807e08:	acffc40e 	bge	r21,r19,807d1c <__alt_data_end+0xff807d1c>
  807e0c:	10800404 	addi	r2,r2,16
  807e10:	20c00044 	addi	r3,r4,1
  807e14:	45800015 	stw	r22,0(r8)
  807e18:	45400115 	stw	r21,4(r8)
  807e1c:	d8801c15 	stw	r2,112(sp)
  807e20:	d8c01b15 	stw	r3,108(sp)
  807e24:	a0fff40e 	bge	r20,r3,807df8 <__alt_data_end+0xff807df8>
  807e28:	1000041e 	bne	r2,zero,807e3c <___vfiprintf_internal_r+0xe08>
  807e2c:	01400044 	movi	r5,1
  807e30:	0009883a 	mov	r4,zero
  807e34:	d811883a 	mov	r8,sp
  807e38:	003ff206 	br	807e04 <__alt_data_end+0xff807e04>
  807e3c:	d9402117 	ldw	r5,132(sp)
  807e40:	d9801a04 	addi	r6,sp,104
  807e44:	e009883a 	mov	r4,fp
  807e48:	0806f200 	call	806f20 <__sprint_r.part.0>
  807e4c:	103fcd1e 	bne	r2,zero,807d84 <__alt_data_end+0xff807d84>
  807e50:	d9001b17 	ldw	r4,108(sp)
  807e54:	d8801c17 	ldw	r2,112(sp)
  807e58:	d811883a 	mov	r8,sp
  807e5c:	21400044 	addi	r5,r4,1
  807e60:	003fe806 	br	807e04 <__alt_data_end+0xff807e04>
  807e64:	d9402117 	ldw	r5,132(sp)
  807e68:	d9002017 	ldw	r4,128(sp)
  807e6c:	d9801a04 	addi	r6,sp,104
  807e70:	d9c02b15 	stw	r7,172(sp)
  807e74:	db402a15 	stw	r13,168(sp)
  807e78:	0806f200 	call	806f20 <__sprint_r.part.0>
  807e7c:	d9c02b17 	ldw	r7,172(sp)
  807e80:	db402a17 	ldw	r13,168(sp)
  807e84:	103fbf1e 	bne	r2,zero,807d84 <__alt_data_end+0xff807d84>
  807e88:	d9401b17 	ldw	r5,108(sp)
  807e8c:	d8801c17 	ldw	r2,112(sp)
  807e90:	d811883a 	mov	r8,sp
  807e94:	29800044 	addi	r6,r5,1
  807e98:	003dc406 	br	8075ac <__alt_data_end+0xff8075ac>
  807e9c:	1000d21e 	bne	r2,zero,8081e8 <___vfiprintf_internal_r+0x11b4>
  807ea0:	d8c01d87 	ldb	r3,118(sp)
  807ea4:	18009526 	beq	r3,zero,8080fc <___vfiprintf_internal_r+0x10c8>
  807ea8:	00800044 	movi	r2,1
  807eac:	d8c01d84 	addi	r3,sp,118
  807eb0:	1009883a 	mov	r4,r2
  807eb4:	d8c00015 	stw	r3,0(sp)
  807eb8:	d8800115 	stw	r2,4(sp)
  807ebc:	d811883a 	mov	r8,sp
  807ec0:	200b883a 	mov	r5,r4
  807ec4:	42000204 	addi	r8,r8,8
  807ec8:	21000044 	addi	r4,r4,1
  807ecc:	003d9706 	br	80752c <__alt_data_end+0xff80752c>
  807ed0:	d9001d04 	addi	r4,sp,116
  807ed4:	00800084 	movi	r2,2
  807ed8:	d9000015 	stw	r4,0(sp)
  807edc:	d8800115 	stw	r2,4(sp)
  807ee0:	1809883a 	mov	r4,r3
  807ee4:	d811883a 	mov	r8,sp
  807ee8:	200b883a 	mov	r5,r4
  807eec:	42000204 	addi	r8,r8,8
  807ef0:	21000044 	addi	r4,r4,1
  807ef4:	003f4e06 	br	807c30 <__alt_data_end+0xff807c30>
  807ef8:	d8001d85 	stb	zero,118(sp)
  807efc:	48005016 	blt	r9,zero,808040 <___vfiprintf_internal_r+0x100c>
  807f00:	00ffdfc4 	movi	r3,-129
  807f04:	94c4b03a 	or	r2,r18,r19
  807f08:	a0e8703a 	and	r20,r20,r3
  807f0c:	103d4426 	beq	r2,zero,807420 <__alt_data_end+0xff807420>
  807f10:	0039883a 	mov	fp,zero
  807f14:	d9002617 	ldw	r4,152(sp)
  807f18:	dd401a04 	addi	r21,sp,104
  807f1c:	908003cc 	andi	r2,r18,15
  807f20:	9806973a 	slli	r3,r19,28
  807f24:	2085883a 	add	r2,r4,r2
  807f28:	9024d13a 	srli	r18,r18,4
  807f2c:	10800003 	ldbu	r2,0(r2)
  807f30:	9826d13a 	srli	r19,r19,4
  807f34:	ad7fffc4 	addi	r21,r21,-1
  807f38:	1ca4b03a 	or	r18,r3,r18
  807f3c:	a8800005 	stb	r2,0(r21)
  807f40:	94c4b03a 	or	r2,r18,r19
  807f44:	103ff51e 	bne	r2,zero,807f1c <__alt_data_end+0xff807f1c>
  807f48:	003e5906 	br	8078b0 <__alt_data_end+0xff8078b0>
  807f4c:	d9402117 	ldw	r5,132(sp)
  807f50:	d9002017 	ldw	r4,128(sp)
  807f54:	d9801a04 	addi	r6,sp,104
  807f58:	0806f200 	call	806f20 <__sprint_r.part.0>
  807f5c:	103f891e 	bne	r2,zero,807d84 <__alt_data_end+0xff807d84>
  807f60:	d8801c17 	ldw	r2,112(sp)
  807f64:	d811883a 	mov	r8,sp
  807f68:	003f9506 	br	807dc0 <__alt_data_end+0xff807dc0>
  807f6c:	d9402117 	ldw	r5,132(sp)
  807f70:	d9002017 	ldw	r4,128(sp)
  807f74:	d9801a04 	addi	r6,sp,104
  807f78:	0806f200 	call	806f20 <__sprint_r.part.0>
  807f7c:	103f811e 	bne	r2,zero,807d84 <__alt_data_end+0xff807d84>
  807f80:	d811883a 	mov	r8,sp
  807f84:	003ced06 	br	80733c <__alt_data_end+0xff80733c>
  807f88:	d9402117 	ldw	r5,132(sp)
  807f8c:	d9002017 	ldw	r4,128(sp)
  807f90:	d9801a04 	addi	r6,sp,104
  807f94:	da402c15 	stw	r9,176(sp)
  807f98:	db802a15 	stw	r14,168(sp)
  807f9c:	0806f200 	call	806f20 <__sprint_r.part.0>
  807fa0:	da402c17 	ldw	r9,176(sp)
  807fa4:	db802a17 	ldw	r14,168(sp)
  807fa8:	103f761e 	bne	r2,zero,807d84 <__alt_data_end+0xff807d84>
  807fac:	d9401b17 	ldw	r5,108(sp)
  807fb0:	d8801c17 	ldw	r2,112(sp)
  807fb4:	d811883a 	mov	r8,sp
  807fb8:	29000044 	addi	r4,r5,1
  807fbc:	003d5b06 	br	80752c <__alt_data_end+0xff80752c>
  807fc0:	d9402117 	ldw	r5,132(sp)
  807fc4:	d9002017 	ldw	r4,128(sp)
  807fc8:	d9801a04 	addi	r6,sp,104
  807fcc:	da402c15 	stw	r9,176(sp)
  807fd0:	0806f200 	call	806f20 <__sprint_r.part.0>
  807fd4:	da402c17 	ldw	r9,176(sp)
  807fd8:	103f6a1e 	bne	r2,zero,807d84 <__alt_data_end+0xff807d84>
  807fdc:	d9401b17 	ldw	r5,108(sp)
  807fe0:	d8801c17 	ldw	r2,112(sp)
  807fe4:	d811883a 	mov	r8,sp
  807fe8:	29000044 	addi	r4,r5,1
  807fec:	003f1006 	br	807c30 <__alt_data_end+0xff807c30>
  807ff0:	1000c31e 	bne	r2,zero,808300 <___vfiprintf_internal_r+0x12cc>
  807ff4:	01000044 	movi	r4,1
  807ff8:	000b883a 	mov	r5,zero
  807ffc:	d811883a 	mov	r8,sp
  808000:	003f0d06 	br	807c38 <__alt_data_end+0xff807c38>
  808004:	d9402117 	ldw	r5,132(sp)
  808008:	d9002017 	ldw	r4,128(sp)
  80800c:	d9801a04 	addi	r6,sp,104
  808010:	0806f200 	call	806f20 <__sprint_r.part.0>
  808014:	103f5b1e 	bne	r2,zero,807d84 <__alt_data_end+0xff807d84>
  808018:	d9001b17 	ldw	r4,108(sp)
  80801c:	d8801c17 	ldw	r2,112(sp)
  808020:	d811883a 	mov	r8,sp
  808024:	21000044 	addi	r4,r4,1
  808028:	003d8006 	br	80762c <__alt_data_end+0xff80762c>
  80802c:	01002074 	movhi	r4,129
  808030:	21013d04 	addi	r4,r4,1268
  808034:	d9002615 	stw	r4,152(sp)
  808038:	d8c02215 	stw	r3,136(sp)
  80803c:	1029883a 	mov	r20,r2
  808040:	94c4b03a 	or	r2,r18,r19
  808044:	103fb21e 	bne	r2,zero,807f10 <__alt_data_end+0xff807f10>
  808048:	0039883a 	mov	fp,zero
  80804c:	00800084 	movi	r2,2
  808050:	003e6b06 	br	807a00 <__alt_data_end+0xff807a00>
  808054:	da802217 	ldw	r10,136(sp)
  808058:	d8001d85 	stb	zero,118(sp)
  80805c:	0027883a 	mov	r19,zero
  808060:	50800104 	addi	r2,r10,4
  808064:	54800017 	ldw	r18,0(r10)
  808068:	483e6016 	blt	r9,zero,8079ec <__alt_data_end+0xff8079ec>
  80806c:	00ffdfc4 	movi	r3,-129
  808070:	d8802215 	stw	r2,136(sp)
  808074:	a0e8703a 	and	r20,r20,r3
  808078:	0039883a 	mov	fp,zero
  80807c:	903ebb26 	beq	r18,zero,807b6c <__alt_data_end+0xff807b6c>
  808080:	00800244 	movi	r2,9
  808084:	14bdee36 	bltu	r2,r18,807840 <__alt_data_end+0xff807840>
  808088:	003eba06 	br	807b74 <__alt_data_end+0xff807b74>
  80808c:	00800c04 	movi	r2,48
  808090:	d8c01d45 	stb	r3,117(sp)
  808094:	d8801d05 	stb	r2,116(sp)
  808098:	d8001d85 	stb	zero,118(sp)
  80809c:	a0c00094 	ori	r3,r20,2
  8080a0:	4800a916 	blt	r9,zero,808348 <___vfiprintf_internal_r+0x1314>
  8080a4:	00bfdfc4 	movi	r2,-129
  8080a8:	a096703a 	and	r11,r20,r2
  8080ac:	5d000094 	ori	r20,r11,2
  8080b0:	0039883a 	mov	fp,zero
  8080b4:	003f9706 	br	807f14 <__alt_data_end+0xff807f14>
  8080b8:	8025883a 	mov	r18,r16
  8080bc:	003c2e06 	br	807178 <__alt_data_end+0xff807178>
  8080c0:	00802074 	movhi	r2,129
  8080c4:	10813d04 	addi	r2,r2,1268
  8080c8:	0039883a 	mov	fp,zero
  8080cc:	d8802615 	stw	r2,152(sp)
  8080d0:	003f9006 	br	807f14 <__alt_data_end+0xff807f14>
  8080d4:	04a5c83a 	sub	r18,zero,r18
  8080d8:	07000b44 	movi	fp,45
  8080dc:	9004c03a 	cmpne	r2,r18,zero
  8080e0:	04e7c83a 	sub	r19,zero,r19
  8080e4:	df001d85 	stb	fp,118(sp)
  8080e8:	98a7c83a 	sub	r19,r19,r2
  8080ec:	48009f16 	blt	r9,zero,80836c <___vfiprintf_internal_r+0x1338>
  8080f0:	00bfdfc4 	movi	r2,-129
  8080f4:	a0a8703a 	and	r20,r20,r2
  8080f8:	003dd006 	br	80783c <__alt_data_end+0xff80783c>
  8080fc:	70004c26 	beq	r14,zero,808230 <___vfiprintf_internal_r+0x11fc>
  808100:	00800084 	movi	r2,2
  808104:	d8c01d04 	addi	r3,sp,116
  808108:	d8c00015 	stw	r3,0(sp)
  80810c:	d8800115 	stw	r2,4(sp)
  808110:	01000044 	movi	r4,1
  808114:	d811883a 	mov	r8,sp
  808118:	003f7306 	br	807ee8 <__alt_data_end+0xff807ee8>
  80811c:	a080100c 	andi	r2,r20,64
  808120:	da802217 	ldw	r10,136(sp)
  808124:	103e0626 	beq	r2,zero,807940 <__alt_data_end+0xff807940>
  808128:	5480000f 	ldh	r18,0(r10)
  80812c:	52800104 	addi	r10,r10,4
  808130:	da802215 	stw	r10,136(sp)
  808134:	9027d7fa 	srai	r19,r18,31
  808138:	9805883a 	mov	r2,r19
  80813c:	003db806 	br	807820 <__alt_data_end+0xff807820>
  808140:	a080040c 	andi	r2,r20,16
  808144:	1000091e 	bne	r2,zero,80816c <___vfiprintf_internal_r+0x1138>
  808148:	a2c0100c 	andi	r11,r20,64
  80814c:	58000726 	beq	r11,zero,80816c <___vfiprintf_internal_r+0x1138>
  808150:	da802217 	ldw	r10,136(sp)
  808154:	50800017 	ldw	r2,0(r10)
  808158:	52800104 	addi	r10,r10,4
  80815c:	da802215 	stw	r10,136(sp)
  808160:	da802317 	ldw	r10,140(sp)
  808164:	1280000d 	sth	r10,0(r2)
  808168:	003be706 	br	807108 <__alt_data_end+0xff807108>
  80816c:	da802217 	ldw	r10,136(sp)
  808170:	50800017 	ldw	r2,0(r10)
  808174:	52800104 	addi	r10,r10,4
  808178:	da802215 	stw	r10,136(sp)
  80817c:	da802317 	ldw	r10,140(sp)
  808180:	12800015 	stw	r10,0(r2)
  808184:	003be006 	br	807108 <__alt_data_end+0xff807108>
  808188:	a080100c 	andi	r2,r20,64
  80818c:	da802217 	ldw	r10,136(sp)
  808190:	10003026 	beq	r2,zero,808254 <___vfiprintf_internal_r+0x1220>
  808194:	5480000b 	ldhu	r18,0(r10)
  808198:	52800104 	addi	r10,r10,4
  80819c:	0027883a 	mov	r19,zero
  8081a0:	da802215 	stw	r10,136(sp)
  8081a4:	003d8006 	br	8077a8 <__alt_data_end+0xff8077a8>
  8081a8:	80c00007 	ldb	r3,0(r16)
  8081ac:	003c0006 	br	8071b0 <__alt_data_end+0xff8071b0>
  8081b0:	a080100c 	andi	r2,r20,64
  8081b4:	d8001d85 	stb	zero,118(sp)
  8081b8:	da802217 	ldw	r10,136(sp)
  8081bc:	1000201e 	bne	r2,zero,808240 <___vfiprintf_internal_r+0x120c>
  8081c0:	50800104 	addi	r2,r10,4
  8081c4:	54800017 	ldw	r18,0(r10)
  8081c8:	0027883a 	mov	r19,zero
  8081cc:	483def0e 	bge	r9,zero,80798c <__alt_data_end+0xff80798c>
  8081d0:	94c6b03a 	or	r3,r18,r19
  8081d4:	d8802215 	stw	r2,136(sp)
  8081d8:	183d4e1e 	bne	r3,zero,807714 <__alt_data_end+0xff807714>
  8081dc:	0039883a 	mov	fp,zero
  8081e0:	0005883a 	mov	r2,zero
  8081e4:	003e0606 	br	807a00 <__alt_data_end+0xff807a00>
  8081e8:	d9402117 	ldw	r5,132(sp)
  8081ec:	d9002017 	ldw	r4,128(sp)
  8081f0:	d9801a04 	addi	r6,sp,104
  8081f4:	da402c15 	stw	r9,176(sp)
  8081f8:	db802a15 	stw	r14,168(sp)
  8081fc:	0806f200 	call	806f20 <__sprint_r.part.0>
  808200:	da402c17 	ldw	r9,176(sp)
  808204:	db802a17 	ldw	r14,168(sp)
  808208:	103ede1e 	bne	r2,zero,807d84 <__alt_data_end+0xff807d84>
  80820c:	d9401b17 	ldw	r5,108(sp)
  808210:	d8801c17 	ldw	r2,112(sp)
  808214:	d811883a 	mov	r8,sp
  808218:	29000044 	addi	r4,r5,1
  80821c:	003e7406 	br	807bf0 <__alt_data_end+0xff807bf0>
  808220:	00bfffc4 	movi	r2,-1
  808224:	003c5806 	br	807388 <__alt_data_end+0xff807388>
  808228:	d811883a 	mov	r8,sp
  80822c:	003ee806 	br	807dd0 <__alt_data_end+0xff807dd0>
  808230:	000b883a 	mov	r5,zero
  808234:	01000044 	movi	r4,1
  808238:	d811883a 	mov	r8,sp
  80823c:	003e7c06 	br	807c30 <__alt_data_end+0xff807c30>
  808240:	50800104 	addi	r2,r10,4
  808244:	5480000b 	ldhu	r18,0(r10)
  808248:	0027883a 	mov	r19,zero
  80824c:	483dcf0e 	bge	r9,zero,80798c <__alt_data_end+0xff80798c>
  808250:	003fdf06 	br	8081d0 <__alt_data_end+0xff8081d0>
  808254:	54800017 	ldw	r18,0(r10)
  808258:	52800104 	addi	r10,r10,4
  80825c:	0027883a 	mov	r19,zero
  808260:	da802215 	stw	r10,136(sp)
  808264:	003d5006 	br	8077a8 <__alt_data_end+0xff8077a8>
  808268:	50800104 	addi	r2,r10,4
  80826c:	5480000b 	ldhu	r18,0(r10)
  808270:	0027883a 	mov	r19,zero
  808274:	483f7d0e 	bge	r9,zero,80806c <__alt_data_end+0xff80806c>
  808278:	003ddc06 	br	8079ec <__alt_data_end+0xff8079ec>
  80827c:	d8c02215 	stw	r3,136(sp)
  808280:	0039883a 	mov	fp,zero
  808284:	003ddb06 	br	8079f4 <__alt_data_end+0xff8079f4>
  808288:	02802074 	movhi	r10,129
  80828c:	52819e04 	addi	r10,r10,1656
  808290:	da802415 	stw	r10,144(sp)
  808294:	003e8306 	br	807ca4 <__alt_data_end+0xff807ca4>
  808298:	d8801c17 	ldw	r2,112(sp)
  80829c:	dd002117 	ldw	r20,132(sp)
  8082a0:	103eb926 	beq	r2,zero,807d88 <__alt_data_end+0xff807d88>
  8082a4:	d9002017 	ldw	r4,128(sp)
  8082a8:	d9801a04 	addi	r6,sp,104
  8082ac:	a00b883a 	mov	r5,r20
  8082b0:	0806f200 	call	806f20 <__sprint_r.part.0>
  8082b4:	003eb406 	br	807d88 <__alt_data_end+0xff807d88>
  8082b8:	80c00043 	ldbu	r3,1(r16)
  8082bc:	a5000814 	ori	r20,r20,32
  8082c0:	84000044 	addi	r16,r16,1
  8082c4:	18c03fcc 	andi	r3,r3,255
  8082c8:	18c0201c 	xori	r3,r3,128
  8082cc:	18ffe004 	addi	r3,r3,-128
  8082d0:	003bb706 	br	8071b0 <__alt_data_end+0xff8071b0>
  8082d4:	a809883a 	mov	r4,r21
  8082d8:	d8c02a15 	stw	r3,168(sp)
  8082dc:	da002b15 	stw	r8,172(sp)
  8082e0:	0806e880 	call	806e88 <strlen>
  8082e4:	d8c02a17 	ldw	r3,168(sp)
  8082e8:	1027883a 	mov	r19,r2
  8082ec:	df001d83 	ldbu	fp,118(sp)
  8082f0:	d8c02215 	stw	r3,136(sp)
  8082f4:	0013883a 	mov	r9,zero
  8082f8:	da002b17 	ldw	r8,172(sp)
  8082fc:	003c4d06 	br	807434 <__alt_data_end+0xff807434>
  808300:	d9402117 	ldw	r5,132(sp)
  808304:	d9002017 	ldw	r4,128(sp)
  808308:	d9801a04 	addi	r6,sp,104
  80830c:	da402c15 	stw	r9,176(sp)
  808310:	0806f200 	call	806f20 <__sprint_r.part.0>
  808314:	da402c17 	ldw	r9,176(sp)
  808318:	103e9a1e 	bne	r2,zero,807d84 <__alt_data_end+0xff807d84>
  80831c:	d9401b17 	ldw	r5,108(sp)
  808320:	d8801c17 	ldw	r2,112(sp)
  808324:	d811883a 	mov	r8,sp
  808328:	29000044 	addi	r4,r5,1
  80832c:	003e4206 	br	807c38 <__alt_data_end+0xff807c38>
  808330:	d9401b17 	ldw	r5,108(sp)
  808334:	01002074 	movhi	r4,129
  808338:	2101a204 	addi	r4,r4,1672
  80833c:	d9002415 	stw	r4,144(sp)
  808340:	29400044 	addi	r5,r5,1
  808344:	003c6d06 	br	8074fc <__alt_data_end+0xff8074fc>
  808348:	0039883a 	mov	fp,zero
  80834c:	00800084 	movi	r2,2
  808350:	10803fcc 	andi	r2,r2,255
  808354:	01000044 	movi	r4,1
  808358:	11001e26 	beq	r2,r4,8083d4 <___vfiprintf_internal_r+0x13a0>
  80835c:	01000084 	movi	r4,2
  808360:	11001e1e 	bne	r2,r4,8083dc <___vfiprintf_internal_r+0x13a8>
  808364:	1829883a 	mov	r20,r3
  808368:	003eea06 	br	807f14 <__alt_data_end+0xff807f14>
  80836c:	a007883a 	mov	r3,r20
  808370:	00800044 	movi	r2,1
  808374:	003ff606 	br	808350 <__alt_data_end+0xff808350>
  808378:	00800184 	movi	r2,6
  80837c:	1240012e 	bgeu	r2,r9,808384 <___vfiprintf_internal_r+0x1350>
  808380:	1013883a 	mov	r9,r2
  808384:	4827883a 	mov	r19,r9
  808388:	4825883a 	mov	r18,r9
  80838c:	48001516 	blt	r9,zero,8083e4 <___vfiprintf_internal_r+0x13b0>
  808390:	05402074 	movhi	r21,129
  808394:	d8c02215 	stw	r3,136(sp)
  808398:	ad414204 	addi	r21,r21,1288
  80839c:	003d1406 	br	8077f0 <__alt_data_end+0xff8077f0>
  8083a0:	02802074 	movhi	r10,129
  8083a4:	52819e04 	addi	r10,r10,1656
  8083a8:	da802415 	stw	r10,144(sp)
  8083ac:	200d883a 	mov	r6,r4
  8083b0:	003c9106 	br	8075f8 <__alt_data_end+0xff8075f8>
  8083b4:	5021883a 	mov	r16,r10
  8083b8:	0013883a 	mov	r9,zero
  8083bc:	003b7d06 	br	8071b4 <__alt_data_end+0xff8071b4>
  8083c0:	4827883a 	mov	r19,r9
  8083c4:	df001d83 	ldbu	fp,118(sp)
  8083c8:	d8c02215 	stw	r3,136(sp)
  8083cc:	0013883a 	mov	r9,zero
  8083d0:	003c1806 	br	807434 <__alt_data_end+0xff807434>
  8083d4:	1829883a 	mov	r20,r3
  8083d8:	003d1806 	br	80783c <__alt_data_end+0xff80783c>
  8083dc:	1829883a 	mov	r20,r3
  8083e0:	003ccd06 	br	807718 <__alt_data_end+0xff807718>
  8083e4:	0025883a 	mov	r18,zero
  8083e8:	003fe906 	br	808390 <__alt_data_end+0xff808390>
  8083ec:	d8802217 	ldw	r2,136(sp)
  8083f0:	80c00043 	ldbu	r3,1(r16)
  8083f4:	5021883a 	mov	r16,r10
  8083f8:	12400017 	ldw	r9,0(r2)
  8083fc:	10800104 	addi	r2,r2,4
  808400:	d8802215 	stw	r2,136(sp)
  808404:	483faf0e 	bge	r9,zero,8082c4 <__alt_data_end+0xff8082c4>
  808408:	18c03fcc 	andi	r3,r3,255
  80840c:	18c0201c 	xori	r3,r3,128
  808410:	027fffc4 	movi	r9,-1
  808414:	18ffe004 	addi	r3,r3,-128
  808418:	003b6506 	br	8071b0 <__alt_data_end+0xff8071b0>
  80841c:	d9c01d85 	stb	r7,118(sp)
  808420:	003ca006 	br	8076a4 <__alt_data_end+0xff8076a4>
  808424:	d9c01d85 	stb	r7,118(sp)
  808428:	003cad06 	br	8076e0 <__alt_data_end+0xff8076e0>
  80842c:	d9c01d85 	stb	r7,118(sp)
  808430:	003d7d06 	br	807a28 <__alt_data_end+0xff807a28>
  808434:	d9c01d85 	stb	r7,118(sp)
  808438:	003d5f06 	br	8079b8 <__alt_data_end+0xff8079b8>
  80843c:	a080004c 	andi	r2,r20,1
  808440:	0039883a 	mov	fp,zero
  808444:	10000526 	beq	r2,zero,80845c <___vfiprintf_internal_r+0x1428>
  808448:	00800c04 	movi	r2,48
  80844c:	d88019c5 	stb	r2,103(sp)
  808450:	dcc02717 	ldw	r19,156(sp)
  808454:	dd4019c4 	addi	r21,sp,103
  808458:	003bf606 	br	807434 <__alt_data_end+0xff807434>
  80845c:	0027883a 	mov	r19,zero
  808460:	dd401a04 	addi	r21,sp,104
  808464:	003bf306 	br	807434 <__alt_data_end+0xff807434>
  808468:	d9c01d85 	stb	r7,118(sp)
  80846c:	003dc806 	br	807b90 <__alt_data_end+0xff807b90>
  808470:	d9c01d85 	stb	r7,118(sp)
  808474:	003d3a06 	br	807960 <__alt_data_end+0xff807960>
  808478:	d9c01d85 	stb	r7,118(sp)
  80847c:	003d2a06 	br	807928 <__alt_data_end+0xff807928>
  808480:	d9c01d85 	stb	r7,118(sp)
  808484:	003cde06 	br	807800 <__alt_data_end+0xff807800>
  808488:	d9c01d85 	stb	r7,118(sp)
  80848c:	003cbc06 	br	807780 <__alt_data_end+0xff807780>

00808490 <__vfiprintf_internal>:
  808490:	00802074 	movhi	r2,129
  808494:	1085d504 	addi	r2,r2,5972
  808498:	300f883a 	mov	r7,r6
  80849c:	280d883a 	mov	r6,r5
  8084a0:	200b883a 	mov	r5,r4
  8084a4:	11000017 	ldw	r4,0(r2)
  8084a8:	08070341 	jmpi	807034 <___vfiprintf_internal_r>

008084ac <__sbprintf>:
  8084ac:	2880030b 	ldhu	r2,12(r5)
  8084b0:	2ac01917 	ldw	r11,100(r5)
  8084b4:	2a80038b 	ldhu	r10,14(r5)
  8084b8:	2a400717 	ldw	r9,28(r5)
  8084bc:	2a000917 	ldw	r8,36(r5)
  8084c0:	defee204 	addi	sp,sp,-1144
  8084c4:	00c10004 	movi	r3,1024
  8084c8:	dc011a15 	stw	r16,1128(sp)
  8084cc:	10bfff4c 	andi	r2,r2,65533
  8084d0:	2821883a 	mov	r16,r5
  8084d4:	d8cb883a 	add	r5,sp,r3
  8084d8:	dc811c15 	stw	r18,1136(sp)
  8084dc:	dc411b15 	stw	r17,1132(sp)
  8084e0:	dfc11d15 	stw	ra,1140(sp)
  8084e4:	2025883a 	mov	r18,r4
  8084e8:	d881030d 	sth	r2,1036(sp)
  8084ec:	dac11915 	stw	r11,1124(sp)
  8084f0:	da81038d 	sth	r10,1038(sp)
  8084f4:	da410715 	stw	r9,1052(sp)
  8084f8:	da010915 	stw	r8,1060(sp)
  8084fc:	dec10015 	stw	sp,1024(sp)
  808500:	dec10415 	stw	sp,1040(sp)
  808504:	d8c10215 	stw	r3,1032(sp)
  808508:	d8c10515 	stw	r3,1044(sp)
  80850c:	d8010615 	stw	zero,1048(sp)
  808510:	08070340 	call	807034 <___vfiprintf_internal_r>
  808514:	1023883a 	mov	r17,r2
  808518:	10000416 	blt	r2,zero,80852c <__sbprintf+0x80>
  80851c:	d9410004 	addi	r5,sp,1024
  808520:	9009883a 	mov	r4,r18
  808524:	08043cc0 	call	8043cc <_fflush_r>
  808528:	10000d1e 	bne	r2,zero,808560 <__sbprintf+0xb4>
  80852c:	d881030b 	ldhu	r2,1036(sp)
  808530:	1080100c 	andi	r2,r2,64
  808534:	10000326 	beq	r2,zero,808544 <__sbprintf+0x98>
  808538:	8080030b 	ldhu	r2,12(r16)
  80853c:	10801014 	ori	r2,r2,64
  808540:	8080030d 	sth	r2,12(r16)
  808544:	8805883a 	mov	r2,r17
  808548:	dfc11d17 	ldw	ra,1140(sp)
  80854c:	dc811c17 	ldw	r18,1136(sp)
  808550:	dc411b17 	ldw	r17,1132(sp)
  808554:	dc011a17 	ldw	r16,1128(sp)
  808558:	dec11e04 	addi	sp,sp,1144
  80855c:	f800283a 	ret
  808560:	047fffc4 	movi	r17,-1
  808564:	003ff106 	br	80852c <__alt_data_end+0xff80852c>

00808568 <_write_r>:
  808568:	defffd04 	addi	sp,sp,-12
  80856c:	2805883a 	mov	r2,r5
  808570:	dc000015 	stw	r16,0(sp)
  808574:	04002074 	movhi	r16,129
  808578:	dc400115 	stw	r17,4(sp)
  80857c:	300b883a 	mov	r5,r6
  808580:	84093004 	addi	r16,r16,9408
  808584:	2023883a 	mov	r17,r4
  808588:	380d883a 	mov	r6,r7
  80858c:	1009883a 	mov	r4,r2
  808590:	dfc00215 	stw	ra,8(sp)
  808594:	80000015 	stw	zero,0(r16)
  808598:	080d6b00 	call	80d6b0 <write>
  80859c:	00ffffc4 	movi	r3,-1
  8085a0:	10c00526 	beq	r2,r3,8085b8 <_write_r+0x50>
  8085a4:	dfc00217 	ldw	ra,8(sp)
  8085a8:	dc400117 	ldw	r17,4(sp)
  8085ac:	dc000017 	ldw	r16,0(sp)
  8085b0:	dec00304 	addi	sp,sp,12
  8085b4:	f800283a 	ret
  8085b8:	80c00017 	ldw	r3,0(r16)
  8085bc:	183ff926 	beq	r3,zero,8085a4 <__alt_data_end+0xff8085a4>
  8085c0:	88c00015 	stw	r3,0(r17)
  8085c4:	003ff706 	br	8085a4 <__alt_data_end+0xff8085a4>

008085c8 <_close_r>:
  8085c8:	defffd04 	addi	sp,sp,-12
  8085cc:	dc000015 	stw	r16,0(sp)
  8085d0:	04002074 	movhi	r16,129
  8085d4:	dc400115 	stw	r17,4(sp)
  8085d8:	84093004 	addi	r16,r16,9408
  8085dc:	2023883a 	mov	r17,r4
  8085e0:	2809883a 	mov	r4,r5
  8085e4:	dfc00215 	stw	ra,8(sp)
  8085e8:	80000015 	stw	zero,0(r16)
  8085ec:	080cd200 	call	80cd20 <close>
  8085f0:	00ffffc4 	movi	r3,-1
  8085f4:	10c00526 	beq	r2,r3,80860c <_close_r+0x44>
  8085f8:	dfc00217 	ldw	ra,8(sp)
  8085fc:	dc400117 	ldw	r17,4(sp)
  808600:	dc000017 	ldw	r16,0(sp)
  808604:	dec00304 	addi	sp,sp,12
  808608:	f800283a 	ret
  80860c:	80c00017 	ldw	r3,0(r16)
  808610:	183ff926 	beq	r3,zero,8085f8 <__alt_data_end+0xff8085f8>
  808614:	88c00015 	stw	r3,0(r17)
  808618:	003ff706 	br	8085f8 <__alt_data_end+0xff8085f8>

0080861c <_calloc_r>:
  80861c:	298b383a 	mul	r5,r5,r6
  808620:	defffe04 	addi	sp,sp,-8
  808624:	dfc00115 	stw	ra,4(sp)
  808628:	dc000015 	stw	r16,0(sp)
  80862c:	080504c0 	call	80504c <_malloc_r>
  808630:	10002926 	beq	r2,zero,8086d8 <_calloc_r+0xbc>
  808634:	11bfff17 	ldw	r6,-4(r2)
  808638:	1021883a 	mov	r16,r2
  80863c:	00bfff04 	movi	r2,-4
  808640:	308c703a 	and	r6,r6,r2
  808644:	00c00904 	movi	r3,36
  808648:	308d883a 	add	r6,r6,r2
  80864c:	19801636 	bltu	r3,r6,8086a8 <_calloc_r+0x8c>
  808650:	008004c4 	movi	r2,19
  808654:	11800b2e 	bgeu	r2,r6,808684 <_calloc_r+0x68>
  808658:	80000015 	stw	zero,0(r16)
  80865c:	80000115 	stw	zero,4(r16)
  808660:	008006c4 	movi	r2,27
  808664:	11801a2e 	bgeu	r2,r6,8086d0 <_calloc_r+0xb4>
  808668:	80000215 	stw	zero,8(r16)
  80866c:	80000315 	stw	zero,12(r16)
  808670:	30c0151e 	bne	r6,r3,8086c8 <_calloc_r+0xac>
  808674:	80000415 	stw	zero,16(r16)
  808678:	80800604 	addi	r2,r16,24
  80867c:	80000515 	stw	zero,20(r16)
  808680:	00000106 	br	808688 <_calloc_r+0x6c>
  808684:	8005883a 	mov	r2,r16
  808688:	10000015 	stw	zero,0(r2)
  80868c:	10000115 	stw	zero,4(r2)
  808690:	10000215 	stw	zero,8(r2)
  808694:	8005883a 	mov	r2,r16
  808698:	dfc00117 	ldw	ra,4(sp)
  80869c:	dc000017 	ldw	r16,0(sp)
  8086a0:	dec00204 	addi	sp,sp,8
  8086a4:	f800283a 	ret
  8086a8:	000b883a 	mov	r5,zero
  8086ac:	8009883a 	mov	r4,r16
  8086b0:	0805a840 	call	805a84 <memset>
  8086b4:	8005883a 	mov	r2,r16
  8086b8:	dfc00117 	ldw	ra,4(sp)
  8086bc:	dc000017 	ldw	r16,0(sp)
  8086c0:	dec00204 	addi	sp,sp,8
  8086c4:	f800283a 	ret
  8086c8:	80800404 	addi	r2,r16,16
  8086cc:	003fee06 	br	808688 <__alt_data_end+0xff808688>
  8086d0:	80800204 	addi	r2,r16,8
  8086d4:	003fec06 	br	808688 <__alt_data_end+0xff808688>
  8086d8:	0005883a 	mov	r2,zero
  8086dc:	003fee06 	br	808698 <__alt_data_end+0xff808698>

008086e0 <_fclose_r>:
  8086e0:	28003926 	beq	r5,zero,8087c8 <_fclose_r+0xe8>
  8086e4:	defffc04 	addi	sp,sp,-16
  8086e8:	dc400115 	stw	r17,4(sp)
  8086ec:	dc000015 	stw	r16,0(sp)
  8086f0:	dfc00315 	stw	ra,12(sp)
  8086f4:	dc800215 	stw	r18,8(sp)
  8086f8:	2023883a 	mov	r17,r4
  8086fc:	2821883a 	mov	r16,r5
  808700:	20000226 	beq	r4,zero,80870c <_fclose_r+0x2c>
  808704:	20800e17 	ldw	r2,56(r4)
  808708:	10002726 	beq	r2,zero,8087a8 <_fclose_r+0xc8>
  80870c:	8080030f 	ldh	r2,12(r16)
  808710:	1000071e 	bne	r2,zero,808730 <_fclose_r+0x50>
  808714:	0005883a 	mov	r2,zero
  808718:	dfc00317 	ldw	ra,12(sp)
  80871c:	dc800217 	ldw	r18,8(sp)
  808720:	dc400117 	ldw	r17,4(sp)
  808724:	dc000017 	ldw	r16,0(sp)
  808728:	dec00404 	addi	sp,sp,16
  80872c:	f800283a 	ret
  808730:	800b883a 	mov	r5,r16
  808734:	8809883a 	mov	r4,r17
  808738:	08041b00 	call	8041b0 <__sflush_r>
  80873c:	1025883a 	mov	r18,r2
  808740:	80800b17 	ldw	r2,44(r16)
  808744:	10000426 	beq	r2,zero,808758 <_fclose_r+0x78>
  808748:	81400717 	ldw	r5,28(r16)
  80874c:	8809883a 	mov	r4,r17
  808750:	103ee83a 	callr	r2
  808754:	10001616 	blt	r2,zero,8087b0 <_fclose_r+0xd0>
  808758:	8080030b 	ldhu	r2,12(r16)
  80875c:	1080200c 	andi	r2,r2,128
  808760:	1000151e 	bne	r2,zero,8087b8 <_fclose_r+0xd8>
  808764:	81400c17 	ldw	r5,48(r16)
  808768:	28000526 	beq	r5,zero,808780 <_fclose_r+0xa0>
  80876c:	80801004 	addi	r2,r16,64
  808770:	28800226 	beq	r5,r2,80877c <_fclose_r+0x9c>
  808774:	8809883a 	mov	r4,r17
  808778:	080491c0 	call	80491c <_free_r>
  80877c:	80000c15 	stw	zero,48(r16)
  808780:	81401117 	ldw	r5,68(r16)
  808784:	28000326 	beq	r5,zero,808794 <_fclose_r+0xb4>
  808788:	8809883a 	mov	r4,r17
  80878c:	080491c0 	call	80491c <_free_r>
  808790:	80001115 	stw	zero,68(r16)
  808794:	08047b80 	call	8047b8 <__sfp_lock_acquire>
  808798:	8000030d 	sth	zero,12(r16)
  80879c:	08047bc0 	call	8047bc <__sfp_lock_release>
  8087a0:	9005883a 	mov	r2,r18
  8087a4:	003fdc06 	br	808718 <__alt_data_end+0xff808718>
  8087a8:	08047a80 	call	8047a8 <__sinit>
  8087ac:	003fd706 	br	80870c <__alt_data_end+0xff80870c>
  8087b0:	04bfffc4 	movi	r18,-1
  8087b4:	003fe806 	br	808758 <__alt_data_end+0xff808758>
  8087b8:	81400417 	ldw	r5,16(r16)
  8087bc:	8809883a 	mov	r4,r17
  8087c0:	080491c0 	call	80491c <_free_r>
  8087c4:	003fe706 	br	808764 <__alt_data_end+0xff808764>
  8087c8:	0005883a 	mov	r2,zero
  8087cc:	f800283a 	ret

008087d0 <fclose>:
  8087d0:	00802074 	movhi	r2,129
  8087d4:	1085d504 	addi	r2,r2,5972
  8087d8:	200b883a 	mov	r5,r4
  8087dc:	11000017 	ldw	r4,0(r2)
  8087e0:	08086e01 	jmpi	8086e0 <_fclose_r>

008087e4 <__fputwc>:
  8087e4:	defff804 	addi	sp,sp,-32
  8087e8:	dcc00415 	stw	r19,16(sp)
  8087ec:	dc800315 	stw	r18,12(sp)
  8087f0:	dc000115 	stw	r16,4(sp)
  8087f4:	dfc00715 	stw	ra,28(sp)
  8087f8:	dd400615 	stw	r21,24(sp)
  8087fc:	dd000515 	stw	r20,20(sp)
  808800:	dc400215 	stw	r17,8(sp)
  808804:	2027883a 	mov	r19,r4
  808808:	2825883a 	mov	r18,r5
  80880c:	3021883a 	mov	r16,r6
  808810:	0804e3c0 	call	804e3c <__locale_mb_cur_max>
  808814:	00c00044 	movi	r3,1
  808818:	10c03e26 	beq	r2,r3,808914 <__fputwc+0x130>
  80881c:	81c01704 	addi	r7,r16,92
  808820:	900d883a 	mov	r6,r18
  808824:	d80b883a 	mov	r5,sp
  808828:	9809883a 	mov	r4,r19
  80882c:	08098300 	call	809830 <_wcrtomb_r>
  808830:	1029883a 	mov	r20,r2
  808834:	00bfffc4 	movi	r2,-1
  808838:	a0802026 	beq	r20,r2,8088bc <__fputwc+0xd8>
  80883c:	d9400003 	ldbu	r5,0(sp)
  808840:	a0001c26 	beq	r20,zero,8088b4 <__fputwc+0xd0>
  808844:	0023883a 	mov	r17,zero
  808848:	05400284 	movi	r21,10
  80884c:	00000906 	br	808874 <__fputwc+0x90>
  808850:	80800017 	ldw	r2,0(r16)
  808854:	11400005 	stb	r5,0(r2)
  808858:	80c00017 	ldw	r3,0(r16)
  80885c:	18c00044 	addi	r3,r3,1
  808860:	80c00015 	stw	r3,0(r16)
  808864:	8c400044 	addi	r17,r17,1
  808868:	dc45883a 	add	r2,sp,r17
  80886c:	8d00112e 	bgeu	r17,r20,8088b4 <__fputwc+0xd0>
  808870:	11400003 	ldbu	r5,0(r2)
  808874:	80c00217 	ldw	r3,8(r16)
  808878:	18ffffc4 	addi	r3,r3,-1
  80887c:	80c00215 	stw	r3,8(r16)
  808880:	183ff30e 	bge	r3,zero,808850 <__alt_data_end+0xff808850>
  808884:	80800617 	ldw	r2,24(r16)
  808888:	18801916 	blt	r3,r2,8088f0 <__fputwc+0x10c>
  80888c:	80800017 	ldw	r2,0(r16)
  808890:	11400005 	stb	r5,0(r2)
  808894:	80800017 	ldw	r2,0(r16)
  808898:	10c00003 	ldbu	r3,0(r2)
  80889c:	10800044 	addi	r2,r2,1
  8088a0:	1d402326 	beq	r3,r21,808930 <__fputwc+0x14c>
  8088a4:	80800015 	stw	r2,0(r16)
  8088a8:	8c400044 	addi	r17,r17,1
  8088ac:	dc45883a 	add	r2,sp,r17
  8088b0:	8d3fef36 	bltu	r17,r20,808870 <__alt_data_end+0xff808870>
  8088b4:	9005883a 	mov	r2,r18
  8088b8:	00000406 	br	8088cc <__fputwc+0xe8>
  8088bc:	80c0030b 	ldhu	r3,12(r16)
  8088c0:	a005883a 	mov	r2,r20
  8088c4:	18c01014 	ori	r3,r3,64
  8088c8:	80c0030d 	sth	r3,12(r16)
  8088cc:	dfc00717 	ldw	ra,28(sp)
  8088d0:	dd400617 	ldw	r21,24(sp)
  8088d4:	dd000517 	ldw	r20,20(sp)
  8088d8:	dcc00417 	ldw	r19,16(sp)
  8088dc:	dc800317 	ldw	r18,12(sp)
  8088e0:	dc400217 	ldw	r17,8(sp)
  8088e4:	dc000117 	ldw	r16,4(sp)
  8088e8:	dec00804 	addi	sp,sp,32
  8088ec:	f800283a 	ret
  8088f0:	800d883a 	mov	r6,r16
  8088f4:	29403fcc 	andi	r5,r5,255
  8088f8:	9809883a 	mov	r4,r19
  8088fc:	08096d80 	call	8096d8 <__swbuf_r>
  808900:	10bfffe0 	cmpeqi	r2,r2,-1
  808904:	10803fcc 	andi	r2,r2,255
  808908:	103fd626 	beq	r2,zero,808864 <__alt_data_end+0xff808864>
  80890c:	00bfffc4 	movi	r2,-1
  808910:	003fee06 	br	8088cc <__alt_data_end+0xff8088cc>
  808914:	90ffffc4 	addi	r3,r18,-1
  808918:	01003f84 	movi	r4,254
  80891c:	20ffbf36 	bltu	r4,r3,80881c <__alt_data_end+0xff80881c>
  808920:	900b883a 	mov	r5,r18
  808924:	dc800005 	stb	r18,0(sp)
  808928:	1029883a 	mov	r20,r2
  80892c:	003fc506 	br	808844 <__alt_data_end+0xff808844>
  808930:	800d883a 	mov	r6,r16
  808934:	a80b883a 	mov	r5,r21
  808938:	9809883a 	mov	r4,r19
  80893c:	08096d80 	call	8096d8 <__swbuf_r>
  808940:	10bfffe0 	cmpeqi	r2,r2,-1
  808944:	003fef06 	br	808904 <__alt_data_end+0xff808904>

00808948 <_fputwc_r>:
  808948:	3080030b 	ldhu	r2,12(r6)
  80894c:	10c8000c 	andi	r3,r2,8192
  808950:	1800051e 	bne	r3,zero,808968 <_fputwc_r+0x20>
  808954:	30c01917 	ldw	r3,100(r6)
  808958:	10880014 	ori	r2,r2,8192
  80895c:	3080030d 	sth	r2,12(r6)
  808960:	18880014 	ori	r2,r3,8192
  808964:	30801915 	stw	r2,100(r6)
  808968:	08087e41 	jmpi	8087e4 <__fputwc>

0080896c <fputwc>:
  80896c:	00802074 	movhi	r2,129
  808970:	defffc04 	addi	sp,sp,-16
  808974:	1085d504 	addi	r2,r2,5972
  808978:	dc000115 	stw	r16,4(sp)
  80897c:	14000017 	ldw	r16,0(r2)
  808980:	dc400215 	stw	r17,8(sp)
  808984:	dfc00315 	stw	ra,12(sp)
  808988:	2023883a 	mov	r17,r4
  80898c:	80000226 	beq	r16,zero,808998 <fputwc+0x2c>
  808990:	80800e17 	ldw	r2,56(r16)
  808994:	10001026 	beq	r2,zero,8089d8 <fputwc+0x6c>
  808998:	2880030b 	ldhu	r2,12(r5)
  80899c:	10c8000c 	andi	r3,r2,8192
  8089a0:	1800051e 	bne	r3,zero,8089b8 <fputwc+0x4c>
  8089a4:	28c01917 	ldw	r3,100(r5)
  8089a8:	10880014 	ori	r2,r2,8192
  8089ac:	2880030d 	sth	r2,12(r5)
  8089b0:	18880014 	ori	r2,r3,8192
  8089b4:	28801915 	stw	r2,100(r5)
  8089b8:	280d883a 	mov	r6,r5
  8089bc:	8009883a 	mov	r4,r16
  8089c0:	880b883a 	mov	r5,r17
  8089c4:	dfc00317 	ldw	ra,12(sp)
  8089c8:	dc400217 	ldw	r17,8(sp)
  8089cc:	dc000117 	ldw	r16,4(sp)
  8089d0:	dec00404 	addi	sp,sp,16
  8089d4:	08087e41 	jmpi	8087e4 <__fputwc>
  8089d8:	8009883a 	mov	r4,r16
  8089dc:	d9400015 	stw	r5,0(sp)
  8089e0:	08047a80 	call	8047a8 <__sinit>
  8089e4:	d9400017 	ldw	r5,0(sp)
  8089e8:	003feb06 	br	808998 <__alt_data_end+0xff808998>

008089ec <_fstat_r>:
  8089ec:	defffd04 	addi	sp,sp,-12
  8089f0:	2805883a 	mov	r2,r5
  8089f4:	dc000015 	stw	r16,0(sp)
  8089f8:	04002074 	movhi	r16,129
  8089fc:	dc400115 	stw	r17,4(sp)
  808a00:	84093004 	addi	r16,r16,9408
  808a04:	2023883a 	mov	r17,r4
  808a08:	300b883a 	mov	r5,r6
  808a0c:	1009883a 	mov	r4,r2
  808a10:	dfc00215 	stw	ra,8(sp)
  808a14:	80000015 	stw	zero,0(r16)
  808a18:	080ce580 	call	80ce58 <fstat>
  808a1c:	00ffffc4 	movi	r3,-1
  808a20:	10c00526 	beq	r2,r3,808a38 <_fstat_r+0x4c>
  808a24:	dfc00217 	ldw	ra,8(sp)
  808a28:	dc400117 	ldw	r17,4(sp)
  808a2c:	dc000017 	ldw	r16,0(sp)
  808a30:	dec00304 	addi	sp,sp,12
  808a34:	f800283a 	ret
  808a38:	80c00017 	ldw	r3,0(r16)
  808a3c:	183ff926 	beq	r3,zero,808a24 <__alt_data_end+0xff808a24>
  808a40:	88c00015 	stw	r3,0(r17)
  808a44:	003ff706 	br	808a24 <__alt_data_end+0xff808a24>

00808a48 <__sfvwrite_r>:
  808a48:	30800217 	ldw	r2,8(r6)
  808a4c:	10006726 	beq	r2,zero,808bec <__sfvwrite_r+0x1a4>
  808a50:	28c0030b 	ldhu	r3,12(r5)
  808a54:	defff404 	addi	sp,sp,-48
  808a58:	dd400715 	stw	r21,28(sp)
  808a5c:	dd000615 	stw	r20,24(sp)
  808a60:	dc000215 	stw	r16,8(sp)
  808a64:	dfc00b15 	stw	ra,44(sp)
  808a68:	df000a15 	stw	fp,40(sp)
  808a6c:	ddc00915 	stw	r23,36(sp)
  808a70:	dd800815 	stw	r22,32(sp)
  808a74:	dcc00515 	stw	r19,20(sp)
  808a78:	dc800415 	stw	r18,16(sp)
  808a7c:	dc400315 	stw	r17,12(sp)
  808a80:	1880020c 	andi	r2,r3,8
  808a84:	2821883a 	mov	r16,r5
  808a88:	202b883a 	mov	r21,r4
  808a8c:	3029883a 	mov	r20,r6
  808a90:	10002726 	beq	r2,zero,808b30 <__sfvwrite_r+0xe8>
  808a94:	28800417 	ldw	r2,16(r5)
  808a98:	10002526 	beq	r2,zero,808b30 <__sfvwrite_r+0xe8>
  808a9c:	1880008c 	andi	r2,r3,2
  808aa0:	a4400017 	ldw	r17,0(r20)
  808aa4:	10002a26 	beq	r2,zero,808b50 <__sfvwrite_r+0x108>
  808aa8:	05a00034 	movhi	r22,32768
  808aac:	0027883a 	mov	r19,zero
  808ab0:	0025883a 	mov	r18,zero
  808ab4:	b5bf0004 	addi	r22,r22,-1024
  808ab8:	980d883a 	mov	r6,r19
  808abc:	a809883a 	mov	r4,r21
  808ac0:	90004626 	beq	r18,zero,808bdc <__sfvwrite_r+0x194>
  808ac4:	900f883a 	mov	r7,r18
  808ac8:	b480022e 	bgeu	r22,r18,808ad4 <__sfvwrite_r+0x8c>
  808acc:	01e00034 	movhi	r7,32768
  808ad0:	39ff0004 	addi	r7,r7,-1024
  808ad4:	80800917 	ldw	r2,36(r16)
  808ad8:	81400717 	ldw	r5,28(r16)
  808adc:	103ee83a 	callr	r2
  808ae0:	0080570e 	bge	zero,r2,808c40 <__sfvwrite_r+0x1f8>
  808ae4:	a0c00217 	ldw	r3,8(r20)
  808ae8:	98a7883a 	add	r19,r19,r2
  808aec:	90a5c83a 	sub	r18,r18,r2
  808af0:	1885c83a 	sub	r2,r3,r2
  808af4:	a0800215 	stw	r2,8(r20)
  808af8:	103fef1e 	bne	r2,zero,808ab8 <__alt_data_end+0xff808ab8>
  808afc:	0005883a 	mov	r2,zero
  808b00:	dfc00b17 	ldw	ra,44(sp)
  808b04:	df000a17 	ldw	fp,40(sp)
  808b08:	ddc00917 	ldw	r23,36(sp)
  808b0c:	dd800817 	ldw	r22,32(sp)
  808b10:	dd400717 	ldw	r21,28(sp)
  808b14:	dd000617 	ldw	r20,24(sp)
  808b18:	dcc00517 	ldw	r19,20(sp)
  808b1c:	dc800417 	ldw	r18,16(sp)
  808b20:	dc400317 	ldw	r17,12(sp)
  808b24:	dc000217 	ldw	r16,8(sp)
  808b28:	dec00c04 	addi	sp,sp,48
  808b2c:	f800283a 	ret
  808b30:	800b883a 	mov	r5,r16
  808b34:	a809883a 	mov	r4,r21
  808b38:	08027d40 	call	8027d4 <__swsetup_r>
  808b3c:	1000eb1e 	bne	r2,zero,808eec <__sfvwrite_r+0x4a4>
  808b40:	80c0030b 	ldhu	r3,12(r16)
  808b44:	a4400017 	ldw	r17,0(r20)
  808b48:	1880008c 	andi	r2,r3,2
  808b4c:	103fd61e 	bne	r2,zero,808aa8 <__alt_data_end+0xff808aa8>
  808b50:	1880004c 	andi	r2,r3,1
  808b54:	10003f1e 	bne	r2,zero,808c54 <__sfvwrite_r+0x20c>
  808b58:	0039883a 	mov	fp,zero
  808b5c:	0025883a 	mov	r18,zero
  808b60:	90001a26 	beq	r18,zero,808bcc <__sfvwrite_r+0x184>
  808b64:	1880800c 	andi	r2,r3,512
  808b68:	84c00217 	ldw	r19,8(r16)
  808b6c:	10002126 	beq	r2,zero,808bf4 <__sfvwrite_r+0x1ac>
  808b70:	982f883a 	mov	r23,r19
  808b74:	94c09336 	bltu	r18,r19,808dc4 <__sfvwrite_r+0x37c>
  808b78:	1881200c 	andi	r2,r3,1152
  808b7c:	10009e1e 	bne	r2,zero,808df8 <__sfvwrite_r+0x3b0>
  808b80:	81000017 	ldw	r4,0(r16)
  808b84:	b80d883a 	mov	r6,r23
  808b88:	e00b883a 	mov	r5,fp
  808b8c:	0808fb80 	call	808fb8 <memmove>
  808b90:	80c00217 	ldw	r3,8(r16)
  808b94:	81000017 	ldw	r4,0(r16)
  808b98:	9005883a 	mov	r2,r18
  808b9c:	1ce7c83a 	sub	r19,r3,r19
  808ba0:	25cf883a 	add	r7,r4,r23
  808ba4:	84c00215 	stw	r19,8(r16)
  808ba8:	81c00015 	stw	r7,0(r16)
  808bac:	a0c00217 	ldw	r3,8(r20)
  808bb0:	e0b9883a 	add	fp,fp,r2
  808bb4:	90a5c83a 	sub	r18,r18,r2
  808bb8:	18a7c83a 	sub	r19,r3,r2
  808bbc:	a4c00215 	stw	r19,8(r20)
  808bc0:	983fce26 	beq	r19,zero,808afc <__alt_data_end+0xff808afc>
  808bc4:	80c0030b 	ldhu	r3,12(r16)
  808bc8:	903fe61e 	bne	r18,zero,808b64 <__alt_data_end+0xff808b64>
  808bcc:	8f000017 	ldw	fp,0(r17)
  808bd0:	8c800117 	ldw	r18,4(r17)
  808bd4:	8c400204 	addi	r17,r17,8
  808bd8:	003fe106 	br	808b60 <__alt_data_end+0xff808b60>
  808bdc:	8cc00017 	ldw	r19,0(r17)
  808be0:	8c800117 	ldw	r18,4(r17)
  808be4:	8c400204 	addi	r17,r17,8
  808be8:	003fb306 	br	808ab8 <__alt_data_end+0xff808ab8>
  808bec:	0005883a 	mov	r2,zero
  808bf0:	f800283a 	ret
  808bf4:	81000017 	ldw	r4,0(r16)
  808bf8:	80800417 	ldw	r2,16(r16)
  808bfc:	11005736 	bltu	r2,r4,808d5c <__sfvwrite_r+0x314>
  808c00:	85c00517 	ldw	r23,20(r16)
  808c04:	95c05536 	bltu	r18,r23,808d5c <__sfvwrite_r+0x314>
  808c08:	00a00034 	movhi	r2,32768
  808c0c:	10bfffc4 	addi	r2,r2,-1
  808c10:	9009883a 	mov	r4,r18
  808c14:	1480012e 	bgeu	r2,r18,808c1c <__sfvwrite_r+0x1d4>
  808c18:	1009883a 	mov	r4,r2
  808c1c:	b80b883a 	mov	r5,r23
  808c20:	080a4c80 	call	80a4c8 <__divsi3>
  808c24:	15cf383a 	mul	r7,r2,r23
  808c28:	81400717 	ldw	r5,28(r16)
  808c2c:	80800917 	ldw	r2,36(r16)
  808c30:	e00d883a 	mov	r6,fp
  808c34:	a809883a 	mov	r4,r21
  808c38:	103ee83a 	callr	r2
  808c3c:	00bfdb16 	blt	zero,r2,808bac <__alt_data_end+0xff808bac>
  808c40:	8080030b 	ldhu	r2,12(r16)
  808c44:	10801014 	ori	r2,r2,64
  808c48:	8080030d 	sth	r2,12(r16)
  808c4c:	00bfffc4 	movi	r2,-1
  808c50:	003fab06 	br	808b00 <__alt_data_end+0xff808b00>
  808c54:	0027883a 	mov	r19,zero
  808c58:	0011883a 	mov	r8,zero
  808c5c:	0039883a 	mov	fp,zero
  808c60:	0025883a 	mov	r18,zero
  808c64:	90001f26 	beq	r18,zero,808ce4 <__sfvwrite_r+0x29c>
  808c68:	40005a26 	beq	r8,zero,808dd4 <__sfvwrite_r+0x38c>
  808c6c:	982d883a 	mov	r22,r19
  808c70:	94c0012e 	bgeu	r18,r19,808c78 <__sfvwrite_r+0x230>
  808c74:	902d883a 	mov	r22,r18
  808c78:	81000017 	ldw	r4,0(r16)
  808c7c:	80800417 	ldw	r2,16(r16)
  808c80:	b02f883a 	mov	r23,r22
  808c84:	81c00517 	ldw	r7,20(r16)
  808c88:	1100032e 	bgeu	r2,r4,808c98 <__sfvwrite_r+0x250>
  808c8c:	80c00217 	ldw	r3,8(r16)
  808c90:	38c7883a 	add	r3,r7,r3
  808c94:	1d801816 	blt	r3,r22,808cf8 <__sfvwrite_r+0x2b0>
  808c98:	b1c03e16 	blt	r22,r7,808d94 <__sfvwrite_r+0x34c>
  808c9c:	80800917 	ldw	r2,36(r16)
  808ca0:	81400717 	ldw	r5,28(r16)
  808ca4:	e00d883a 	mov	r6,fp
  808ca8:	da000115 	stw	r8,4(sp)
  808cac:	a809883a 	mov	r4,r21
  808cb0:	103ee83a 	callr	r2
  808cb4:	102f883a 	mov	r23,r2
  808cb8:	da000117 	ldw	r8,4(sp)
  808cbc:	00bfe00e 	bge	zero,r2,808c40 <__alt_data_end+0xff808c40>
  808cc0:	9de7c83a 	sub	r19,r19,r23
  808cc4:	98001f26 	beq	r19,zero,808d44 <__sfvwrite_r+0x2fc>
  808cc8:	a0800217 	ldw	r2,8(r20)
  808ccc:	e5f9883a 	add	fp,fp,r23
  808cd0:	95e5c83a 	sub	r18,r18,r23
  808cd4:	15efc83a 	sub	r23,r2,r23
  808cd8:	a5c00215 	stw	r23,8(r20)
  808cdc:	b83f8726 	beq	r23,zero,808afc <__alt_data_end+0xff808afc>
  808ce0:	903fe11e 	bne	r18,zero,808c68 <__alt_data_end+0xff808c68>
  808ce4:	8f000017 	ldw	fp,0(r17)
  808ce8:	8c800117 	ldw	r18,4(r17)
  808cec:	0011883a 	mov	r8,zero
  808cf0:	8c400204 	addi	r17,r17,8
  808cf4:	003fdb06 	br	808c64 <__alt_data_end+0xff808c64>
  808cf8:	180d883a 	mov	r6,r3
  808cfc:	e00b883a 	mov	r5,fp
  808d00:	da000115 	stw	r8,4(sp)
  808d04:	d8c00015 	stw	r3,0(sp)
  808d08:	0808fb80 	call	808fb8 <memmove>
  808d0c:	d8c00017 	ldw	r3,0(sp)
  808d10:	80800017 	ldw	r2,0(r16)
  808d14:	800b883a 	mov	r5,r16
  808d18:	a809883a 	mov	r4,r21
  808d1c:	10c5883a 	add	r2,r2,r3
  808d20:	80800015 	stw	r2,0(r16)
  808d24:	d8c00015 	stw	r3,0(sp)
  808d28:	08043cc0 	call	8043cc <_fflush_r>
  808d2c:	d8c00017 	ldw	r3,0(sp)
  808d30:	da000117 	ldw	r8,4(sp)
  808d34:	103fc21e 	bne	r2,zero,808c40 <__alt_data_end+0xff808c40>
  808d38:	182f883a 	mov	r23,r3
  808d3c:	9de7c83a 	sub	r19,r19,r23
  808d40:	983fe11e 	bne	r19,zero,808cc8 <__alt_data_end+0xff808cc8>
  808d44:	800b883a 	mov	r5,r16
  808d48:	a809883a 	mov	r4,r21
  808d4c:	08043cc0 	call	8043cc <_fflush_r>
  808d50:	103fbb1e 	bne	r2,zero,808c40 <__alt_data_end+0xff808c40>
  808d54:	0011883a 	mov	r8,zero
  808d58:	003fdb06 	br	808cc8 <__alt_data_end+0xff808cc8>
  808d5c:	94c0012e 	bgeu	r18,r19,808d64 <__sfvwrite_r+0x31c>
  808d60:	9027883a 	mov	r19,r18
  808d64:	980d883a 	mov	r6,r19
  808d68:	e00b883a 	mov	r5,fp
  808d6c:	0808fb80 	call	808fb8 <memmove>
  808d70:	80800217 	ldw	r2,8(r16)
  808d74:	80c00017 	ldw	r3,0(r16)
  808d78:	14c5c83a 	sub	r2,r2,r19
  808d7c:	1cc7883a 	add	r3,r3,r19
  808d80:	80800215 	stw	r2,8(r16)
  808d84:	80c00015 	stw	r3,0(r16)
  808d88:	10004326 	beq	r2,zero,808e98 <__sfvwrite_r+0x450>
  808d8c:	9805883a 	mov	r2,r19
  808d90:	003f8606 	br	808bac <__alt_data_end+0xff808bac>
  808d94:	b00d883a 	mov	r6,r22
  808d98:	e00b883a 	mov	r5,fp
  808d9c:	da000115 	stw	r8,4(sp)
  808da0:	0808fb80 	call	808fb8 <memmove>
  808da4:	80800217 	ldw	r2,8(r16)
  808da8:	80c00017 	ldw	r3,0(r16)
  808dac:	da000117 	ldw	r8,4(sp)
  808db0:	1585c83a 	sub	r2,r2,r22
  808db4:	1dad883a 	add	r22,r3,r22
  808db8:	80800215 	stw	r2,8(r16)
  808dbc:	85800015 	stw	r22,0(r16)
  808dc0:	003fbf06 	br	808cc0 <__alt_data_end+0xff808cc0>
  808dc4:	81000017 	ldw	r4,0(r16)
  808dc8:	9027883a 	mov	r19,r18
  808dcc:	902f883a 	mov	r23,r18
  808dd0:	003f6c06 	br	808b84 <__alt_data_end+0xff808b84>
  808dd4:	900d883a 	mov	r6,r18
  808dd8:	01400284 	movi	r5,10
  808ddc:	e009883a 	mov	r4,fp
  808de0:	08058580 	call	805858 <memchr>
  808de4:	10003e26 	beq	r2,zero,808ee0 <__sfvwrite_r+0x498>
  808de8:	10800044 	addi	r2,r2,1
  808dec:	1727c83a 	sub	r19,r2,fp
  808df0:	02000044 	movi	r8,1
  808df4:	003f9d06 	br	808c6c <__alt_data_end+0xff808c6c>
  808df8:	80800517 	ldw	r2,20(r16)
  808dfc:	81400417 	ldw	r5,16(r16)
  808e00:	81c00017 	ldw	r7,0(r16)
  808e04:	10a7883a 	add	r19,r2,r2
  808e08:	9885883a 	add	r2,r19,r2
  808e0c:	1026d7fa 	srli	r19,r2,31
  808e10:	396dc83a 	sub	r22,r7,r5
  808e14:	b1000044 	addi	r4,r22,1
  808e18:	9885883a 	add	r2,r19,r2
  808e1c:	1027d07a 	srai	r19,r2,1
  808e20:	2485883a 	add	r2,r4,r18
  808e24:	980d883a 	mov	r6,r19
  808e28:	9880022e 	bgeu	r19,r2,808e34 <__sfvwrite_r+0x3ec>
  808e2c:	1027883a 	mov	r19,r2
  808e30:	100d883a 	mov	r6,r2
  808e34:	18c1000c 	andi	r3,r3,1024
  808e38:	18001c26 	beq	r3,zero,808eac <__sfvwrite_r+0x464>
  808e3c:	300b883a 	mov	r5,r6
  808e40:	a809883a 	mov	r4,r21
  808e44:	080504c0 	call	80504c <_malloc_r>
  808e48:	102f883a 	mov	r23,r2
  808e4c:	10002926 	beq	r2,zero,808ef4 <__sfvwrite_r+0x4ac>
  808e50:	81400417 	ldw	r5,16(r16)
  808e54:	b00d883a 	mov	r6,r22
  808e58:	1009883a 	mov	r4,r2
  808e5c:	080593c0 	call	80593c <memcpy>
  808e60:	8080030b 	ldhu	r2,12(r16)
  808e64:	00fedfc4 	movi	r3,-1153
  808e68:	10c4703a 	and	r2,r2,r3
  808e6c:	10802014 	ori	r2,r2,128
  808e70:	8080030d 	sth	r2,12(r16)
  808e74:	bd89883a 	add	r4,r23,r22
  808e78:	9d8fc83a 	sub	r7,r19,r22
  808e7c:	85c00415 	stw	r23,16(r16)
  808e80:	84c00515 	stw	r19,20(r16)
  808e84:	81000015 	stw	r4,0(r16)
  808e88:	9027883a 	mov	r19,r18
  808e8c:	81c00215 	stw	r7,8(r16)
  808e90:	902f883a 	mov	r23,r18
  808e94:	003f3b06 	br	808b84 <__alt_data_end+0xff808b84>
  808e98:	800b883a 	mov	r5,r16
  808e9c:	a809883a 	mov	r4,r21
  808ea0:	08043cc0 	call	8043cc <_fflush_r>
  808ea4:	103fb926 	beq	r2,zero,808d8c <__alt_data_end+0xff808d8c>
  808ea8:	003f6506 	br	808c40 <__alt_data_end+0xff808c40>
  808eac:	a809883a 	mov	r4,r21
  808eb0:	08091740 	call	809174 <_realloc_r>
  808eb4:	102f883a 	mov	r23,r2
  808eb8:	103fee1e 	bne	r2,zero,808e74 <__alt_data_end+0xff808e74>
  808ebc:	81400417 	ldw	r5,16(r16)
  808ec0:	a809883a 	mov	r4,r21
  808ec4:	080491c0 	call	80491c <_free_r>
  808ec8:	8080030b 	ldhu	r2,12(r16)
  808ecc:	00ffdfc4 	movi	r3,-129
  808ed0:	1884703a 	and	r2,r3,r2
  808ed4:	00c00304 	movi	r3,12
  808ed8:	a8c00015 	stw	r3,0(r21)
  808edc:	003f5906 	br	808c44 <__alt_data_end+0xff808c44>
  808ee0:	94c00044 	addi	r19,r18,1
  808ee4:	02000044 	movi	r8,1
  808ee8:	003f6006 	br	808c6c <__alt_data_end+0xff808c6c>
  808eec:	00bfffc4 	movi	r2,-1
  808ef0:	003f0306 	br	808b00 <__alt_data_end+0xff808b00>
  808ef4:	00800304 	movi	r2,12
  808ef8:	a8800015 	stw	r2,0(r21)
  808efc:	8080030b 	ldhu	r2,12(r16)
  808f00:	003f5006 	br	808c44 <__alt_data_end+0xff808c44>

00808f04 <_isatty_r>:
  808f04:	defffd04 	addi	sp,sp,-12
  808f08:	dc000015 	stw	r16,0(sp)
  808f0c:	04002074 	movhi	r16,129
  808f10:	dc400115 	stw	r17,4(sp)
  808f14:	84093004 	addi	r16,r16,9408
  808f18:	2023883a 	mov	r17,r4
  808f1c:	2809883a 	mov	r4,r5
  808f20:	dfc00215 	stw	ra,8(sp)
  808f24:	80000015 	stw	zero,0(r16)
  808f28:	080d0c40 	call	80d0c4 <isatty>
  808f2c:	00ffffc4 	movi	r3,-1
  808f30:	10c00526 	beq	r2,r3,808f48 <_isatty_r+0x44>
  808f34:	dfc00217 	ldw	ra,8(sp)
  808f38:	dc400117 	ldw	r17,4(sp)
  808f3c:	dc000017 	ldw	r16,0(sp)
  808f40:	dec00304 	addi	sp,sp,12
  808f44:	f800283a 	ret
  808f48:	80c00017 	ldw	r3,0(r16)
  808f4c:	183ff926 	beq	r3,zero,808f34 <__alt_data_end+0xff808f34>
  808f50:	88c00015 	stw	r3,0(r17)
  808f54:	003ff706 	br	808f34 <__alt_data_end+0xff808f34>

00808f58 <_lseek_r>:
  808f58:	defffd04 	addi	sp,sp,-12
  808f5c:	2805883a 	mov	r2,r5
  808f60:	dc000015 	stw	r16,0(sp)
  808f64:	04002074 	movhi	r16,129
  808f68:	dc400115 	stw	r17,4(sp)
  808f6c:	300b883a 	mov	r5,r6
  808f70:	84093004 	addi	r16,r16,9408
  808f74:	2023883a 	mov	r17,r4
  808f78:	380d883a 	mov	r6,r7
  808f7c:	1009883a 	mov	r4,r2
  808f80:	dfc00215 	stw	ra,8(sp)
  808f84:	80000015 	stw	zero,0(r16)
  808f88:	080d2900 	call	80d290 <lseek>
  808f8c:	00ffffc4 	movi	r3,-1
  808f90:	10c00526 	beq	r2,r3,808fa8 <_lseek_r+0x50>
  808f94:	dfc00217 	ldw	ra,8(sp)
  808f98:	dc400117 	ldw	r17,4(sp)
  808f9c:	dc000017 	ldw	r16,0(sp)
  808fa0:	dec00304 	addi	sp,sp,12
  808fa4:	f800283a 	ret
  808fa8:	80c00017 	ldw	r3,0(r16)
  808fac:	183ff926 	beq	r3,zero,808f94 <__alt_data_end+0xff808f94>
  808fb0:	88c00015 	stw	r3,0(r17)
  808fb4:	003ff706 	br	808f94 <__alt_data_end+0xff808f94>

00808fb8 <memmove>:
  808fb8:	2005883a 	mov	r2,r4
  808fbc:	29000b2e 	bgeu	r5,r4,808fec <memmove+0x34>
  808fc0:	298f883a 	add	r7,r5,r6
  808fc4:	21c0092e 	bgeu	r4,r7,808fec <memmove+0x34>
  808fc8:	2187883a 	add	r3,r4,r6
  808fcc:	198bc83a 	sub	r5,r3,r6
  808fd0:	30004826 	beq	r6,zero,8090f4 <memmove+0x13c>
  808fd4:	39ffffc4 	addi	r7,r7,-1
  808fd8:	39000003 	ldbu	r4,0(r7)
  808fdc:	18ffffc4 	addi	r3,r3,-1
  808fe0:	19000005 	stb	r4,0(r3)
  808fe4:	28fffb1e 	bne	r5,r3,808fd4 <__alt_data_end+0xff808fd4>
  808fe8:	f800283a 	ret
  808fec:	00c003c4 	movi	r3,15
  808ff0:	1980412e 	bgeu	r3,r6,8090f8 <memmove+0x140>
  808ff4:	2886b03a 	or	r3,r5,r2
  808ff8:	18c000cc 	andi	r3,r3,3
  808ffc:	1800401e 	bne	r3,zero,809100 <memmove+0x148>
  809000:	33fffc04 	addi	r15,r6,-16
  809004:	781ed13a 	srli	r15,r15,4
  809008:	28c00104 	addi	r3,r5,4
  80900c:	13400104 	addi	r13,r2,4
  809010:	781c913a 	slli	r14,r15,4
  809014:	2b000204 	addi	r12,r5,8
  809018:	12c00204 	addi	r11,r2,8
  80901c:	73800504 	addi	r14,r14,20
  809020:	2a800304 	addi	r10,r5,12
  809024:	12400304 	addi	r9,r2,12
  809028:	2b9d883a 	add	r14,r5,r14
  80902c:	2811883a 	mov	r8,r5
  809030:	100f883a 	mov	r7,r2
  809034:	41000017 	ldw	r4,0(r8)
  809038:	39c00404 	addi	r7,r7,16
  80903c:	18c00404 	addi	r3,r3,16
  809040:	393ffc15 	stw	r4,-16(r7)
  809044:	193ffc17 	ldw	r4,-16(r3)
  809048:	6b400404 	addi	r13,r13,16
  80904c:	5ac00404 	addi	r11,r11,16
  809050:	693ffc15 	stw	r4,-16(r13)
  809054:	61000017 	ldw	r4,0(r12)
  809058:	4a400404 	addi	r9,r9,16
  80905c:	42000404 	addi	r8,r8,16
  809060:	593ffc15 	stw	r4,-16(r11)
  809064:	51000017 	ldw	r4,0(r10)
  809068:	63000404 	addi	r12,r12,16
  80906c:	52800404 	addi	r10,r10,16
  809070:	493ffc15 	stw	r4,-16(r9)
  809074:	1bbfef1e 	bne	r3,r14,809034 <__alt_data_end+0xff809034>
  809078:	79000044 	addi	r4,r15,1
  80907c:	2008913a 	slli	r4,r4,4
  809080:	328003cc 	andi	r10,r6,15
  809084:	02c000c4 	movi	r11,3
  809088:	1107883a 	add	r3,r2,r4
  80908c:	290b883a 	add	r5,r5,r4
  809090:	5a801e2e 	bgeu	r11,r10,80910c <memmove+0x154>
  809094:	1813883a 	mov	r9,r3
  809098:	2811883a 	mov	r8,r5
  80909c:	500f883a 	mov	r7,r10
  8090a0:	41000017 	ldw	r4,0(r8)
  8090a4:	4a400104 	addi	r9,r9,4
  8090a8:	39ffff04 	addi	r7,r7,-4
  8090ac:	493fff15 	stw	r4,-4(r9)
  8090b0:	42000104 	addi	r8,r8,4
  8090b4:	59fffa36 	bltu	r11,r7,8090a0 <__alt_data_end+0xff8090a0>
  8090b8:	513fff04 	addi	r4,r10,-4
  8090bc:	2008d0ba 	srli	r4,r4,2
  8090c0:	318000cc 	andi	r6,r6,3
  8090c4:	21000044 	addi	r4,r4,1
  8090c8:	2109883a 	add	r4,r4,r4
  8090cc:	2109883a 	add	r4,r4,r4
  8090d0:	1907883a 	add	r3,r3,r4
  8090d4:	290b883a 	add	r5,r5,r4
  8090d8:	30000b26 	beq	r6,zero,809108 <memmove+0x150>
  8090dc:	198d883a 	add	r6,r3,r6
  8090e0:	29c00003 	ldbu	r7,0(r5)
  8090e4:	18c00044 	addi	r3,r3,1
  8090e8:	29400044 	addi	r5,r5,1
  8090ec:	19ffffc5 	stb	r7,-1(r3)
  8090f0:	19bffb1e 	bne	r3,r6,8090e0 <__alt_data_end+0xff8090e0>
  8090f4:	f800283a 	ret
  8090f8:	1007883a 	mov	r3,r2
  8090fc:	003ff606 	br	8090d8 <__alt_data_end+0xff8090d8>
  809100:	1007883a 	mov	r3,r2
  809104:	003ff506 	br	8090dc <__alt_data_end+0xff8090dc>
  809108:	f800283a 	ret
  80910c:	500d883a 	mov	r6,r10
  809110:	003ff106 	br	8090d8 <__alt_data_end+0xff8090d8>

00809114 <_read_r>:
  809114:	defffd04 	addi	sp,sp,-12
  809118:	2805883a 	mov	r2,r5
  80911c:	dc000015 	stw	r16,0(sp)
  809120:	04002074 	movhi	r16,129
  809124:	dc400115 	stw	r17,4(sp)
  809128:	300b883a 	mov	r5,r6
  80912c:	84093004 	addi	r16,r16,9408
  809130:	2023883a 	mov	r17,r4
  809134:	380d883a 	mov	r6,r7
  809138:	1009883a 	mov	r4,r2
  80913c:	dfc00215 	stw	ra,8(sp)
  809140:	80000015 	stw	zero,0(r16)
  809144:	080d4640 	call	80d464 <read>
  809148:	00ffffc4 	movi	r3,-1
  80914c:	10c00526 	beq	r2,r3,809164 <_read_r+0x50>
  809150:	dfc00217 	ldw	ra,8(sp)
  809154:	dc400117 	ldw	r17,4(sp)
  809158:	dc000017 	ldw	r16,0(sp)
  80915c:	dec00304 	addi	sp,sp,12
  809160:	f800283a 	ret
  809164:	80c00017 	ldw	r3,0(r16)
  809168:	183ff926 	beq	r3,zero,809150 <__alt_data_end+0xff809150>
  80916c:	88c00015 	stw	r3,0(r17)
  809170:	003ff706 	br	809150 <__alt_data_end+0xff809150>

00809174 <_realloc_r>:
  809174:	defff604 	addi	sp,sp,-40
  809178:	dc800215 	stw	r18,8(sp)
  80917c:	dfc00915 	stw	ra,36(sp)
  809180:	df000815 	stw	fp,32(sp)
  809184:	ddc00715 	stw	r23,28(sp)
  809188:	dd800615 	stw	r22,24(sp)
  80918c:	dd400515 	stw	r21,20(sp)
  809190:	dd000415 	stw	r20,16(sp)
  809194:	dcc00315 	stw	r19,12(sp)
  809198:	dc400115 	stw	r17,4(sp)
  80919c:	dc000015 	stw	r16,0(sp)
  8091a0:	3025883a 	mov	r18,r6
  8091a4:	2800b726 	beq	r5,zero,809484 <_realloc_r+0x310>
  8091a8:	282b883a 	mov	r21,r5
  8091ac:	2029883a 	mov	r20,r4
  8091b0:	080d3e00 	call	80d3e0 <__malloc_lock>
  8091b4:	a8bfff17 	ldw	r2,-4(r21)
  8091b8:	043fff04 	movi	r16,-4
  8091bc:	90c002c4 	addi	r3,r18,11
  8091c0:	01000584 	movi	r4,22
  8091c4:	acfffe04 	addi	r19,r21,-8
  8091c8:	1420703a 	and	r16,r2,r16
  8091cc:	20c0332e 	bgeu	r4,r3,80929c <_realloc_r+0x128>
  8091d0:	047ffe04 	movi	r17,-8
  8091d4:	1c62703a 	and	r17,r3,r17
  8091d8:	8807883a 	mov	r3,r17
  8091dc:	88005816 	blt	r17,zero,809340 <_realloc_r+0x1cc>
  8091e0:	8c805736 	bltu	r17,r18,809340 <_realloc_r+0x1cc>
  8091e4:	80c0300e 	bge	r16,r3,8092a8 <_realloc_r+0x134>
  8091e8:	07002074 	movhi	fp,129
  8091ec:	e703cb04 	addi	fp,fp,3884
  8091f0:	e1c00217 	ldw	r7,8(fp)
  8091f4:	9c09883a 	add	r4,r19,r16
  8091f8:	22000117 	ldw	r8,4(r4)
  8091fc:	21c06326 	beq	r4,r7,80938c <_realloc_r+0x218>
  809200:	017fff84 	movi	r5,-2
  809204:	414a703a 	and	r5,r8,r5
  809208:	214b883a 	add	r5,r4,r5
  80920c:	29800117 	ldw	r6,4(r5)
  809210:	3180004c 	andi	r6,r6,1
  809214:	30003f26 	beq	r6,zero,809314 <_realloc_r+0x1a0>
  809218:	1080004c 	andi	r2,r2,1
  80921c:	10008326 	beq	r2,zero,80942c <_realloc_r+0x2b8>
  809220:	900b883a 	mov	r5,r18
  809224:	a009883a 	mov	r4,r20
  809228:	080504c0 	call	80504c <_malloc_r>
  80922c:	1025883a 	mov	r18,r2
  809230:	10011e26 	beq	r2,zero,8096ac <_realloc_r+0x538>
  809234:	a93fff17 	ldw	r4,-4(r21)
  809238:	10fffe04 	addi	r3,r2,-8
  80923c:	00bfff84 	movi	r2,-2
  809240:	2084703a 	and	r2,r4,r2
  809244:	9885883a 	add	r2,r19,r2
  809248:	1880ee26 	beq	r3,r2,809604 <_realloc_r+0x490>
  80924c:	81bfff04 	addi	r6,r16,-4
  809250:	00800904 	movi	r2,36
  809254:	1180b836 	bltu	r2,r6,809538 <_realloc_r+0x3c4>
  809258:	00c004c4 	movi	r3,19
  80925c:	19809636 	bltu	r3,r6,8094b8 <_realloc_r+0x344>
  809260:	9005883a 	mov	r2,r18
  809264:	a807883a 	mov	r3,r21
  809268:	19000017 	ldw	r4,0(r3)
  80926c:	11000015 	stw	r4,0(r2)
  809270:	19000117 	ldw	r4,4(r3)
  809274:	11000115 	stw	r4,4(r2)
  809278:	18c00217 	ldw	r3,8(r3)
  80927c:	10c00215 	stw	r3,8(r2)
  809280:	a80b883a 	mov	r5,r21
  809284:	a009883a 	mov	r4,r20
  809288:	080491c0 	call	80491c <_free_r>
  80928c:	a009883a 	mov	r4,r20
  809290:	080d4040 	call	80d404 <__malloc_unlock>
  809294:	9005883a 	mov	r2,r18
  809298:	00001206 	br	8092e4 <_realloc_r+0x170>
  80929c:	00c00404 	movi	r3,16
  8092a0:	1823883a 	mov	r17,r3
  8092a4:	003fce06 	br	8091e0 <__alt_data_end+0xff8091e0>
  8092a8:	a825883a 	mov	r18,r21
  8092ac:	8445c83a 	sub	r2,r16,r17
  8092b0:	00c003c4 	movi	r3,15
  8092b4:	18802636 	bltu	r3,r2,809350 <_realloc_r+0x1dc>
  8092b8:	99800117 	ldw	r6,4(r19)
  8092bc:	9c07883a 	add	r3,r19,r16
  8092c0:	3180004c 	andi	r6,r6,1
  8092c4:	3420b03a 	or	r16,r6,r16
  8092c8:	9c000115 	stw	r16,4(r19)
  8092cc:	18800117 	ldw	r2,4(r3)
  8092d0:	10800054 	ori	r2,r2,1
  8092d4:	18800115 	stw	r2,4(r3)
  8092d8:	a009883a 	mov	r4,r20
  8092dc:	080d4040 	call	80d404 <__malloc_unlock>
  8092e0:	9005883a 	mov	r2,r18
  8092e4:	dfc00917 	ldw	ra,36(sp)
  8092e8:	df000817 	ldw	fp,32(sp)
  8092ec:	ddc00717 	ldw	r23,28(sp)
  8092f0:	dd800617 	ldw	r22,24(sp)
  8092f4:	dd400517 	ldw	r21,20(sp)
  8092f8:	dd000417 	ldw	r20,16(sp)
  8092fc:	dcc00317 	ldw	r19,12(sp)
  809300:	dc800217 	ldw	r18,8(sp)
  809304:	dc400117 	ldw	r17,4(sp)
  809308:	dc000017 	ldw	r16,0(sp)
  80930c:	dec00a04 	addi	sp,sp,40
  809310:	f800283a 	ret
  809314:	017fff04 	movi	r5,-4
  809318:	414a703a 	and	r5,r8,r5
  80931c:	814d883a 	add	r6,r16,r5
  809320:	30c01f16 	blt	r6,r3,8093a0 <_realloc_r+0x22c>
  809324:	20800317 	ldw	r2,12(r4)
  809328:	20c00217 	ldw	r3,8(r4)
  80932c:	a825883a 	mov	r18,r21
  809330:	3021883a 	mov	r16,r6
  809334:	18800315 	stw	r2,12(r3)
  809338:	10c00215 	stw	r3,8(r2)
  80933c:	003fdb06 	br	8092ac <__alt_data_end+0xff8092ac>
  809340:	00800304 	movi	r2,12
  809344:	a0800015 	stw	r2,0(r20)
  809348:	0005883a 	mov	r2,zero
  80934c:	003fe506 	br	8092e4 <__alt_data_end+0xff8092e4>
  809350:	98c00117 	ldw	r3,4(r19)
  809354:	9c4b883a 	add	r5,r19,r17
  809358:	11000054 	ori	r4,r2,1
  80935c:	18c0004c 	andi	r3,r3,1
  809360:	1c62b03a 	or	r17,r3,r17
  809364:	9c400115 	stw	r17,4(r19)
  809368:	29000115 	stw	r4,4(r5)
  80936c:	2885883a 	add	r2,r5,r2
  809370:	10c00117 	ldw	r3,4(r2)
  809374:	29400204 	addi	r5,r5,8
  809378:	a009883a 	mov	r4,r20
  80937c:	18c00054 	ori	r3,r3,1
  809380:	10c00115 	stw	r3,4(r2)
  809384:	080491c0 	call	80491c <_free_r>
  809388:	003fd306 	br	8092d8 <__alt_data_end+0xff8092d8>
  80938c:	017fff04 	movi	r5,-4
  809390:	414a703a 	and	r5,r8,r5
  809394:	89800404 	addi	r6,r17,16
  809398:	8151883a 	add	r8,r16,r5
  80939c:	4180590e 	bge	r8,r6,809504 <_realloc_r+0x390>
  8093a0:	1080004c 	andi	r2,r2,1
  8093a4:	103f9e1e 	bne	r2,zero,809220 <__alt_data_end+0xff809220>
  8093a8:	adbffe17 	ldw	r22,-8(r21)
  8093ac:	00bfff04 	movi	r2,-4
  8093b0:	9dadc83a 	sub	r22,r19,r22
  8093b4:	b1800117 	ldw	r6,4(r22)
  8093b8:	3084703a 	and	r2,r6,r2
  8093bc:	20002026 	beq	r4,zero,809440 <_realloc_r+0x2cc>
  8093c0:	80af883a 	add	r23,r16,r2
  8093c4:	b96f883a 	add	r23,r23,r5
  8093c8:	21c05f26 	beq	r4,r7,809548 <_realloc_r+0x3d4>
  8093cc:	b8c01c16 	blt	r23,r3,809440 <_realloc_r+0x2cc>
  8093d0:	20800317 	ldw	r2,12(r4)
  8093d4:	20c00217 	ldw	r3,8(r4)
  8093d8:	81bfff04 	addi	r6,r16,-4
  8093dc:	01000904 	movi	r4,36
  8093e0:	18800315 	stw	r2,12(r3)
  8093e4:	10c00215 	stw	r3,8(r2)
  8093e8:	b0c00217 	ldw	r3,8(r22)
  8093ec:	b0800317 	ldw	r2,12(r22)
  8093f0:	b4800204 	addi	r18,r22,8
  8093f4:	18800315 	stw	r2,12(r3)
  8093f8:	10c00215 	stw	r3,8(r2)
  8093fc:	21801b36 	bltu	r4,r6,80946c <_realloc_r+0x2f8>
  809400:	008004c4 	movi	r2,19
  809404:	1180352e 	bgeu	r2,r6,8094dc <_realloc_r+0x368>
  809408:	a8800017 	ldw	r2,0(r21)
  80940c:	b0800215 	stw	r2,8(r22)
  809410:	a8800117 	ldw	r2,4(r21)
  809414:	b0800315 	stw	r2,12(r22)
  809418:	008006c4 	movi	r2,27
  80941c:	11807f36 	bltu	r2,r6,80961c <_realloc_r+0x4a8>
  809420:	b0800404 	addi	r2,r22,16
  809424:	ad400204 	addi	r21,r21,8
  809428:	00002d06 	br	8094e0 <_realloc_r+0x36c>
  80942c:	adbffe17 	ldw	r22,-8(r21)
  809430:	00bfff04 	movi	r2,-4
  809434:	9dadc83a 	sub	r22,r19,r22
  809438:	b1000117 	ldw	r4,4(r22)
  80943c:	2084703a 	and	r2,r4,r2
  809440:	b03f7726 	beq	r22,zero,809220 <__alt_data_end+0xff809220>
  809444:	80af883a 	add	r23,r16,r2
  809448:	b8ff7516 	blt	r23,r3,809220 <__alt_data_end+0xff809220>
  80944c:	b0800317 	ldw	r2,12(r22)
  809450:	b0c00217 	ldw	r3,8(r22)
  809454:	81bfff04 	addi	r6,r16,-4
  809458:	01000904 	movi	r4,36
  80945c:	18800315 	stw	r2,12(r3)
  809460:	10c00215 	stw	r3,8(r2)
  809464:	b4800204 	addi	r18,r22,8
  809468:	21bfe52e 	bgeu	r4,r6,809400 <__alt_data_end+0xff809400>
  80946c:	a80b883a 	mov	r5,r21
  809470:	9009883a 	mov	r4,r18
  809474:	0808fb80 	call	808fb8 <memmove>
  809478:	b821883a 	mov	r16,r23
  80947c:	b027883a 	mov	r19,r22
  809480:	003f8a06 	br	8092ac <__alt_data_end+0xff8092ac>
  809484:	300b883a 	mov	r5,r6
  809488:	dfc00917 	ldw	ra,36(sp)
  80948c:	df000817 	ldw	fp,32(sp)
  809490:	ddc00717 	ldw	r23,28(sp)
  809494:	dd800617 	ldw	r22,24(sp)
  809498:	dd400517 	ldw	r21,20(sp)
  80949c:	dd000417 	ldw	r20,16(sp)
  8094a0:	dcc00317 	ldw	r19,12(sp)
  8094a4:	dc800217 	ldw	r18,8(sp)
  8094a8:	dc400117 	ldw	r17,4(sp)
  8094ac:	dc000017 	ldw	r16,0(sp)
  8094b0:	dec00a04 	addi	sp,sp,40
  8094b4:	080504c1 	jmpi	80504c <_malloc_r>
  8094b8:	a8c00017 	ldw	r3,0(r21)
  8094bc:	90c00015 	stw	r3,0(r18)
  8094c0:	a8c00117 	ldw	r3,4(r21)
  8094c4:	90c00115 	stw	r3,4(r18)
  8094c8:	00c006c4 	movi	r3,27
  8094cc:	19804536 	bltu	r3,r6,8095e4 <_realloc_r+0x470>
  8094d0:	90800204 	addi	r2,r18,8
  8094d4:	a8c00204 	addi	r3,r21,8
  8094d8:	003f6306 	br	809268 <__alt_data_end+0xff809268>
  8094dc:	9005883a 	mov	r2,r18
  8094e0:	a8c00017 	ldw	r3,0(r21)
  8094e4:	b821883a 	mov	r16,r23
  8094e8:	b027883a 	mov	r19,r22
  8094ec:	10c00015 	stw	r3,0(r2)
  8094f0:	a8c00117 	ldw	r3,4(r21)
  8094f4:	10c00115 	stw	r3,4(r2)
  8094f8:	a8c00217 	ldw	r3,8(r21)
  8094fc:	10c00215 	stw	r3,8(r2)
  809500:	003f6a06 	br	8092ac <__alt_data_end+0xff8092ac>
  809504:	9c67883a 	add	r19,r19,r17
  809508:	4445c83a 	sub	r2,r8,r17
  80950c:	e4c00215 	stw	r19,8(fp)
  809510:	10800054 	ori	r2,r2,1
  809514:	98800115 	stw	r2,4(r19)
  809518:	a8bfff17 	ldw	r2,-4(r21)
  80951c:	a009883a 	mov	r4,r20
  809520:	1080004c 	andi	r2,r2,1
  809524:	1462b03a 	or	r17,r2,r17
  809528:	ac7fff15 	stw	r17,-4(r21)
  80952c:	080d4040 	call	80d404 <__malloc_unlock>
  809530:	a805883a 	mov	r2,r21
  809534:	003f6b06 	br	8092e4 <__alt_data_end+0xff8092e4>
  809538:	a80b883a 	mov	r5,r21
  80953c:	9009883a 	mov	r4,r18
  809540:	0808fb80 	call	808fb8 <memmove>
  809544:	003f4e06 	br	809280 <__alt_data_end+0xff809280>
  809548:	89000404 	addi	r4,r17,16
  80954c:	b93fbc16 	blt	r23,r4,809440 <__alt_data_end+0xff809440>
  809550:	b0800317 	ldw	r2,12(r22)
  809554:	b0c00217 	ldw	r3,8(r22)
  809558:	81bfff04 	addi	r6,r16,-4
  80955c:	01000904 	movi	r4,36
  809560:	18800315 	stw	r2,12(r3)
  809564:	10c00215 	stw	r3,8(r2)
  809568:	b4800204 	addi	r18,r22,8
  80956c:	21804336 	bltu	r4,r6,80967c <_realloc_r+0x508>
  809570:	008004c4 	movi	r2,19
  809574:	11803f2e 	bgeu	r2,r6,809674 <_realloc_r+0x500>
  809578:	a8800017 	ldw	r2,0(r21)
  80957c:	b0800215 	stw	r2,8(r22)
  809580:	a8800117 	ldw	r2,4(r21)
  809584:	b0800315 	stw	r2,12(r22)
  809588:	008006c4 	movi	r2,27
  80958c:	11803f36 	bltu	r2,r6,80968c <_realloc_r+0x518>
  809590:	b0800404 	addi	r2,r22,16
  809594:	ad400204 	addi	r21,r21,8
  809598:	a8c00017 	ldw	r3,0(r21)
  80959c:	10c00015 	stw	r3,0(r2)
  8095a0:	a8c00117 	ldw	r3,4(r21)
  8095a4:	10c00115 	stw	r3,4(r2)
  8095a8:	a8c00217 	ldw	r3,8(r21)
  8095ac:	10c00215 	stw	r3,8(r2)
  8095b0:	b447883a 	add	r3,r22,r17
  8095b4:	bc45c83a 	sub	r2,r23,r17
  8095b8:	e0c00215 	stw	r3,8(fp)
  8095bc:	10800054 	ori	r2,r2,1
  8095c0:	18800115 	stw	r2,4(r3)
  8095c4:	b0800117 	ldw	r2,4(r22)
  8095c8:	a009883a 	mov	r4,r20
  8095cc:	1080004c 	andi	r2,r2,1
  8095d0:	1462b03a 	or	r17,r2,r17
  8095d4:	b4400115 	stw	r17,4(r22)
  8095d8:	080d4040 	call	80d404 <__malloc_unlock>
  8095dc:	9005883a 	mov	r2,r18
  8095e0:	003f4006 	br	8092e4 <__alt_data_end+0xff8092e4>
  8095e4:	a8c00217 	ldw	r3,8(r21)
  8095e8:	90c00215 	stw	r3,8(r18)
  8095ec:	a8c00317 	ldw	r3,12(r21)
  8095f0:	90c00315 	stw	r3,12(r18)
  8095f4:	30801126 	beq	r6,r2,80963c <_realloc_r+0x4c8>
  8095f8:	90800404 	addi	r2,r18,16
  8095fc:	a8c00404 	addi	r3,r21,16
  809600:	003f1906 	br	809268 <__alt_data_end+0xff809268>
  809604:	90ffff17 	ldw	r3,-4(r18)
  809608:	00bfff04 	movi	r2,-4
  80960c:	a825883a 	mov	r18,r21
  809610:	1884703a 	and	r2,r3,r2
  809614:	80a1883a 	add	r16,r16,r2
  809618:	003f2406 	br	8092ac <__alt_data_end+0xff8092ac>
  80961c:	a8800217 	ldw	r2,8(r21)
  809620:	b0800415 	stw	r2,16(r22)
  809624:	a8800317 	ldw	r2,12(r21)
  809628:	b0800515 	stw	r2,20(r22)
  80962c:	31000a26 	beq	r6,r4,809658 <_realloc_r+0x4e4>
  809630:	b0800604 	addi	r2,r22,24
  809634:	ad400404 	addi	r21,r21,16
  809638:	003fa906 	br	8094e0 <__alt_data_end+0xff8094e0>
  80963c:	a9000417 	ldw	r4,16(r21)
  809640:	90800604 	addi	r2,r18,24
  809644:	a8c00604 	addi	r3,r21,24
  809648:	91000415 	stw	r4,16(r18)
  80964c:	a9000517 	ldw	r4,20(r21)
  809650:	91000515 	stw	r4,20(r18)
  809654:	003f0406 	br	809268 <__alt_data_end+0xff809268>
  809658:	a8c00417 	ldw	r3,16(r21)
  80965c:	ad400604 	addi	r21,r21,24
  809660:	b0800804 	addi	r2,r22,32
  809664:	b0c00615 	stw	r3,24(r22)
  809668:	a8ffff17 	ldw	r3,-4(r21)
  80966c:	b0c00715 	stw	r3,28(r22)
  809670:	003f9b06 	br	8094e0 <__alt_data_end+0xff8094e0>
  809674:	9005883a 	mov	r2,r18
  809678:	003fc706 	br	809598 <__alt_data_end+0xff809598>
  80967c:	a80b883a 	mov	r5,r21
  809680:	9009883a 	mov	r4,r18
  809684:	0808fb80 	call	808fb8 <memmove>
  809688:	003fc906 	br	8095b0 <__alt_data_end+0xff8095b0>
  80968c:	a8800217 	ldw	r2,8(r21)
  809690:	b0800415 	stw	r2,16(r22)
  809694:	a8800317 	ldw	r2,12(r21)
  809698:	b0800515 	stw	r2,20(r22)
  80969c:	31000726 	beq	r6,r4,8096bc <_realloc_r+0x548>
  8096a0:	b0800604 	addi	r2,r22,24
  8096a4:	ad400404 	addi	r21,r21,16
  8096a8:	003fbb06 	br	809598 <__alt_data_end+0xff809598>
  8096ac:	a009883a 	mov	r4,r20
  8096b0:	080d4040 	call	80d404 <__malloc_unlock>
  8096b4:	0005883a 	mov	r2,zero
  8096b8:	003f0a06 	br	8092e4 <__alt_data_end+0xff8092e4>
  8096bc:	a8c00417 	ldw	r3,16(r21)
  8096c0:	ad400604 	addi	r21,r21,24
  8096c4:	b0800804 	addi	r2,r22,32
  8096c8:	b0c00615 	stw	r3,24(r22)
  8096cc:	a8ffff17 	ldw	r3,-4(r21)
  8096d0:	b0c00715 	stw	r3,28(r22)
  8096d4:	003fb006 	br	809598 <__alt_data_end+0xff809598>

008096d8 <__swbuf_r>:
  8096d8:	defffb04 	addi	sp,sp,-20
  8096dc:	dcc00315 	stw	r19,12(sp)
  8096e0:	dc800215 	stw	r18,8(sp)
  8096e4:	dc000015 	stw	r16,0(sp)
  8096e8:	dfc00415 	stw	ra,16(sp)
  8096ec:	dc400115 	stw	r17,4(sp)
  8096f0:	2025883a 	mov	r18,r4
  8096f4:	2827883a 	mov	r19,r5
  8096f8:	3021883a 	mov	r16,r6
  8096fc:	20000226 	beq	r4,zero,809708 <__swbuf_r+0x30>
  809700:	20800e17 	ldw	r2,56(r4)
  809704:	10004226 	beq	r2,zero,809810 <__swbuf_r+0x138>
  809708:	80800617 	ldw	r2,24(r16)
  80970c:	8100030b 	ldhu	r4,12(r16)
  809710:	80800215 	stw	r2,8(r16)
  809714:	2080020c 	andi	r2,r4,8
  809718:	10003626 	beq	r2,zero,8097f4 <__swbuf_r+0x11c>
  80971c:	80c00417 	ldw	r3,16(r16)
  809720:	18003426 	beq	r3,zero,8097f4 <__swbuf_r+0x11c>
  809724:	2088000c 	andi	r2,r4,8192
  809728:	9c403fcc 	andi	r17,r19,255
  80972c:	10001a26 	beq	r2,zero,809798 <__swbuf_r+0xc0>
  809730:	80800017 	ldw	r2,0(r16)
  809734:	81000517 	ldw	r4,20(r16)
  809738:	10c7c83a 	sub	r3,r2,r3
  80973c:	1900200e 	bge	r3,r4,8097c0 <__swbuf_r+0xe8>
  809740:	18c00044 	addi	r3,r3,1
  809744:	81000217 	ldw	r4,8(r16)
  809748:	11400044 	addi	r5,r2,1
  80974c:	81400015 	stw	r5,0(r16)
  809750:	213fffc4 	addi	r4,r4,-1
  809754:	81000215 	stw	r4,8(r16)
  809758:	14c00005 	stb	r19,0(r2)
  80975c:	80800517 	ldw	r2,20(r16)
  809760:	10c01e26 	beq	r2,r3,8097dc <__swbuf_r+0x104>
  809764:	8080030b 	ldhu	r2,12(r16)
  809768:	1080004c 	andi	r2,r2,1
  80976c:	10000226 	beq	r2,zero,809778 <__swbuf_r+0xa0>
  809770:	00800284 	movi	r2,10
  809774:	88801926 	beq	r17,r2,8097dc <__swbuf_r+0x104>
  809778:	8805883a 	mov	r2,r17
  80977c:	dfc00417 	ldw	ra,16(sp)
  809780:	dcc00317 	ldw	r19,12(sp)
  809784:	dc800217 	ldw	r18,8(sp)
  809788:	dc400117 	ldw	r17,4(sp)
  80978c:	dc000017 	ldw	r16,0(sp)
  809790:	dec00504 	addi	sp,sp,20
  809794:	f800283a 	ret
  809798:	81401917 	ldw	r5,100(r16)
  80979c:	00b7ffc4 	movi	r2,-8193
  8097a0:	21080014 	ori	r4,r4,8192
  8097a4:	2884703a 	and	r2,r5,r2
  8097a8:	80801915 	stw	r2,100(r16)
  8097ac:	80800017 	ldw	r2,0(r16)
  8097b0:	8100030d 	sth	r4,12(r16)
  8097b4:	81000517 	ldw	r4,20(r16)
  8097b8:	10c7c83a 	sub	r3,r2,r3
  8097bc:	193fe016 	blt	r3,r4,809740 <__alt_data_end+0xff809740>
  8097c0:	800b883a 	mov	r5,r16
  8097c4:	9009883a 	mov	r4,r18
  8097c8:	08043cc0 	call	8043cc <_fflush_r>
  8097cc:	1000071e 	bne	r2,zero,8097ec <__swbuf_r+0x114>
  8097d0:	80800017 	ldw	r2,0(r16)
  8097d4:	00c00044 	movi	r3,1
  8097d8:	003fda06 	br	809744 <__alt_data_end+0xff809744>
  8097dc:	800b883a 	mov	r5,r16
  8097e0:	9009883a 	mov	r4,r18
  8097e4:	08043cc0 	call	8043cc <_fflush_r>
  8097e8:	103fe326 	beq	r2,zero,809778 <__alt_data_end+0xff809778>
  8097ec:	00bfffc4 	movi	r2,-1
  8097f0:	003fe206 	br	80977c <__alt_data_end+0xff80977c>
  8097f4:	800b883a 	mov	r5,r16
  8097f8:	9009883a 	mov	r4,r18
  8097fc:	08027d40 	call	8027d4 <__swsetup_r>
  809800:	103ffa1e 	bne	r2,zero,8097ec <__alt_data_end+0xff8097ec>
  809804:	8100030b 	ldhu	r4,12(r16)
  809808:	80c00417 	ldw	r3,16(r16)
  80980c:	003fc506 	br	809724 <__alt_data_end+0xff809724>
  809810:	08047a80 	call	8047a8 <__sinit>
  809814:	003fbc06 	br	809708 <__alt_data_end+0xff809708>

00809818 <__swbuf>:
  809818:	00802074 	movhi	r2,129
  80981c:	1085d504 	addi	r2,r2,5972
  809820:	280d883a 	mov	r6,r5
  809824:	200b883a 	mov	r5,r4
  809828:	11000017 	ldw	r4,0(r2)
  80982c:	08096d81 	jmpi	8096d8 <__swbuf_r>

00809830 <_wcrtomb_r>:
  809830:	defff604 	addi	sp,sp,-40
  809834:	00802074 	movhi	r2,129
  809838:	dc800815 	stw	r18,32(sp)
  80983c:	dc400715 	stw	r17,28(sp)
  809840:	dc000615 	stw	r16,24(sp)
  809844:	1085d904 	addi	r2,r2,5988
  809848:	dfc00915 	stw	ra,36(sp)
  80984c:	2021883a 	mov	r16,r4
  809850:	3823883a 	mov	r17,r7
  809854:	14800017 	ldw	r18,0(r2)
  809858:	28001426 	beq	r5,zero,8098ac <_wcrtomb_r+0x7c>
  80985c:	d9400415 	stw	r5,16(sp)
  809860:	d9800515 	stw	r6,20(sp)
  809864:	0804e300 	call	804e30 <__locale_charset>
  809868:	d9800517 	ldw	r6,20(sp)
  80986c:	d9400417 	ldw	r5,16(sp)
  809870:	100f883a 	mov	r7,r2
  809874:	dc400015 	stw	r17,0(sp)
  809878:	8009883a 	mov	r4,r16
  80987c:	903ee83a 	callr	r18
  809880:	00ffffc4 	movi	r3,-1
  809884:	10c0031e 	bne	r2,r3,809894 <_wcrtomb_r+0x64>
  809888:	88000015 	stw	zero,0(r17)
  80988c:	00c02284 	movi	r3,138
  809890:	80c00015 	stw	r3,0(r16)
  809894:	dfc00917 	ldw	ra,36(sp)
  809898:	dc800817 	ldw	r18,32(sp)
  80989c:	dc400717 	ldw	r17,28(sp)
  8098a0:	dc000617 	ldw	r16,24(sp)
  8098a4:	dec00a04 	addi	sp,sp,40
  8098a8:	f800283a 	ret
  8098ac:	0804e300 	call	804e30 <__locale_charset>
  8098b0:	100f883a 	mov	r7,r2
  8098b4:	dc400015 	stw	r17,0(sp)
  8098b8:	000d883a 	mov	r6,zero
  8098bc:	d9400104 	addi	r5,sp,4
  8098c0:	8009883a 	mov	r4,r16
  8098c4:	903ee83a 	callr	r18
  8098c8:	003fed06 	br	809880 <__alt_data_end+0xff809880>

008098cc <wcrtomb>:
  8098cc:	defff604 	addi	sp,sp,-40
  8098d0:	00802074 	movhi	r2,129
  8098d4:	dc800615 	stw	r18,24(sp)
  8098d8:	dc400515 	stw	r17,20(sp)
  8098dc:	1085d504 	addi	r2,r2,5972
  8098e0:	dfc00915 	stw	ra,36(sp)
  8098e4:	dd000815 	stw	r20,32(sp)
  8098e8:	dcc00715 	stw	r19,28(sp)
  8098ec:	dc000415 	stw	r16,16(sp)
  8098f0:	3025883a 	mov	r18,r6
  8098f4:	14400017 	ldw	r17,0(r2)
  8098f8:	20001926 	beq	r4,zero,809960 <wcrtomb+0x94>
  8098fc:	00802074 	movhi	r2,129
  809900:	1085d904 	addi	r2,r2,5988
  809904:	15000017 	ldw	r20,0(r2)
  809908:	2021883a 	mov	r16,r4
  80990c:	2827883a 	mov	r19,r5
  809910:	0804e300 	call	804e30 <__locale_charset>
  809914:	100f883a 	mov	r7,r2
  809918:	dc800015 	stw	r18,0(sp)
  80991c:	980d883a 	mov	r6,r19
  809920:	800b883a 	mov	r5,r16
  809924:	8809883a 	mov	r4,r17
  809928:	a03ee83a 	callr	r20
  80992c:	00ffffc4 	movi	r3,-1
  809930:	10c0031e 	bne	r2,r3,809940 <wcrtomb+0x74>
  809934:	90000015 	stw	zero,0(r18)
  809938:	00c02284 	movi	r3,138
  80993c:	88c00015 	stw	r3,0(r17)
  809940:	dfc00917 	ldw	ra,36(sp)
  809944:	dd000817 	ldw	r20,32(sp)
  809948:	dcc00717 	ldw	r19,28(sp)
  80994c:	dc800617 	ldw	r18,24(sp)
  809950:	dc400517 	ldw	r17,20(sp)
  809954:	dc000417 	ldw	r16,16(sp)
  809958:	dec00a04 	addi	sp,sp,40
  80995c:	f800283a 	ret
  809960:	00802074 	movhi	r2,129
  809964:	1085d904 	addi	r2,r2,5988
  809968:	14000017 	ldw	r16,0(r2)
  80996c:	0804e300 	call	804e30 <__locale_charset>
  809970:	100f883a 	mov	r7,r2
  809974:	dc800015 	stw	r18,0(sp)
  809978:	000d883a 	mov	r6,zero
  80997c:	d9400104 	addi	r5,sp,4
  809980:	8809883a 	mov	r4,r17
  809984:	803ee83a 	callr	r16
  809988:	003fe806 	br	80992c <__alt_data_end+0xff80992c>

0080998c <__ascii_wctomb>:
  80998c:	28000526 	beq	r5,zero,8099a4 <__ascii_wctomb+0x18>
  809990:	00803fc4 	movi	r2,255
  809994:	11800536 	bltu	r2,r6,8099ac <__ascii_wctomb+0x20>
  809998:	29800005 	stb	r6,0(r5)
  80999c:	00800044 	movi	r2,1
  8099a0:	f800283a 	ret
  8099a4:	0005883a 	mov	r2,zero
  8099a8:	f800283a 	ret
  8099ac:	00802284 	movi	r2,138
  8099b0:	20800015 	stw	r2,0(r4)
  8099b4:	00bfffc4 	movi	r2,-1
  8099b8:	f800283a 	ret

008099bc <_wctomb_r>:
  8099bc:	00802074 	movhi	r2,129
  8099c0:	defff904 	addi	sp,sp,-28
  8099c4:	1085d904 	addi	r2,r2,5988
  8099c8:	dfc00615 	stw	ra,24(sp)
  8099cc:	dc400515 	stw	r17,20(sp)
  8099d0:	dc000415 	stw	r16,16(sp)
  8099d4:	3823883a 	mov	r17,r7
  8099d8:	14000017 	ldw	r16,0(r2)
  8099dc:	d9000115 	stw	r4,4(sp)
  8099e0:	d9400215 	stw	r5,8(sp)
  8099e4:	d9800315 	stw	r6,12(sp)
  8099e8:	0804e300 	call	804e30 <__locale_charset>
  8099ec:	d9800317 	ldw	r6,12(sp)
  8099f0:	d9400217 	ldw	r5,8(sp)
  8099f4:	d9000117 	ldw	r4,4(sp)
  8099f8:	100f883a 	mov	r7,r2
  8099fc:	dc400015 	stw	r17,0(sp)
  809a00:	803ee83a 	callr	r16
  809a04:	dfc00617 	ldw	ra,24(sp)
  809a08:	dc400517 	ldw	r17,20(sp)
  809a0c:	dc000417 	ldw	r16,16(sp)
  809a10:	dec00704 	addi	sp,sp,28
  809a14:	f800283a 	ret

00809a18 <__udivdi3>:
  809a18:	defff504 	addi	sp,sp,-44
  809a1c:	dcc00415 	stw	r19,16(sp)
  809a20:	dc000115 	stw	r16,4(sp)
  809a24:	dfc00a15 	stw	ra,40(sp)
  809a28:	df000915 	stw	fp,36(sp)
  809a2c:	ddc00815 	stw	r23,32(sp)
  809a30:	dd800715 	stw	r22,28(sp)
  809a34:	dd400615 	stw	r21,24(sp)
  809a38:	dd000515 	stw	r20,20(sp)
  809a3c:	dc800315 	stw	r18,12(sp)
  809a40:	dc400215 	stw	r17,8(sp)
  809a44:	2027883a 	mov	r19,r4
  809a48:	2821883a 	mov	r16,r5
  809a4c:	3800411e 	bne	r7,zero,809b54 <__udivdi3+0x13c>
  809a50:	3023883a 	mov	r17,r6
  809a54:	2025883a 	mov	r18,r4
  809a58:	2980522e 	bgeu	r5,r6,809ba4 <__udivdi3+0x18c>
  809a5c:	00bfffd4 	movui	r2,65535
  809a60:	282d883a 	mov	r22,r5
  809a64:	1180a836 	bltu	r2,r6,809d08 <__udivdi3+0x2f0>
  809a68:	00803fc4 	movi	r2,255
  809a6c:	1185803a 	cmpltu	r2,r2,r6
  809a70:	100490fa 	slli	r2,r2,3
  809a74:	3086d83a 	srl	r3,r6,r2
  809a78:	01002074 	movhi	r4,129
  809a7c:	2101a604 	addi	r4,r4,1688
  809a80:	20c7883a 	add	r3,r4,r3
  809a84:	18c00003 	ldbu	r3,0(r3)
  809a88:	1885883a 	add	r2,r3,r2
  809a8c:	00c00804 	movi	r3,32
  809a90:	1887c83a 	sub	r3,r3,r2
  809a94:	18000526 	beq	r3,zero,809aac <__udivdi3+0x94>
  809a98:	80e0983a 	sll	r16,r16,r3
  809a9c:	9884d83a 	srl	r2,r19,r2
  809aa0:	30e2983a 	sll	r17,r6,r3
  809aa4:	98e4983a 	sll	r18,r19,r3
  809aa8:	142cb03a 	or	r22,r2,r16
  809aac:	882ad43a 	srli	r21,r17,16
  809ab0:	b009883a 	mov	r4,r22
  809ab4:	8d3fffcc 	andi	r20,r17,65535
  809ab8:	a80b883a 	mov	r5,r21
  809abc:	080a6240 	call	80a624 <__umodsi3>
  809ac0:	b009883a 	mov	r4,r22
  809ac4:	a80b883a 	mov	r5,r21
  809ac8:	1027883a 	mov	r19,r2
  809acc:	080a5c00 	call	80a5c0 <__udivsi3>
  809ad0:	102d883a 	mov	r22,r2
  809ad4:	9826943a 	slli	r19,r19,16
  809ad8:	9004d43a 	srli	r2,r18,16
  809adc:	a5a1383a 	mul	r16,r20,r22
  809ae0:	14c4b03a 	or	r2,r2,r19
  809ae4:	1400052e 	bgeu	r2,r16,809afc <__udivdi3+0xe4>
  809ae8:	1445883a 	add	r2,r2,r17
  809aec:	b0ffffc4 	addi	r3,r22,-1
  809af0:	14400136 	bltu	r2,r17,809af8 <__udivdi3+0xe0>
  809af4:	14012336 	bltu	r2,r16,809f84 <__udivdi3+0x56c>
  809af8:	182d883a 	mov	r22,r3
  809afc:	1421c83a 	sub	r16,r2,r16
  809b00:	a80b883a 	mov	r5,r21
  809b04:	8009883a 	mov	r4,r16
  809b08:	080a6240 	call	80a624 <__umodsi3>
  809b0c:	1027883a 	mov	r19,r2
  809b10:	a80b883a 	mov	r5,r21
  809b14:	8009883a 	mov	r4,r16
  809b18:	080a5c00 	call	80a5c0 <__udivsi3>
  809b1c:	9826943a 	slli	r19,r19,16
  809b20:	a0a9383a 	mul	r20,r20,r2
  809b24:	94bfffcc 	andi	r18,r18,65535
  809b28:	94e4b03a 	or	r18,r18,r19
  809b2c:	9500052e 	bgeu	r18,r20,809b44 <__udivdi3+0x12c>
  809b30:	8ca5883a 	add	r18,r17,r18
  809b34:	10ffffc4 	addi	r3,r2,-1
  809b38:	9440f136 	bltu	r18,r17,809f00 <__udivdi3+0x4e8>
  809b3c:	9500f02e 	bgeu	r18,r20,809f00 <__udivdi3+0x4e8>
  809b40:	10bfff84 	addi	r2,r2,-2
  809b44:	b00c943a 	slli	r6,r22,16
  809b48:	0007883a 	mov	r3,zero
  809b4c:	3084b03a 	or	r2,r6,r2
  809b50:	00005906 	br	809cb8 <__udivdi3+0x2a0>
  809b54:	29c05636 	bltu	r5,r7,809cb0 <__udivdi3+0x298>
  809b58:	00bfffd4 	movui	r2,65535
  809b5c:	11c0622e 	bgeu	r2,r7,809ce8 <__udivdi3+0x2d0>
  809b60:	00804034 	movhi	r2,256
  809b64:	10bfffc4 	addi	r2,r2,-1
  809b68:	11c0ee36 	bltu	r2,r7,809f24 <__udivdi3+0x50c>
  809b6c:	00800404 	movi	r2,16
  809b70:	3886d83a 	srl	r3,r7,r2
  809b74:	01002074 	movhi	r4,129
  809b78:	2101a604 	addi	r4,r4,1688
  809b7c:	20c7883a 	add	r3,r4,r3
  809b80:	18c00003 	ldbu	r3,0(r3)
  809b84:	05400804 	movi	r21,32
  809b88:	1885883a 	add	r2,r3,r2
  809b8c:	a8abc83a 	sub	r21,r21,r2
  809b90:	a800621e 	bne	r21,zero,809d1c <__udivdi3+0x304>
  809b94:	3c00e936 	bltu	r7,r16,809f3c <__udivdi3+0x524>
  809b98:	9985403a 	cmpgeu	r2,r19,r6
  809b9c:	0007883a 	mov	r3,zero
  809ba0:	00004506 	br	809cb8 <__udivdi3+0x2a0>
  809ba4:	3000041e 	bne	r6,zero,809bb8 <__udivdi3+0x1a0>
  809ba8:	000b883a 	mov	r5,zero
  809bac:	01000044 	movi	r4,1
  809bb0:	080a5c00 	call	80a5c0 <__udivsi3>
  809bb4:	1023883a 	mov	r17,r2
  809bb8:	00bfffd4 	movui	r2,65535
  809bbc:	14404e2e 	bgeu	r2,r17,809cf8 <__udivdi3+0x2e0>
  809bc0:	00804034 	movhi	r2,256
  809bc4:	10bfffc4 	addi	r2,r2,-1
  809bc8:	1440d836 	bltu	r2,r17,809f2c <__udivdi3+0x514>
  809bcc:	00800404 	movi	r2,16
  809bd0:	8886d83a 	srl	r3,r17,r2
  809bd4:	01002074 	movhi	r4,129
  809bd8:	2101a604 	addi	r4,r4,1688
  809bdc:	20c7883a 	add	r3,r4,r3
  809be0:	18c00003 	ldbu	r3,0(r3)
  809be4:	1885883a 	add	r2,r3,r2
  809be8:	00c00804 	movi	r3,32
  809bec:	1887c83a 	sub	r3,r3,r2
  809bf0:	18008f1e 	bne	r3,zero,809e30 <__udivdi3+0x418>
  809bf4:	882ad43a 	srli	r21,r17,16
  809bf8:	8461c83a 	sub	r16,r16,r17
  809bfc:	8d3fffcc 	andi	r20,r17,65535
  809c00:	00c00044 	movi	r3,1
  809c04:	8009883a 	mov	r4,r16
  809c08:	a80b883a 	mov	r5,r21
  809c0c:	d8c00015 	stw	r3,0(sp)
  809c10:	080a6240 	call	80a624 <__umodsi3>
  809c14:	8009883a 	mov	r4,r16
  809c18:	a80b883a 	mov	r5,r21
  809c1c:	1027883a 	mov	r19,r2
  809c20:	080a5c00 	call	80a5c0 <__udivsi3>
  809c24:	9826943a 	slli	r19,r19,16
  809c28:	9008d43a 	srli	r4,r18,16
  809c2c:	1521383a 	mul	r16,r2,r20
  809c30:	102d883a 	mov	r22,r2
  809c34:	24c8b03a 	or	r4,r4,r19
  809c38:	d8c00017 	ldw	r3,0(sp)
  809c3c:	2400052e 	bgeu	r4,r16,809c54 <__udivdi3+0x23c>
  809c40:	2449883a 	add	r4,r4,r17
  809c44:	b0bfffc4 	addi	r2,r22,-1
  809c48:	24400136 	bltu	r4,r17,809c50 <__udivdi3+0x238>
  809c4c:	2400ca36 	bltu	r4,r16,809f78 <__udivdi3+0x560>
  809c50:	102d883a 	mov	r22,r2
  809c54:	2421c83a 	sub	r16,r4,r16
  809c58:	a80b883a 	mov	r5,r21
  809c5c:	8009883a 	mov	r4,r16
  809c60:	d8c00015 	stw	r3,0(sp)
  809c64:	080a6240 	call	80a624 <__umodsi3>
  809c68:	1027883a 	mov	r19,r2
  809c6c:	a80b883a 	mov	r5,r21
  809c70:	8009883a 	mov	r4,r16
  809c74:	080a5c00 	call	80a5c0 <__udivsi3>
  809c78:	9826943a 	slli	r19,r19,16
  809c7c:	1529383a 	mul	r20,r2,r20
  809c80:	94bfffcc 	andi	r18,r18,65535
  809c84:	94e4b03a 	or	r18,r18,r19
  809c88:	d8c00017 	ldw	r3,0(sp)
  809c8c:	9500052e 	bgeu	r18,r20,809ca4 <__udivdi3+0x28c>
  809c90:	8ca5883a 	add	r18,r17,r18
  809c94:	113fffc4 	addi	r4,r2,-1
  809c98:	94409736 	bltu	r18,r17,809ef8 <__udivdi3+0x4e0>
  809c9c:	9500962e 	bgeu	r18,r20,809ef8 <__udivdi3+0x4e0>
  809ca0:	10bfff84 	addi	r2,r2,-2
  809ca4:	b00c943a 	slli	r6,r22,16
  809ca8:	3084b03a 	or	r2,r6,r2
  809cac:	00000206 	br	809cb8 <__udivdi3+0x2a0>
  809cb0:	0007883a 	mov	r3,zero
  809cb4:	0005883a 	mov	r2,zero
  809cb8:	dfc00a17 	ldw	ra,40(sp)
  809cbc:	df000917 	ldw	fp,36(sp)
  809cc0:	ddc00817 	ldw	r23,32(sp)
  809cc4:	dd800717 	ldw	r22,28(sp)
  809cc8:	dd400617 	ldw	r21,24(sp)
  809ccc:	dd000517 	ldw	r20,20(sp)
  809cd0:	dcc00417 	ldw	r19,16(sp)
  809cd4:	dc800317 	ldw	r18,12(sp)
  809cd8:	dc400217 	ldw	r17,8(sp)
  809cdc:	dc000117 	ldw	r16,4(sp)
  809ce0:	dec00b04 	addi	sp,sp,44
  809ce4:	f800283a 	ret
  809ce8:	00803fc4 	movi	r2,255
  809cec:	11c5803a 	cmpltu	r2,r2,r7
  809cf0:	100490fa 	slli	r2,r2,3
  809cf4:	003f9e06 	br	809b70 <__alt_data_end+0xff809b70>
  809cf8:	00803fc4 	movi	r2,255
  809cfc:	1445803a 	cmpltu	r2,r2,r17
  809d00:	100490fa 	slli	r2,r2,3
  809d04:	003fb206 	br	809bd0 <__alt_data_end+0xff809bd0>
  809d08:	00804034 	movhi	r2,256
  809d0c:	10bfffc4 	addi	r2,r2,-1
  809d10:	11808836 	bltu	r2,r6,809f34 <__udivdi3+0x51c>
  809d14:	00800404 	movi	r2,16
  809d18:	003f5606 	br	809a74 <__alt_data_end+0xff809a74>
  809d1c:	30aed83a 	srl	r23,r6,r2
  809d20:	3d4e983a 	sll	r7,r7,r21
  809d24:	80acd83a 	srl	r22,r16,r2
  809d28:	9884d83a 	srl	r2,r19,r2
  809d2c:	3deeb03a 	or	r23,r7,r23
  809d30:	b824d43a 	srli	r18,r23,16
  809d34:	8560983a 	sll	r16,r16,r21
  809d38:	b009883a 	mov	r4,r22
  809d3c:	900b883a 	mov	r5,r18
  809d40:	3568983a 	sll	r20,r6,r21
  809d44:	1420b03a 	or	r16,r2,r16
  809d48:	080a6240 	call	80a624 <__umodsi3>
  809d4c:	b009883a 	mov	r4,r22
  809d50:	900b883a 	mov	r5,r18
  809d54:	1023883a 	mov	r17,r2
  809d58:	080a5c00 	call	80a5c0 <__udivsi3>
  809d5c:	8808943a 	slli	r4,r17,16
  809d60:	bf3fffcc 	andi	fp,r23,65535
  809d64:	8006d43a 	srli	r3,r16,16
  809d68:	e0a3383a 	mul	r17,fp,r2
  809d6c:	100d883a 	mov	r6,r2
  809d70:	1906b03a 	or	r3,r3,r4
  809d74:	1c40042e 	bgeu	r3,r17,809d88 <__udivdi3+0x370>
  809d78:	1dc7883a 	add	r3,r3,r23
  809d7c:	10bfffc4 	addi	r2,r2,-1
  809d80:	1dc0752e 	bgeu	r3,r23,809f58 <__udivdi3+0x540>
  809d84:	100d883a 	mov	r6,r2
  809d88:	1c63c83a 	sub	r17,r3,r17
  809d8c:	900b883a 	mov	r5,r18
  809d90:	8809883a 	mov	r4,r17
  809d94:	d9800015 	stw	r6,0(sp)
  809d98:	080a6240 	call	80a624 <__umodsi3>
  809d9c:	102d883a 	mov	r22,r2
  809da0:	8809883a 	mov	r4,r17
  809da4:	900b883a 	mov	r5,r18
  809da8:	080a5c00 	call	80a5c0 <__udivsi3>
  809dac:	b02c943a 	slli	r22,r22,16
  809db0:	e089383a 	mul	r4,fp,r2
  809db4:	843fffcc 	andi	r16,r16,65535
  809db8:	85a0b03a 	or	r16,r16,r22
  809dbc:	d9800017 	ldw	r6,0(sp)
  809dc0:	8100042e 	bgeu	r16,r4,809dd4 <__udivdi3+0x3bc>
  809dc4:	85e1883a 	add	r16,r16,r23
  809dc8:	10ffffc4 	addi	r3,r2,-1
  809dcc:	85c05e2e 	bgeu	r16,r23,809f48 <__udivdi3+0x530>
  809dd0:	1805883a 	mov	r2,r3
  809dd4:	300c943a 	slli	r6,r6,16
  809dd8:	a17fffcc 	andi	r5,r20,65535
  809ddc:	a028d43a 	srli	r20,r20,16
  809de0:	3084b03a 	or	r2,r6,r2
  809de4:	10ffffcc 	andi	r3,r2,65535
  809de8:	100cd43a 	srli	r6,r2,16
  809dec:	194f383a 	mul	r7,r3,r5
  809df0:	1d07383a 	mul	r3,r3,r20
  809df4:	314b383a 	mul	r5,r6,r5
  809df8:	3810d43a 	srli	r8,r7,16
  809dfc:	8121c83a 	sub	r16,r16,r4
  809e00:	1947883a 	add	r3,r3,r5
  809e04:	40c7883a 	add	r3,r8,r3
  809e08:	350d383a 	mul	r6,r6,r20
  809e0c:	1940022e 	bgeu	r3,r5,809e18 <__udivdi3+0x400>
  809e10:	01000074 	movhi	r4,1
  809e14:	310d883a 	add	r6,r6,r4
  809e18:	1828d43a 	srli	r20,r3,16
  809e1c:	a18d883a 	add	r6,r20,r6
  809e20:	81803e36 	bltu	r16,r6,809f1c <__udivdi3+0x504>
  809e24:	81803826 	beq	r16,r6,809f08 <__udivdi3+0x4f0>
  809e28:	0007883a 	mov	r3,zero
  809e2c:	003fa206 	br	809cb8 <__alt_data_end+0xff809cb8>
  809e30:	88e2983a 	sll	r17,r17,r3
  809e34:	80a8d83a 	srl	r20,r16,r2
  809e38:	80e0983a 	sll	r16,r16,r3
  809e3c:	882ad43a 	srli	r21,r17,16
  809e40:	9884d83a 	srl	r2,r19,r2
  809e44:	a009883a 	mov	r4,r20
  809e48:	a80b883a 	mov	r5,r21
  809e4c:	142eb03a 	or	r23,r2,r16
  809e50:	98e4983a 	sll	r18,r19,r3
  809e54:	080a6240 	call	80a624 <__umodsi3>
  809e58:	a009883a 	mov	r4,r20
  809e5c:	a80b883a 	mov	r5,r21
  809e60:	1021883a 	mov	r16,r2
  809e64:	080a5c00 	call	80a5c0 <__udivsi3>
  809e68:	1039883a 	mov	fp,r2
  809e6c:	8d3fffcc 	andi	r20,r17,65535
  809e70:	8020943a 	slli	r16,r16,16
  809e74:	b804d43a 	srli	r2,r23,16
  809e78:	a72d383a 	mul	r22,r20,fp
  809e7c:	1404b03a 	or	r2,r2,r16
  809e80:	1580062e 	bgeu	r2,r22,809e9c <__udivdi3+0x484>
  809e84:	1445883a 	add	r2,r2,r17
  809e88:	e0ffffc4 	addi	r3,fp,-1
  809e8c:	14403836 	bltu	r2,r17,809f70 <__udivdi3+0x558>
  809e90:	1580372e 	bgeu	r2,r22,809f70 <__udivdi3+0x558>
  809e94:	e73fff84 	addi	fp,fp,-2
  809e98:	1445883a 	add	r2,r2,r17
  809e9c:	15adc83a 	sub	r22,r2,r22
  809ea0:	a80b883a 	mov	r5,r21
  809ea4:	b009883a 	mov	r4,r22
  809ea8:	080a6240 	call	80a624 <__umodsi3>
  809eac:	1027883a 	mov	r19,r2
  809eb0:	b009883a 	mov	r4,r22
  809eb4:	a80b883a 	mov	r5,r21
  809eb8:	080a5c00 	call	80a5c0 <__udivsi3>
  809ebc:	9826943a 	slli	r19,r19,16
  809ec0:	a0a1383a 	mul	r16,r20,r2
  809ec4:	b93fffcc 	andi	r4,r23,65535
  809ec8:	24c8b03a 	or	r4,r4,r19
  809ecc:	2400062e 	bgeu	r4,r16,809ee8 <__udivdi3+0x4d0>
  809ed0:	2449883a 	add	r4,r4,r17
  809ed4:	10ffffc4 	addi	r3,r2,-1
  809ed8:	24402336 	bltu	r4,r17,809f68 <__udivdi3+0x550>
  809edc:	2400222e 	bgeu	r4,r16,809f68 <__udivdi3+0x550>
  809ee0:	10bfff84 	addi	r2,r2,-2
  809ee4:	2449883a 	add	r4,r4,r17
  809ee8:	e038943a 	slli	fp,fp,16
  809eec:	2421c83a 	sub	r16,r4,r16
  809ef0:	e086b03a 	or	r3,fp,r2
  809ef4:	003f4306 	br	809c04 <__alt_data_end+0xff809c04>
  809ef8:	2005883a 	mov	r2,r4
  809efc:	003f6906 	br	809ca4 <__alt_data_end+0xff809ca4>
  809f00:	1805883a 	mov	r2,r3
  809f04:	003f0f06 	br	809b44 <__alt_data_end+0xff809b44>
  809f08:	1806943a 	slli	r3,r3,16
  809f0c:	9d66983a 	sll	r19,r19,r21
  809f10:	39ffffcc 	andi	r7,r7,65535
  809f14:	19c7883a 	add	r3,r3,r7
  809f18:	98ffc32e 	bgeu	r19,r3,809e28 <__alt_data_end+0xff809e28>
  809f1c:	10bfffc4 	addi	r2,r2,-1
  809f20:	003fc106 	br	809e28 <__alt_data_end+0xff809e28>
  809f24:	00800604 	movi	r2,24
  809f28:	003f1106 	br	809b70 <__alt_data_end+0xff809b70>
  809f2c:	00800604 	movi	r2,24
  809f30:	003f2706 	br	809bd0 <__alt_data_end+0xff809bd0>
  809f34:	00800604 	movi	r2,24
  809f38:	003ece06 	br	809a74 <__alt_data_end+0xff809a74>
  809f3c:	0007883a 	mov	r3,zero
  809f40:	00800044 	movi	r2,1
  809f44:	003f5c06 	br	809cb8 <__alt_data_end+0xff809cb8>
  809f48:	813fa12e 	bgeu	r16,r4,809dd0 <__alt_data_end+0xff809dd0>
  809f4c:	10bfff84 	addi	r2,r2,-2
  809f50:	85e1883a 	add	r16,r16,r23
  809f54:	003f9f06 	br	809dd4 <__alt_data_end+0xff809dd4>
  809f58:	1c7f8a2e 	bgeu	r3,r17,809d84 <__alt_data_end+0xff809d84>
  809f5c:	31bfff84 	addi	r6,r6,-2
  809f60:	1dc7883a 	add	r3,r3,r23
  809f64:	003f8806 	br	809d88 <__alt_data_end+0xff809d88>
  809f68:	1805883a 	mov	r2,r3
  809f6c:	003fde06 	br	809ee8 <__alt_data_end+0xff809ee8>
  809f70:	1839883a 	mov	fp,r3
  809f74:	003fc906 	br	809e9c <__alt_data_end+0xff809e9c>
  809f78:	b5bfff84 	addi	r22,r22,-2
  809f7c:	2449883a 	add	r4,r4,r17
  809f80:	003f3406 	br	809c54 <__alt_data_end+0xff809c54>
  809f84:	b5bfff84 	addi	r22,r22,-2
  809f88:	1445883a 	add	r2,r2,r17
  809f8c:	003edb06 	br	809afc <__alt_data_end+0xff809afc>

00809f90 <__umoddi3>:
  809f90:	defff404 	addi	sp,sp,-48
  809f94:	df000a15 	stw	fp,40(sp)
  809f98:	dc400315 	stw	r17,12(sp)
  809f9c:	dc000215 	stw	r16,8(sp)
  809fa0:	dfc00b15 	stw	ra,44(sp)
  809fa4:	ddc00915 	stw	r23,36(sp)
  809fa8:	dd800815 	stw	r22,32(sp)
  809fac:	dd400715 	stw	r21,28(sp)
  809fb0:	dd000615 	stw	r20,24(sp)
  809fb4:	dcc00515 	stw	r19,20(sp)
  809fb8:	dc800415 	stw	r18,16(sp)
  809fbc:	2021883a 	mov	r16,r4
  809fc0:	2823883a 	mov	r17,r5
  809fc4:	2839883a 	mov	fp,r5
  809fc8:	38003c1e 	bne	r7,zero,80a0bc <__umoddi3+0x12c>
  809fcc:	3027883a 	mov	r19,r6
  809fd0:	2029883a 	mov	r20,r4
  809fd4:	2980512e 	bgeu	r5,r6,80a11c <__umoddi3+0x18c>
  809fd8:	00bfffd4 	movui	r2,65535
  809fdc:	11809a36 	bltu	r2,r6,80a248 <__umoddi3+0x2b8>
  809fe0:	01003fc4 	movi	r4,255
  809fe4:	2189803a 	cmpltu	r4,r4,r6
  809fe8:	200890fa 	slli	r4,r4,3
  809fec:	3104d83a 	srl	r2,r6,r4
  809ff0:	00c02074 	movhi	r3,129
  809ff4:	18c1a604 	addi	r3,r3,1688
  809ff8:	1885883a 	add	r2,r3,r2
  809ffc:	10c00003 	ldbu	r3,0(r2)
  80a000:	00800804 	movi	r2,32
  80a004:	1909883a 	add	r4,r3,r4
  80a008:	1125c83a 	sub	r18,r2,r4
  80a00c:	90000526 	beq	r18,zero,80a024 <__umoddi3+0x94>
  80a010:	8ca2983a 	sll	r17,r17,r18
  80a014:	8108d83a 	srl	r4,r16,r4
  80a018:	34a6983a 	sll	r19,r6,r18
  80a01c:	84a8983a 	sll	r20,r16,r18
  80a020:	2478b03a 	or	fp,r4,r17
  80a024:	982ed43a 	srli	r23,r19,16
  80a028:	e009883a 	mov	r4,fp
  80a02c:	9dbfffcc 	andi	r22,r19,65535
  80a030:	b80b883a 	mov	r5,r23
  80a034:	080a6240 	call	80a624 <__umodsi3>
  80a038:	e009883a 	mov	r4,fp
  80a03c:	b80b883a 	mov	r5,r23
  80a040:	102b883a 	mov	r21,r2
  80a044:	080a5c00 	call	80a5c0 <__udivsi3>
  80a048:	a806943a 	slli	r3,r21,16
  80a04c:	a008d43a 	srli	r4,r20,16
  80a050:	b085383a 	mul	r2,r22,r2
  80a054:	20c8b03a 	or	r4,r4,r3
  80a058:	2080032e 	bgeu	r4,r2,80a068 <__umoddi3+0xd8>
  80a05c:	24c9883a 	add	r4,r4,r19
  80a060:	24c00136 	bltu	r4,r19,80a068 <__umoddi3+0xd8>
  80a064:	20811036 	bltu	r4,r2,80a4a8 <__umoddi3+0x518>
  80a068:	20abc83a 	sub	r21,r4,r2
  80a06c:	b80b883a 	mov	r5,r23
  80a070:	a809883a 	mov	r4,r21
  80a074:	080a6240 	call	80a624 <__umodsi3>
  80a078:	1023883a 	mov	r17,r2
  80a07c:	b80b883a 	mov	r5,r23
  80a080:	a809883a 	mov	r4,r21
  80a084:	080a5c00 	call	80a5c0 <__udivsi3>
  80a088:	8822943a 	slli	r17,r17,16
  80a08c:	b085383a 	mul	r2,r22,r2
  80a090:	a0ffffcc 	andi	r3,r20,65535
  80a094:	1c46b03a 	or	r3,r3,r17
  80a098:	1880042e 	bgeu	r3,r2,80a0ac <__umoddi3+0x11c>
  80a09c:	1cc7883a 	add	r3,r3,r19
  80a0a0:	1cc00236 	bltu	r3,r19,80a0ac <__umoddi3+0x11c>
  80a0a4:	1880012e 	bgeu	r3,r2,80a0ac <__umoddi3+0x11c>
  80a0a8:	1cc7883a 	add	r3,r3,r19
  80a0ac:	1885c83a 	sub	r2,r3,r2
  80a0b0:	1484d83a 	srl	r2,r2,r18
  80a0b4:	0007883a 	mov	r3,zero
  80a0b8:	00004f06 	br	80a1f8 <__umoddi3+0x268>
  80a0bc:	29c04c36 	bltu	r5,r7,80a1f0 <__umoddi3+0x260>
  80a0c0:	00bfffd4 	movui	r2,65535
  80a0c4:	11c0582e 	bgeu	r2,r7,80a228 <__umoddi3+0x298>
  80a0c8:	00804034 	movhi	r2,256
  80a0cc:	10bfffc4 	addi	r2,r2,-1
  80a0d0:	11c0e736 	bltu	r2,r7,80a470 <__umoddi3+0x4e0>
  80a0d4:	01000404 	movi	r4,16
  80a0d8:	3904d83a 	srl	r2,r7,r4
  80a0dc:	00c02074 	movhi	r3,129
  80a0e0:	18c1a604 	addi	r3,r3,1688
  80a0e4:	1885883a 	add	r2,r3,r2
  80a0e8:	14c00003 	ldbu	r19,0(r2)
  80a0ec:	00c00804 	movi	r3,32
  80a0f0:	9927883a 	add	r19,r19,r4
  80a0f4:	1ce9c83a 	sub	r20,r3,r19
  80a0f8:	a000581e 	bne	r20,zero,80a25c <__umoddi3+0x2cc>
  80a0fc:	3c400136 	bltu	r7,r17,80a104 <__umoddi3+0x174>
  80a100:	8180eb36 	bltu	r16,r6,80a4b0 <__umoddi3+0x520>
  80a104:	8185c83a 	sub	r2,r16,r6
  80a108:	89e3c83a 	sub	r17,r17,r7
  80a10c:	8089803a 	cmpltu	r4,r16,r2
  80a110:	8939c83a 	sub	fp,r17,r4
  80a114:	e007883a 	mov	r3,fp
  80a118:	00003706 	br	80a1f8 <__umoddi3+0x268>
  80a11c:	3000041e 	bne	r6,zero,80a130 <__umoddi3+0x1a0>
  80a120:	000b883a 	mov	r5,zero
  80a124:	01000044 	movi	r4,1
  80a128:	080a5c00 	call	80a5c0 <__udivsi3>
  80a12c:	1027883a 	mov	r19,r2
  80a130:	00bfffd4 	movui	r2,65535
  80a134:	14c0402e 	bgeu	r2,r19,80a238 <__umoddi3+0x2a8>
  80a138:	00804034 	movhi	r2,256
  80a13c:	10bfffc4 	addi	r2,r2,-1
  80a140:	14c0cd36 	bltu	r2,r19,80a478 <__umoddi3+0x4e8>
  80a144:	00800404 	movi	r2,16
  80a148:	9886d83a 	srl	r3,r19,r2
  80a14c:	01002074 	movhi	r4,129
  80a150:	2101a604 	addi	r4,r4,1688
  80a154:	20c7883a 	add	r3,r4,r3
  80a158:	18c00003 	ldbu	r3,0(r3)
  80a15c:	1887883a 	add	r3,r3,r2
  80a160:	00800804 	movi	r2,32
  80a164:	10e5c83a 	sub	r18,r2,r3
  80a168:	9000901e 	bne	r18,zero,80a3ac <__umoddi3+0x41c>
  80a16c:	982cd43a 	srli	r22,r19,16
  80a170:	8ce3c83a 	sub	r17,r17,r19
  80a174:	9d7fffcc 	andi	r21,r19,65535
  80a178:	b00b883a 	mov	r5,r22
  80a17c:	8809883a 	mov	r4,r17
  80a180:	080a6240 	call	80a624 <__umodsi3>
  80a184:	8809883a 	mov	r4,r17
  80a188:	b00b883a 	mov	r5,r22
  80a18c:	1021883a 	mov	r16,r2
  80a190:	080a5c00 	call	80a5c0 <__udivsi3>
  80a194:	8006943a 	slli	r3,r16,16
  80a198:	a008d43a 	srli	r4,r20,16
  80a19c:	1545383a 	mul	r2,r2,r21
  80a1a0:	20c8b03a 	or	r4,r4,r3
  80a1a4:	2080042e 	bgeu	r4,r2,80a1b8 <__umoddi3+0x228>
  80a1a8:	24c9883a 	add	r4,r4,r19
  80a1ac:	24c00236 	bltu	r4,r19,80a1b8 <__umoddi3+0x228>
  80a1b0:	2080012e 	bgeu	r4,r2,80a1b8 <__umoddi3+0x228>
  80a1b4:	24c9883a 	add	r4,r4,r19
  80a1b8:	20a1c83a 	sub	r16,r4,r2
  80a1bc:	b00b883a 	mov	r5,r22
  80a1c0:	8009883a 	mov	r4,r16
  80a1c4:	080a6240 	call	80a624 <__umodsi3>
  80a1c8:	1023883a 	mov	r17,r2
  80a1cc:	b00b883a 	mov	r5,r22
  80a1d0:	8009883a 	mov	r4,r16
  80a1d4:	080a5c00 	call	80a5c0 <__udivsi3>
  80a1d8:	8822943a 	slli	r17,r17,16
  80a1dc:	1545383a 	mul	r2,r2,r21
  80a1e0:	a53fffcc 	andi	r20,r20,65535
  80a1e4:	a446b03a 	or	r3,r20,r17
  80a1e8:	18bfb02e 	bgeu	r3,r2,80a0ac <__alt_data_end+0xff80a0ac>
  80a1ec:	003fab06 	br	80a09c <__alt_data_end+0xff80a09c>
  80a1f0:	2005883a 	mov	r2,r4
  80a1f4:	2807883a 	mov	r3,r5
  80a1f8:	dfc00b17 	ldw	ra,44(sp)
  80a1fc:	df000a17 	ldw	fp,40(sp)
  80a200:	ddc00917 	ldw	r23,36(sp)
  80a204:	dd800817 	ldw	r22,32(sp)
  80a208:	dd400717 	ldw	r21,28(sp)
  80a20c:	dd000617 	ldw	r20,24(sp)
  80a210:	dcc00517 	ldw	r19,20(sp)
  80a214:	dc800417 	ldw	r18,16(sp)
  80a218:	dc400317 	ldw	r17,12(sp)
  80a21c:	dc000217 	ldw	r16,8(sp)
  80a220:	dec00c04 	addi	sp,sp,48
  80a224:	f800283a 	ret
  80a228:	04c03fc4 	movi	r19,255
  80a22c:	99c9803a 	cmpltu	r4,r19,r7
  80a230:	200890fa 	slli	r4,r4,3
  80a234:	003fa806 	br	80a0d8 <__alt_data_end+0xff80a0d8>
  80a238:	00803fc4 	movi	r2,255
  80a23c:	14c5803a 	cmpltu	r2,r2,r19
  80a240:	100490fa 	slli	r2,r2,3
  80a244:	003fc006 	br	80a148 <__alt_data_end+0xff80a148>
  80a248:	00804034 	movhi	r2,256
  80a24c:	10bfffc4 	addi	r2,r2,-1
  80a250:	11808b36 	bltu	r2,r6,80a480 <__umoddi3+0x4f0>
  80a254:	01000404 	movi	r4,16
  80a258:	003f6406 	br	809fec <__alt_data_end+0xff809fec>
  80a25c:	34c4d83a 	srl	r2,r6,r19
  80a260:	3d0e983a 	sll	r7,r7,r20
  80a264:	8cf8d83a 	srl	fp,r17,r19
  80a268:	8d10983a 	sll	r8,r17,r20
  80a26c:	38aab03a 	or	r21,r7,r2
  80a270:	a82cd43a 	srli	r22,r21,16
  80a274:	84e2d83a 	srl	r17,r16,r19
  80a278:	e009883a 	mov	r4,fp
  80a27c:	b00b883a 	mov	r5,r22
  80a280:	8a22b03a 	or	r17,r17,r8
  80a284:	3524983a 	sll	r18,r6,r20
  80a288:	080a6240 	call	80a624 <__umodsi3>
  80a28c:	e009883a 	mov	r4,fp
  80a290:	b00b883a 	mov	r5,r22
  80a294:	102f883a 	mov	r23,r2
  80a298:	080a5c00 	call	80a5c0 <__udivsi3>
  80a29c:	100d883a 	mov	r6,r2
  80a2a0:	b808943a 	slli	r4,r23,16
  80a2a4:	aa3fffcc 	andi	r8,r21,65535
  80a2a8:	8804d43a 	srli	r2,r17,16
  80a2ac:	41af383a 	mul	r23,r8,r6
  80a2b0:	8520983a 	sll	r16,r16,r20
  80a2b4:	1104b03a 	or	r2,r2,r4
  80a2b8:	15c0042e 	bgeu	r2,r23,80a2cc <__umoddi3+0x33c>
  80a2bc:	1545883a 	add	r2,r2,r21
  80a2c0:	30ffffc4 	addi	r3,r6,-1
  80a2c4:	1540742e 	bgeu	r2,r21,80a498 <__umoddi3+0x508>
  80a2c8:	180d883a 	mov	r6,r3
  80a2cc:	15efc83a 	sub	r23,r2,r23
  80a2d0:	b00b883a 	mov	r5,r22
  80a2d4:	b809883a 	mov	r4,r23
  80a2d8:	d9800115 	stw	r6,4(sp)
  80a2dc:	da000015 	stw	r8,0(sp)
  80a2e0:	080a6240 	call	80a624 <__umodsi3>
  80a2e4:	b00b883a 	mov	r5,r22
  80a2e8:	b809883a 	mov	r4,r23
  80a2ec:	1039883a 	mov	fp,r2
  80a2f0:	080a5c00 	call	80a5c0 <__udivsi3>
  80a2f4:	da000017 	ldw	r8,0(sp)
  80a2f8:	e038943a 	slli	fp,fp,16
  80a2fc:	100b883a 	mov	r5,r2
  80a300:	4089383a 	mul	r4,r8,r2
  80a304:	8a3fffcc 	andi	r8,r17,65535
  80a308:	4710b03a 	or	r8,r8,fp
  80a30c:	d9800117 	ldw	r6,4(sp)
  80a310:	4100042e 	bgeu	r8,r4,80a324 <__umoddi3+0x394>
  80a314:	4551883a 	add	r8,r8,r21
  80a318:	10bfffc4 	addi	r2,r2,-1
  80a31c:	45405a2e 	bgeu	r8,r21,80a488 <__umoddi3+0x4f8>
  80a320:	100b883a 	mov	r5,r2
  80a324:	300c943a 	slli	r6,r6,16
  80a328:	91ffffcc 	andi	r7,r18,65535
  80a32c:	9004d43a 	srli	r2,r18,16
  80a330:	314cb03a 	or	r6,r6,r5
  80a334:	317fffcc 	andi	r5,r6,65535
  80a338:	300cd43a 	srli	r6,r6,16
  80a33c:	29d3383a 	mul	r9,r5,r7
  80a340:	288b383a 	mul	r5,r5,r2
  80a344:	31cf383a 	mul	r7,r6,r7
  80a348:	4806d43a 	srli	r3,r9,16
  80a34c:	4111c83a 	sub	r8,r8,r4
  80a350:	29cb883a 	add	r5,r5,r7
  80a354:	194b883a 	add	r5,r3,r5
  80a358:	3085383a 	mul	r2,r6,r2
  80a35c:	29c0022e 	bgeu	r5,r7,80a368 <__umoddi3+0x3d8>
  80a360:	00c00074 	movhi	r3,1
  80a364:	10c5883a 	add	r2,r2,r3
  80a368:	2808d43a 	srli	r4,r5,16
  80a36c:	280a943a 	slli	r5,r5,16
  80a370:	4a7fffcc 	andi	r9,r9,65535
  80a374:	2085883a 	add	r2,r4,r2
  80a378:	2a4b883a 	add	r5,r5,r9
  80a37c:	40803636 	bltu	r8,r2,80a458 <__umoddi3+0x4c8>
  80a380:	40804d26 	beq	r8,r2,80a4b8 <__umoddi3+0x528>
  80a384:	4089c83a 	sub	r4,r8,r2
  80a388:	280f883a 	mov	r7,r5
  80a38c:	81cfc83a 	sub	r7,r16,r7
  80a390:	81c7803a 	cmpltu	r3,r16,r7
  80a394:	20c7c83a 	sub	r3,r4,r3
  80a398:	1cc4983a 	sll	r2,r3,r19
  80a39c:	3d0ed83a 	srl	r7,r7,r20
  80a3a0:	1d06d83a 	srl	r3,r3,r20
  80a3a4:	11c4b03a 	or	r2,r2,r7
  80a3a8:	003f9306 	br	80a1f8 <__alt_data_end+0xff80a1f8>
  80a3ac:	9ca6983a 	sll	r19,r19,r18
  80a3b0:	88e8d83a 	srl	r20,r17,r3
  80a3b4:	80c4d83a 	srl	r2,r16,r3
  80a3b8:	982cd43a 	srli	r22,r19,16
  80a3bc:	8ca2983a 	sll	r17,r17,r18
  80a3c0:	a009883a 	mov	r4,r20
  80a3c4:	b00b883a 	mov	r5,r22
  80a3c8:	1478b03a 	or	fp,r2,r17
  80a3cc:	080a6240 	call	80a624 <__umodsi3>
  80a3d0:	a009883a 	mov	r4,r20
  80a3d4:	b00b883a 	mov	r5,r22
  80a3d8:	1023883a 	mov	r17,r2
  80a3dc:	080a5c00 	call	80a5c0 <__udivsi3>
  80a3e0:	9d7fffcc 	andi	r21,r19,65535
  80a3e4:	880a943a 	slli	r5,r17,16
  80a3e8:	e008d43a 	srli	r4,fp,16
  80a3ec:	a885383a 	mul	r2,r21,r2
  80a3f0:	84a8983a 	sll	r20,r16,r18
  80a3f4:	2148b03a 	or	r4,r4,r5
  80a3f8:	2080042e 	bgeu	r4,r2,80a40c <__umoddi3+0x47c>
  80a3fc:	24c9883a 	add	r4,r4,r19
  80a400:	24c00236 	bltu	r4,r19,80a40c <__umoddi3+0x47c>
  80a404:	2080012e 	bgeu	r4,r2,80a40c <__umoddi3+0x47c>
  80a408:	24c9883a 	add	r4,r4,r19
  80a40c:	20a3c83a 	sub	r17,r4,r2
  80a410:	b00b883a 	mov	r5,r22
  80a414:	8809883a 	mov	r4,r17
  80a418:	080a6240 	call	80a624 <__umodsi3>
  80a41c:	102f883a 	mov	r23,r2
  80a420:	8809883a 	mov	r4,r17
  80a424:	b00b883a 	mov	r5,r22
  80a428:	080a5c00 	call	80a5c0 <__udivsi3>
  80a42c:	b82e943a 	slli	r23,r23,16
  80a430:	a885383a 	mul	r2,r21,r2
  80a434:	e13fffcc 	andi	r4,fp,65535
  80a438:	25c8b03a 	or	r4,r4,r23
  80a43c:	2080042e 	bgeu	r4,r2,80a450 <__umoddi3+0x4c0>
  80a440:	24c9883a 	add	r4,r4,r19
  80a444:	24c00236 	bltu	r4,r19,80a450 <__umoddi3+0x4c0>
  80a448:	2080012e 	bgeu	r4,r2,80a450 <__umoddi3+0x4c0>
  80a44c:	24c9883a 	add	r4,r4,r19
  80a450:	20a3c83a 	sub	r17,r4,r2
  80a454:	003f4806 	br	80a178 <__alt_data_end+0xff80a178>
  80a458:	2c8fc83a 	sub	r7,r5,r18
  80a45c:	1545c83a 	sub	r2,r2,r21
  80a460:	29cb803a 	cmpltu	r5,r5,r7
  80a464:	1145c83a 	sub	r2,r2,r5
  80a468:	4089c83a 	sub	r4,r8,r2
  80a46c:	003fc706 	br	80a38c <__alt_data_end+0xff80a38c>
  80a470:	01000604 	movi	r4,24
  80a474:	003f1806 	br	80a0d8 <__alt_data_end+0xff80a0d8>
  80a478:	00800604 	movi	r2,24
  80a47c:	003f3206 	br	80a148 <__alt_data_end+0xff80a148>
  80a480:	01000604 	movi	r4,24
  80a484:	003ed906 	br	809fec <__alt_data_end+0xff809fec>
  80a488:	413fa52e 	bgeu	r8,r4,80a320 <__alt_data_end+0xff80a320>
  80a48c:	297fff84 	addi	r5,r5,-2
  80a490:	4551883a 	add	r8,r8,r21
  80a494:	003fa306 	br	80a324 <__alt_data_end+0xff80a324>
  80a498:	15ff8b2e 	bgeu	r2,r23,80a2c8 <__alt_data_end+0xff80a2c8>
  80a49c:	31bfff84 	addi	r6,r6,-2
  80a4a0:	1545883a 	add	r2,r2,r21
  80a4a4:	003f8906 	br	80a2cc <__alt_data_end+0xff80a2cc>
  80a4a8:	24c9883a 	add	r4,r4,r19
  80a4ac:	003eee06 	br	80a068 <__alt_data_end+0xff80a068>
  80a4b0:	8005883a 	mov	r2,r16
  80a4b4:	003f1706 	br	80a114 <__alt_data_end+0xff80a114>
  80a4b8:	817fe736 	bltu	r16,r5,80a458 <__alt_data_end+0xff80a458>
  80a4bc:	280f883a 	mov	r7,r5
  80a4c0:	0009883a 	mov	r4,zero
  80a4c4:	003fb106 	br	80a38c <__alt_data_end+0xff80a38c>

0080a4c8 <__divsi3>:
  80a4c8:	20001b16 	blt	r4,zero,80a538 <__divsi3+0x70>
  80a4cc:	000f883a 	mov	r7,zero
  80a4d0:	28001616 	blt	r5,zero,80a52c <__divsi3+0x64>
  80a4d4:	200d883a 	mov	r6,r4
  80a4d8:	29001a2e 	bgeu	r5,r4,80a544 <__divsi3+0x7c>
  80a4dc:	00800804 	movi	r2,32
  80a4e0:	00c00044 	movi	r3,1
  80a4e4:	00000106 	br	80a4ec <__divsi3+0x24>
  80a4e8:	10000d26 	beq	r2,zero,80a520 <__divsi3+0x58>
  80a4ec:	294b883a 	add	r5,r5,r5
  80a4f0:	10bfffc4 	addi	r2,r2,-1
  80a4f4:	18c7883a 	add	r3,r3,r3
  80a4f8:	293ffb36 	bltu	r5,r4,80a4e8 <__alt_data_end+0xff80a4e8>
  80a4fc:	0005883a 	mov	r2,zero
  80a500:	18000726 	beq	r3,zero,80a520 <__divsi3+0x58>
  80a504:	0005883a 	mov	r2,zero
  80a508:	31400236 	bltu	r6,r5,80a514 <__divsi3+0x4c>
  80a50c:	314dc83a 	sub	r6,r6,r5
  80a510:	10c4b03a 	or	r2,r2,r3
  80a514:	1806d07a 	srli	r3,r3,1
  80a518:	280ad07a 	srli	r5,r5,1
  80a51c:	183ffa1e 	bne	r3,zero,80a508 <__alt_data_end+0xff80a508>
  80a520:	38000126 	beq	r7,zero,80a528 <__divsi3+0x60>
  80a524:	0085c83a 	sub	r2,zero,r2
  80a528:	f800283a 	ret
  80a52c:	014bc83a 	sub	r5,zero,r5
  80a530:	39c0005c 	xori	r7,r7,1
  80a534:	003fe706 	br	80a4d4 <__alt_data_end+0xff80a4d4>
  80a538:	0109c83a 	sub	r4,zero,r4
  80a53c:	01c00044 	movi	r7,1
  80a540:	003fe306 	br	80a4d0 <__alt_data_end+0xff80a4d0>
  80a544:	00c00044 	movi	r3,1
  80a548:	003fee06 	br	80a504 <__alt_data_end+0xff80a504>

0080a54c <__modsi3>:
  80a54c:	20001716 	blt	r4,zero,80a5ac <__modsi3+0x60>
  80a550:	000f883a 	mov	r7,zero
  80a554:	2005883a 	mov	r2,r4
  80a558:	28001216 	blt	r5,zero,80a5a4 <__modsi3+0x58>
  80a55c:	2900162e 	bgeu	r5,r4,80a5b8 <__modsi3+0x6c>
  80a560:	01800804 	movi	r6,32
  80a564:	00c00044 	movi	r3,1
  80a568:	00000106 	br	80a570 <__modsi3+0x24>
  80a56c:	30000a26 	beq	r6,zero,80a598 <__modsi3+0x4c>
  80a570:	294b883a 	add	r5,r5,r5
  80a574:	31bfffc4 	addi	r6,r6,-1
  80a578:	18c7883a 	add	r3,r3,r3
  80a57c:	293ffb36 	bltu	r5,r4,80a56c <__alt_data_end+0xff80a56c>
  80a580:	18000526 	beq	r3,zero,80a598 <__modsi3+0x4c>
  80a584:	1806d07a 	srli	r3,r3,1
  80a588:	11400136 	bltu	r2,r5,80a590 <__modsi3+0x44>
  80a58c:	1145c83a 	sub	r2,r2,r5
  80a590:	280ad07a 	srli	r5,r5,1
  80a594:	183ffb1e 	bne	r3,zero,80a584 <__alt_data_end+0xff80a584>
  80a598:	38000126 	beq	r7,zero,80a5a0 <__modsi3+0x54>
  80a59c:	0085c83a 	sub	r2,zero,r2
  80a5a0:	f800283a 	ret
  80a5a4:	014bc83a 	sub	r5,zero,r5
  80a5a8:	003fec06 	br	80a55c <__alt_data_end+0xff80a55c>
  80a5ac:	0109c83a 	sub	r4,zero,r4
  80a5b0:	01c00044 	movi	r7,1
  80a5b4:	003fe706 	br	80a554 <__alt_data_end+0xff80a554>
  80a5b8:	00c00044 	movi	r3,1
  80a5bc:	003ff106 	br	80a584 <__alt_data_end+0xff80a584>

0080a5c0 <__udivsi3>:
  80a5c0:	200d883a 	mov	r6,r4
  80a5c4:	2900152e 	bgeu	r5,r4,80a61c <__udivsi3+0x5c>
  80a5c8:	28001416 	blt	r5,zero,80a61c <__udivsi3+0x5c>
  80a5cc:	00800804 	movi	r2,32
  80a5d0:	00c00044 	movi	r3,1
  80a5d4:	00000206 	br	80a5e0 <__udivsi3+0x20>
  80a5d8:	10000e26 	beq	r2,zero,80a614 <__udivsi3+0x54>
  80a5dc:	28000516 	blt	r5,zero,80a5f4 <__udivsi3+0x34>
  80a5e0:	294b883a 	add	r5,r5,r5
  80a5e4:	10bfffc4 	addi	r2,r2,-1
  80a5e8:	18c7883a 	add	r3,r3,r3
  80a5ec:	293ffa36 	bltu	r5,r4,80a5d8 <__alt_data_end+0xff80a5d8>
  80a5f0:	18000826 	beq	r3,zero,80a614 <__udivsi3+0x54>
  80a5f4:	0005883a 	mov	r2,zero
  80a5f8:	31400236 	bltu	r6,r5,80a604 <__udivsi3+0x44>
  80a5fc:	314dc83a 	sub	r6,r6,r5
  80a600:	10c4b03a 	or	r2,r2,r3
  80a604:	1806d07a 	srli	r3,r3,1
  80a608:	280ad07a 	srli	r5,r5,1
  80a60c:	183ffa1e 	bne	r3,zero,80a5f8 <__alt_data_end+0xff80a5f8>
  80a610:	f800283a 	ret
  80a614:	0005883a 	mov	r2,zero
  80a618:	f800283a 	ret
  80a61c:	00c00044 	movi	r3,1
  80a620:	003ff406 	br	80a5f4 <__alt_data_end+0xff80a5f4>

0080a624 <__umodsi3>:
  80a624:	2005883a 	mov	r2,r4
  80a628:	2900122e 	bgeu	r5,r4,80a674 <__umodsi3+0x50>
  80a62c:	28001116 	blt	r5,zero,80a674 <__umodsi3+0x50>
  80a630:	01800804 	movi	r6,32
  80a634:	00c00044 	movi	r3,1
  80a638:	00000206 	br	80a644 <__umodsi3+0x20>
  80a63c:	30000c26 	beq	r6,zero,80a670 <__umodsi3+0x4c>
  80a640:	28000516 	blt	r5,zero,80a658 <__umodsi3+0x34>
  80a644:	294b883a 	add	r5,r5,r5
  80a648:	31bfffc4 	addi	r6,r6,-1
  80a64c:	18c7883a 	add	r3,r3,r3
  80a650:	293ffa36 	bltu	r5,r4,80a63c <__alt_data_end+0xff80a63c>
  80a654:	18000626 	beq	r3,zero,80a670 <__umodsi3+0x4c>
  80a658:	1806d07a 	srli	r3,r3,1
  80a65c:	11400136 	bltu	r2,r5,80a664 <__umodsi3+0x40>
  80a660:	1145c83a 	sub	r2,r2,r5
  80a664:	280ad07a 	srli	r5,r5,1
  80a668:	183ffb1e 	bne	r3,zero,80a658 <__alt_data_end+0xff80a658>
  80a66c:	f800283a 	ret
  80a670:	f800283a 	ret
  80a674:	00c00044 	movi	r3,1
  80a678:	003ff706 	br	80a658 <__alt_data_end+0xff80a658>

0080a67c <__adddf3>:
  80a67c:	02c00434 	movhi	r11,16
  80a680:	5affffc4 	addi	r11,r11,-1
  80a684:	2806d7fa 	srli	r3,r5,31
  80a688:	2ad4703a 	and	r10,r5,r11
  80a68c:	3ad2703a 	and	r9,r7,r11
  80a690:	3804d53a 	srli	r2,r7,20
  80a694:	3018d77a 	srli	r12,r6,29
  80a698:	280ad53a 	srli	r5,r5,20
  80a69c:	501490fa 	slli	r10,r10,3
  80a6a0:	2010d77a 	srli	r8,r4,29
  80a6a4:	481290fa 	slli	r9,r9,3
  80a6a8:	380ed7fa 	srli	r7,r7,31
  80a6ac:	defffb04 	addi	sp,sp,-20
  80a6b0:	dc800215 	stw	r18,8(sp)
  80a6b4:	dc400115 	stw	r17,4(sp)
  80a6b8:	dc000015 	stw	r16,0(sp)
  80a6bc:	dfc00415 	stw	ra,16(sp)
  80a6c0:	dcc00315 	stw	r19,12(sp)
  80a6c4:	1c803fcc 	andi	r18,r3,255
  80a6c8:	2c01ffcc 	andi	r16,r5,2047
  80a6cc:	5210b03a 	or	r8,r10,r8
  80a6d0:	202290fa 	slli	r17,r4,3
  80a6d4:	1081ffcc 	andi	r2,r2,2047
  80a6d8:	4b12b03a 	or	r9,r9,r12
  80a6dc:	300c90fa 	slli	r6,r6,3
  80a6e0:	91c07526 	beq	r18,r7,80a8b8 <__adddf3+0x23c>
  80a6e4:	8087c83a 	sub	r3,r16,r2
  80a6e8:	00c0ab0e 	bge	zero,r3,80a998 <__adddf3+0x31c>
  80a6ec:	10002a1e 	bne	r2,zero,80a798 <__adddf3+0x11c>
  80a6f0:	4984b03a 	or	r2,r9,r6
  80a6f4:	1000961e 	bne	r2,zero,80a950 <__adddf3+0x2d4>
  80a6f8:	888001cc 	andi	r2,r17,7
  80a6fc:	10000726 	beq	r2,zero,80a71c <__adddf3+0xa0>
  80a700:	888003cc 	andi	r2,r17,15
  80a704:	00c00104 	movi	r3,4
  80a708:	10c00426 	beq	r2,r3,80a71c <__adddf3+0xa0>
  80a70c:	88c7883a 	add	r3,r17,r3
  80a710:	1c63803a 	cmpltu	r17,r3,r17
  80a714:	4451883a 	add	r8,r8,r17
  80a718:	1823883a 	mov	r17,r3
  80a71c:	4080202c 	andhi	r2,r8,128
  80a720:	10005926 	beq	r2,zero,80a888 <__adddf3+0x20c>
  80a724:	84000044 	addi	r16,r16,1
  80a728:	0081ffc4 	movi	r2,2047
  80a72c:	8080ba26 	beq	r16,r2,80aa18 <__adddf3+0x39c>
  80a730:	00bfe034 	movhi	r2,65408
  80a734:	10bfffc4 	addi	r2,r2,-1
  80a738:	4090703a 	and	r8,r8,r2
  80a73c:	4004977a 	slli	r2,r8,29
  80a740:	4010927a 	slli	r8,r8,9
  80a744:	8822d0fa 	srli	r17,r17,3
  80a748:	8401ffcc 	andi	r16,r16,2047
  80a74c:	4010d33a 	srli	r8,r8,12
  80a750:	9007883a 	mov	r3,r18
  80a754:	1444b03a 	or	r2,r2,r17
  80a758:	8401ffcc 	andi	r16,r16,2047
  80a75c:	8020953a 	slli	r16,r16,20
  80a760:	18c03fcc 	andi	r3,r3,255
  80a764:	01000434 	movhi	r4,16
  80a768:	213fffc4 	addi	r4,r4,-1
  80a76c:	180697fa 	slli	r3,r3,31
  80a770:	4110703a 	and	r8,r8,r4
  80a774:	4410b03a 	or	r8,r8,r16
  80a778:	40c6b03a 	or	r3,r8,r3
  80a77c:	dfc00417 	ldw	ra,16(sp)
  80a780:	dcc00317 	ldw	r19,12(sp)
  80a784:	dc800217 	ldw	r18,8(sp)
  80a788:	dc400117 	ldw	r17,4(sp)
  80a78c:	dc000017 	ldw	r16,0(sp)
  80a790:	dec00504 	addi	sp,sp,20
  80a794:	f800283a 	ret
  80a798:	0081ffc4 	movi	r2,2047
  80a79c:	80bfd626 	beq	r16,r2,80a6f8 <__alt_data_end+0xff80a6f8>
  80a7a0:	4a402034 	orhi	r9,r9,128
  80a7a4:	00800e04 	movi	r2,56
  80a7a8:	10c09f16 	blt	r2,r3,80aa28 <__adddf3+0x3ac>
  80a7ac:	008007c4 	movi	r2,31
  80a7b0:	10c0c216 	blt	r2,r3,80aabc <__adddf3+0x440>
  80a7b4:	00800804 	movi	r2,32
  80a7b8:	10c5c83a 	sub	r2,r2,r3
  80a7bc:	488a983a 	sll	r5,r9,r2
  80a7c0:	30c8d83a 	srl	r4,r6,r3
  80a7c4:	3084983a 	sll	r2,r6,r2
  80a7c8:	48c6d83a 	srl	r3,r9,r3
  80a7cc:	290cb03a 	or	r6,r5,r4
  80a7d0:	1004c03a 	cmpne	r2,r2,zero
  80a7d4:	308cb03a 	or	r6,r6,r2
  80a7d8:	898dc83a 	sub	r6,r17,r6
  80a7dc:	89a3803a 	cmpltu	r17,r17,r6
  80a7e0:	40d1c83a 	sub	r8,r8,r3
  80a7e4:	4451c83a 	sub	r8,r8,r17
  80a7e8:	3023883a 	mov	r17,r6
  80a7ec:	4080202c 	andhi	r2,r8,128
  80a7f0:	10002326 	beq	r2,zero,80a880 <__adddf3+0x204>
  80a7f4:	04c02034 	movhi	r19,128
  80a7f8:	9cffffc4 	addi	r19,r19,-1
  80a7fc:	44e6703a 	and	r19,r8,r19
  80a800:	98007626 	beq	r19,zero,80a9dc <__adddf3+0x360>
  80a804:	9809883a 	mov	r4,r19
  80a808:	080cc800 	call	80cc80 <__clzsi2>
  80a80c:	10fffe04 	addi	r3,r2,-8
  80a810:	010007c4 	movi	r4,31
  80a814:	20c07716 	blt	r4,r3,80a9f4 <__adddf3+0x378>
  80a818:	00800804 	movi	r2,32
  80a81c:	10c5c83a 	sub	r2,r2,r3
  80a820:	8884d83a 	srl	r2,r17,r2
  80a824:	98d0983a 	sll	r8,r19,r3
  80a828:	88e2983a 	sll	r17,r17,r3
  80a82c:	1204b03a 	or	r2,r2,r8
  80a830:	1c007416 	blt	r3,r16,80aa04 <__adddf3+0x388>
  80a834:	1c21c83a 	sub	r16,r3,r16
  80a838:	82000044 	addi	r8,r16,1
  80a83c:	00c007c4 	movi	r3,31
  80a840:	1a009116 	blt	r3,r8,80aa88 <__adddf3+0x40c>
  80a844:	00c00804 	movi	r3,32
  80a848:	1a07c83a 	sub	r3,r3,r8
  80a84c:	8a08d83a 	srl	r4,r17,r8
  80a850:	88e2983a 	sll	r17,r17,r3
  80a854:	10c6983a 	sll	r3,r2,r3
  80a858:	1210d83a 	srl	r8,r2,r8
  80a85c:	8804c03a 	cmpne	r2,r17,zero
  80a860:	1906b03a 	or	r3,r3,r4
  80a864:	18a2b03a 	or	r17,r3,r2
  80a868:	0021883a 	mov	r16,zero
  80a86c:	003fa206 	br	80a6f8 <__alt_data_end+0xff80a6f8>
  80a870:	1890b03a 	or	r8,r3,r2
  80a874:	40017d26 	beq	r8,zero,80ae6c <__adddf3+0x7f0>
  80a878:	1011883a 	mov	r8,r2
  80a87c:	1823883a 	mov	r17,r3
  80a880:	888001cc 	andi	r2,r17,7
  80a884:	103f9e1e 	bne	r2,zero,80a700 <__alt_data_end+0xff80a700>
  80a888:	4004977a 	slli	r2,r8,29
  80a88c:	8822d0fa 	srli	r17,r17,3
  80a890:	4010d0fa 	srli	r8,r8,3
  80a894:	9007883a 	mov	r3,r18
  80a898:	1444b03a 	or	r2,r2,r17
  80a89c:	0101ffc4 	movi	r4,2047
  80a8a0:	81002426 	beq	r16,r4,80a934 <__adddf3+0x2b8>
  80a8a4:	8120703a 	and	r16,r16,r4
  80a8a8:	01000434 	movhi	r4,16
  80a8ac:	213fffc4 	addi	r4,r4,-1
  80a8b0:	4110703a 	and	r8,r8,r4
  80a8b4:	003fa806 	br	80a758 <__alt_data_end+0xff80a758>
  80a8b8:	8089c83a 	sub	r4,r16,r2
  80a8bc:	01005e0e 	bge	zero,r4,80aa38 <__adddf3+0x3bc>
  80a8c0:	10002b26 	beq	r2,zero,80a970 <__adddf3+0x2f4>
  80a8c4:	0081ffc4 	movi	r2,2047
  80a8c8:	80bf8b26 	beq	r16,r2,80a6f8 <__alt_data_end+0xff80a6f8>
  80a8cc:	4a402034 	orhi	r9,r9,128
  80a8d0:	00800e04 	movi	r2,56
  80a8d4:	1100a40e 	bge	r2,r4,80ab68 <__adddf3+0x4ec>
  80a8d8:	498cb03a 	or	r6,r9,r6
  80a8dc:	300ac03a 	cmpne	r5,r6,zero
  80a8e0:	0013883a 	mov	r9,zero
  80a8e4:	2c4b883a 	add	r5,r5,r17
  80a8e8:	2c63803a 	cmpltu	r17,r5,r17
  80a8ec:	4a11883a 	add	r8,r9,r8
  80a8f0:	8a11883a 	add	r8,r17,r8
  80a8f4:	2823883a 	mov	r17,r5
  80a8f8:	4080202c 	andhi	r2,r8,128
  80a8fc:	103fe026 	beq	r2,zero,80a880 <__alt_data_end+0xff80a880>
  80a900:	84000044 	addi	r16,r16,1
  80a904:	0081ffc4 	movi	r2,2047
  80a908:	8080d226 	beq	r16,r2,80ac54 <__adddf3+0x5d8>
  80a90c:	00bfe034 	movhi	r2,65408
  80a910:	10bfffc4 	addi	r2,r2,-1
  80a914:	4090703a 	and	r8,r8,r2
  80a918:	880ad07a 	srli	r5,r17,1
  80a91c:	400897fa 	slli	r4,r8,31
  80a920:	88c0004c 	andi	r3,r17,1
  80a924:	28e2b03a 	or	r17,r5,r3
  80a928:	4010d07a 	srli	r8,r8,1
  80a92c:	2462b03a 	or	r17,r4,r17
  80a930:	003f7106 	br	80a6f8 <__alt_data_end+0xff80a6f8>
  80a934:	4088b03a 	or	r4,r8,r2
  80a938:	20014526 	beq	r4,zero,80ae50 <__adddf3+0x7d4>
  80a93c:	01000434 	movhi	r4,16
  80a940:	42000234 	orhi	r8,r8,8
  80a944:	213fffc4 	addi	r4,r4,-1
  80a948:	4110703a 	and	r8,r8,r4
  80a94c:	003f8206 	br	80a758 <__alt_data_end+0xff80a758>
  80a950:	18ffffc4 	addi	r3,r3,-1
  80a954:	1800491e 	bne	r3,zero,80aa7c <__adddf3+0x400>
  80a958:	898bc83a 	sub	r5,r17,r6
  80a95c:	8963803a 	cmpltu	r17,r17,r5
  80a960:	4251c83a 	sub	r8,r8,r9
  80a964:	4451c83a 	sub	r8,r8,r17
  80a968:	2823883a 	mov	r17,r5
  80a96c:	003f9f06 	br	80a7ec <__alt_data_end+0xff80a7ec>
  80a970:	4984b03a 	or	r2,r9,r6
  80a974:	103f6026 	beq	r2,zero,80a6f8 <__alt_data_end+0xff80a6f8>
  80a978:	213fffc4 	addi	r4,r4,-1
  80a97c:	2000931e 	bne	r4,zero,80abcc <__adddf3+0x550>
  80a980:	898d883a 	add	r6,r17,r6
  80a984:	3463803a 	cmpltu	r17,r6,r17
  80a988:	4251883a 	add	r8,r8,r9
  80a98c:	8a11883a 	add	r8,r17,r8
  80a990:	3023883a 	mov	r17,r6
  80a994:	003fd806 	br	80a8f8 <__alt_data_end+0xff80a8f8>
  80a998:	1800541e 	bne	r3,zero,80aaec <__adddf3+0x470>
  80a99c:	80800044 	addi	r2,r16,1
  80a9a0:	1081ffcc 	andi	r2,r2,2047
  80a9a4:	00c00044 	movi	r3,1
  80a9a8:	1880a00e 	bge	r3,r2,80ac2c <__adddf3+0x5b0>
  80a9ac:	8989c83a 	sub	r4,r17,r6
  80a9b0:	8905803a 	cmpltu	r2,r17,r4
  80a9b4:	4267c83a 	sub	r19,r8,r9
  80a9b8:	98a7c83a 	sub	r19,r19,r2
  80a9bc:	9880202c 	andhi	r2,r19,128
  80a9c0:	10006326 	beq	r2,zero,80ab50 <__adddf3+0x4d4>
  80a9c4:	3463c83a 	sub	r17,r6,r17
  80a9c8:	4a07c83a 	sub	r3,r9,r8
  80a9cc:	344d803a 	cmpltu	r6,r6,r17
  80a9d0:	19a7c83a 	sub	r19,r3,r6
  80a9d4:	3825883a 	mov	r18,r7
  80a9d8:	983f8a1e 	bne	r19,zero,80a804 <__alt_data_end+0xff80a804>
  80a9dc:	8809883a 	mov	r4,r17
  80a9e0:	080cc800 	call	80cc80 <__clzsi2>
  80a9e4:	10800804 	addi	r2,r2,32
  80a9e8:	10fffe04 	addi	r3,r2,-8
  80a9ec:	010007c4 	movi	r4,31
  80a9f0:	20ff890e 	bge	r4,r3,80a818 <__alt_data_end+0xff80a818>
  80a9f4:	10bff604 	addi	r2,r2,-40
  80a9f8:	8884983a 	sll	r2,r17,r2
  80a9fc:	0023883a 	mov	r17,zero
  80aa00:	1c3f8c0e 	bge	r3,r16,80a834 <__alt_data_end+0xff80a834>
  80aa04:	023fe034 	movhi	r8,65408
  80aa08:	423fffc4 	addi	r8,r8,-1
  80aa0c:	80e1c83a 	sub	r16,r16,r3
  80aa10:	1210703a 	and	r8,r2,r8
  80aa14:	003f3806 	br	80a6f8 <__alt_data_end+0xff80a6f8>
  80aa18:	9007883a 	mov	r3,r18
  80aa1c:	0011883a 	mov	r8,zero
  80aa20:	0005883a 	mov	r2,zero
  80aa24:	003f4c06 	br	80a758 <__alt_data_end+0xff80a758>
  80aa28:	498cb03a 	or	r6,r9,r6
  80aa2c:	300cc03a 	cmpne	r6,r6,zero
  80aa30:	0007883a 	mov	r3,zero
  80aa34:	003f6806 	br	80a7d8 <__alt_data_end+0xff80a7d8>
  80aa38:	20009c1e 	bne	r4,zero,80acac <__adddf3+0x630>
  80aa3c:	80800044 	addi	r2,r16,1
  80aa40:	1141ffcc 	andi	r5,r2,2047
  80aa44:	01000044 	movi	r4,1
  80aa48:	2140670e 	bge	r4,r5,80abe8 <__adddf3+0x56c>
  80aa4c:	0101ffc4 	movi	r4,2047
  80aa50:	11007f26 	beq	r2,r4,80ac50 <__adddf3+0x5d4>
  80aa54:	898d883a 	add	r6,r17,r6
  80aa58:	4247883a 	add	r3,r8,r9
  80aa5c:	3451803a 	cmpltu	r8,r6,r17
  80aa60:	40d1883a 	add	r8,r8,r3
  80aa64:	402297fa 	slli	r17,r8,31
  80aa68:	300cd07a 	srli	r6,r6,1
  80aa6c:	4010d07a 	srli	r8,r8,1
  80aa70:	1021883a 	mov	r16,r2
  80aa74:	89a2b03a 	or	r17,r17,r6
  80aa78:	003f1f06 	br	80a6f8 <__alt_data_end+0xff80a6f8>
  80aa7c:	0081ffc4 	movi	r2,2047
  80aa80:	80bf481e 	bne	r16,r2,80a7a4 <__alt_data_end+0xff80a7a4>
  80aa84:	003f1c06 	br	80a6f8 <__alt_data_end+0xff80a6f8>
  80aa88:	843ff844 	addi	r16,r16,-31
  80aa8c:	01000804 	movi	r4,32
  80aa90:	1406d83a 	srl	r3,r2,r16
  80aa94:	41005026 	beq	r8,r4,80abd8 <__adddf3+0x55c>
  80aa98:	01001004 	movi	r4,64
  80aa9c:	2211c83a 	sub	r8,r4,r8
  80aaa0:	1204983a 	sll	r2,r2,r8
  80aaa4:	88a2b03a 	or	r17,r17,r2
  80aaa8:	8822c03a 	cmpne	r17,r17,zero
  80aaac:	1c62b03a 	or	r17,r3,r17
  80aab0:	0011883a 	mov	r8,zero
  80aab4:	0021883a 	mov	r16,zero
  80aab8:	003f7106 	br	80a880 <__alt_data_end+0xff80a880>
  80aabc:	193ff804 	addi	r4,r3,-32
  80aac0:	00800804 	movi	r2,32
  80aac4:	4908d83a 	srl	r4,r9,r4
  80aac8:	18804526 	beq	r3,r2,80abe0 <__adddf3+0x564>
  80aacc:	00801004 	movi	r2,64
  80aad0:	10c5c83a 	sub	r2,r2,r3
  80aad4:	4886983a 	sll	r3,r9,r2
  80aad8:	198cb03a 	or	r6,r3,r6
  80aadc:	300cc03a 	cmpne	r6,r6,zero
  80aae0:	218cb03a 	or	r6,r4,r6
  80aae4:	0007883a 	mov	r3,zero
  80aae8:	003f3b06 	br	80a7d8 <__alt_data_end+0xff80a7d8>
  80aaec:	80002a26 	beq	r16,zero,80ab98 <__adddf3+0x51c>
  80aaf0:	0101ffc4 	movi	r4,2047
  80aaf4:	11006826 	beq	r2,r4,80ac98 <__adddf3+0x61c>
  80aaf8:	00c7c83a 	sub	r3,zero,r3
  80aafc:	42002034 	orhi	r8,r8,128
  80ab00:	01000e04 	movi	r4,56
  80ab04:	20c07c16 	blt	r4,r3,80acf8 <__adddf3+0x67c>
  80ab08:	010007c4 	movi	r4,31
  80ab0c:	20c0da16 	blt	r4,r3,80ae78 <__adddf3+0x7fc>
  80ab10:	01000804 	movi	r4,32
  80ab14:	20c9c83a 	sub	r4,r4,r3
  80ab18:	4114983a 	sll	r10,r8,r4
  80ab1c:	88cad83a 	srl	r5,r17,r3
  80ab20:	8908983a 	sll	r4,r17,r4
  80ab24:	40c6d83a 	srl	r3,r8,r3
  80ab28:	5162b03a 	or	r17,r10,r5
  80ab2c:	2008c03a 	cmpne	r4,r4,zero
  80ab30:	8922b03a 	or	r17,r17,r4
  80ab34:	3463c83a 	sub	r17,r6,r17
  80ab38:	48c7c83a 	sub	r3,r9,r3
  80ab3c:	344d803a 	cmpltu	r6,r6,r17
  80ab40:	1991c83a 	sub	r8,r3,r6
  80ab44:	1021883a 	mov	r16,r2
  80ab48:	3825883a 	mov	r18,r7
  80ab4c:	003f2706 	br	80a7ec <__alt_data_end+0xff80a7ec>
  80ab50:	24d0b03a 	or	r8,r4,r19
  80ab54:	40001b1e 	bne	r8,zero,80abc4 <__adddf3+0x548>
  80ab58:	0005883a 	mov	r2,zero
  80ab5c:	0007883a 	mov	r3,zero
  80ab60:	0021883a 	mov	r16,zero
  80ab64:	003f4d06 	br	80a89c <__alt_data_end+0xff80a89c>
  80ab68:	008007c4 	movi	r2,31
  80ab6c:	11003c16 	blt	r2,r4,80ac60 <__adddf3+0x5e4>
  80ab70:	00800804 	movi	r2,32
  80ab74:	1105c83a 	sub	r2,r2,r4
  80ab78:	488e983a 	sll	r7,r9,r2
  80ab7c:	310ad83a 	srl	r5,r6,r4
  80ab80:	3084983a 	sll	r2,r6,r2
  80ab84:	4912d83a 	srl	r9,r9,r4
  80ab88:	394ab03a 	or	r5,r7,r5
  80ab8c:	1004c03a 	cmpne	r2,r2,zero
  80ab90:	288ab03a 	or	r5,r5,r2
  80ab94:	003f5306 	br	80a8e4 <__alt_data_end+0xff80a8e4>
  80ab98:	4448b03a 	or	r4,r8,r17
  80ab9c:	20003e26 	beq	r4,zero,80ac98 <__adddf3+0x61c>
  80aba0:	00c6303a 	nor	r3,zero,r3
  80aba4:	18003a1e 	bne	r3,zero,80ac90 <__adddf3+0x614>
  80aba8:	3463c83a 	sub	r17,r6,r17
  80abac:	4a07c83a 	sub	r3,r9,r8
  80abb0:	344d803a 	cmpltu	r6,r6,r17
  80abb4:	1991c83a 	sub	r8,r3,r6
  80abb8:	1021883a 	mov	r16,r2
  80abbc:	3825883a 	mov	r18,r7
  80abc0:	003f0a06 	br	80a7ec <__alt_data_end+0xff80a7ec>
  80abc4:	2023883a 	mov	r17,r4
  80abc8:	003f0d06 	br	80a800 <__alt_data_end+0xff80a800>
  80abcc:	0081ffc4 	movi	r2,2047
  80abd0:	80bf3f1e 	bne	r16,r2,80a8d0 <__alt_data_end+0xff80a8d0>
  80abd4:	003ec806 	br	80a6f8 <__alt_data_end+0xff80a6f8>
  80abd8:	0005883a 	mov	r2,zero
  80abdc:	003fb106 	br	80aaa4 <__alt_data_end+0xff80aaa4>
  80abe0:	0007883a 	mov	r3,zero
  80abe4:	003fbc06 	br	80aad8 <__alt_data_end+0xff80aad8>
  80abe8:	4444b03a 	or	r2,r8,r17
  80abec:	8000871e 	bne	r16,zero,80ae0c <__adddf3+0x790>
  80abf0:	1000ba26 	beq	r2,zero,80aedc <__adddf3+0x860>
  80abf4:	4984b03a 	or	r2,r9,r6
  80abf8:	103ebf26 	beq	r2,zero,80a6f8 <__alt_data_end+0xff80a6f8>
  80abfc:	8985883a 	add	r2,r17,r6
  80ac00:	4247883a 	add	r3,r8,r9
  80ac04:	1451803a 	cmpltu	r8,r2,r17
  80ac08:	40d1883a 	add	r8,r8,r3
  80ac0c:	40c0202c 	andhi	r3,r8,128
  80ac10:	1023883a 	mov	r17,r2
  80ac14:	183f1a26 	beq	r3,zero,80a880 <__alt_data_end+0xff80a880>
  80ac18:	00bfe034 	movhi	r2,65408
  80ac1c:	10bfffc4 	addi	r2,r2,-1
  80ac20:	2021883a 	mov	r16,r4
  80ac24:	4090703a 	and	r8,r8,r2
  80ac28:	003eb306 	br	80a6f8 <__alt_data_end+0xff80a6f8>
  80ac2c:	4444b03a 	or	r2,r8,r17
  80ac30:	8000291e 	bne	r16,zero,80acd8 <__adddf3+0x65c>
  80ac34:	10004b1e 	bne	r2,zero,80ad64 <__adddf3+0x6e8>
  80ac38:	4990b03a 	or	r8,r9,r6
  80ac3c:	40008b26 	beq	r8,zero,80ae6c <__adddf3+0x7f0>
  80ac40:	4811883a 	mov	r8,r9
  80ac44:	3023883a 	mov	r17,r6
  80ac48:	3825883a 	mov	r18,r7
  80ac4c:	003eaa06 	br	80a6f8 <__alt_data_end+0xff80a6f8>
  80ac50:	1021883a 	mov	r16,r2
  80ac54:	0011883a 	mov	r8,zero
  80ac58:	0005883a 	mov	r2,zero
  80ac5c:	003f0f06 	br	80a89c <__alt_data_end+0xff80a89c>
  80ac60:	217ff804 	addi	r5,r4,-32
  80ac64:	00800804 	movi	r2,32
  80ac68:	494ad83a 	srl	r5,r9,r5
  80ac6c:	20807d26 	beq	r4,r2,80ae64 <__adddf3+0x7e8>
  80ac70:	00801004 	movi	r2,64
  80ac74:	1109c83a 	sub	r4,r2,r4
  80ac78:	4912983a 	sll	r9,r9,r4
  80ac7c:	498cb03a 	or	r6,r9,r6
  80ac80:	300cc03a 	cmpne	r6,r6,zero
  80ac84:	298ab03a 	or	r5,r5,r6
  80ac88:	0013883a 	mov	r9,zero
  80ac8c:	003f1506 	br	80a8e4 <__alt_data_end+0xff80a8e4>
  80ac90:	0101ffc4 	movi	r4,2047
  80ac94:	113f9a1e 	bne	r2,r4,80ab00 <__alt_data_end+0xff80ab00>
  80ac98:	4811883a 	mov	r8,r9
  80ac9c:	3023883a 	mov	r17,r6
  80aca0:	1021883a 	mov	r16,r2
  80aca4:	3825883a 	mov	r18,r7
  80aca8:	003e9306 	br	80a6f8 <__alt_data_end+0xff80a6f8>
  80acac:	8000161e 	bne	r16,zero,80ad08 <__adddf3+0x68c>
  80acb0:	444ab03a 	or	r5,r8,r17
  80acb4:	28005126 	beq	r5,zero,80adfc <__adddf3+0x780>
  80acb8:	0108303a 	nor	r4,zero,r4
  80acbc:	20004d1e 	bne	r4,zero,80adf4 <__adddf3+0x778>
  80acc0:	89a3883a 	add	r17,r17,r6
  80acc4:	4253883a 	add	r9,r8,r9
  80acc8:	898d803a 	cmpltu	r6,r17,r6
  80accc:	3251883a 	add	r8,r6,r9
  80acd0:	1021883a 	mov	r16,r2
  80acd4:	003f0806 	br	80a8f8 <__alt_data_end+0xff80a8f8>
  80acd8:	1000301e 	bne	r2,zero,80ad9c <__adddf3+0x720>
  80acdc:	4984b03a 	or	r2,r9,r6
  80ace0:	10007126 	beq	r2,zero,80aea8 <__adddf3+0x82c>
  80ace4:	4811883a 	mov	r8,r9
  80ace8:	3023883a 	mov	r17,r6
  80acec:	3825883a 	mov	r18,r7
  80acf0:	0401ffc4 	movi	r16,2047
  80acf4:	003e8006 	br	80a6f8 <__alt_data_end+0xff80a6f8>
  80acf8:	4462b03a 	or	r17,r8,r17
  80acfc:	8822c03a 	cmpne	r17,r17,zero
  80ad00:	0007883a 	mov	r3,zero
  80ad04:	003f8b06 	br	80ab34 <__alt_data_end+0xff80ab34>
  80ad08:	0141ffc4 	movi	r5,2047
  80ad0c:	11403b26 	beq	r2,r5,80adfc <__adddf3+0x780>
  80ad10:	0109c83a 	sub	r4,zero,r4
  80ad14:	42002034 	orhi	r8,r8,128
  80ad18:	01400e04 	movi	r5,56
  80ad1c:	29006716 	blt	r5,r4,80aebc <__adddf3+0x840>
  80ad20:	014007c4 	movi	r5,31
  80ad24:	29007016 	blt	r5,r4,80aee8 <__adddf3+0x86c>
  80ad28:	01400804 	movi	r5,32
  80ad2c:	290bc83a 	sub	r5,r5,r4
  80ad30:	4154983a 	sll	r10,r8,r5
  80ad34:	890ed83a 	srl	r7,r17,r4
  80ad38:	894a983a 	sll	r5,r17,r5
  80ad3c:	4108d83a 	srl	r4,r8,r4
  80ad40:	51e2b03a 	or	r17,r10,r7
  80ad44:	280ac03a 	cmpne	r5,r5,zero
  80ad48:	8962b03a 	or	r17,r17,r5
  80ad4c:	89a3883a 	add	r17,r17,r6
  80ad50:	2253883a 	add	r9,r4,r9
  80ad54:	898d803a 	cmpltu	r6,r17,r6
  80ad58:	3251883a 	add	r8,r6,r9
  80ad5c:	1021883a 	mov	r16,r2
  80ad60:	003ee506 	br	80a8f8 <__alt_data_end+0xff80a8f8>
  80ad64:	4984b03a 	or	r2,r9,r6
  80ad68:	103e6326 	beq	r2,zero,80a6f8 <__alt_data_end+0xff80a6f8>
  80ad6c:	8987c83a 	sub	r3,r17,r6
  80ad70:	88c9803a 	cmpltu	r4,r17,r3
  80ad74:	4245c83a 	sub	r2,r8,r9
  80ad78:	1105c83a 	sub	r2,r2,r4
  80ad7c:	1100202c 	andhi	r4,r2,128
  80ad80:	203ebb26 	beq	r4,zero,80a870 <__alt_data_end+0xff80a870>
  80ad84:	3463c83a 	sub	r17,r6,r17
  80ad88:	4a07c83a 	sub	r3,r9,r8
  80ad8c:	344d803a 	cmpltu	r6,r6,r17
  80ad90:	1991c83a 	sub	r8,r3,r6
  80ad94:	3825883a 	mov	r18,r7
  80ad98:	003e5706 	br	80a6f8 <__alt_data_end+0xff80a6f8>
  80ad9c:	4984b03a 	or	r2,r9,r6
  80ada0:	10002e26 	beq	r2,zero,80ae5c <__adddf3+0x7e0>
  80ada4:	4004d0fa 	srli	r2,r8,3
  80ada8:	8822d0fa 	srli	r17,r17,3
  80adac:	4010977a 	slli	r8,r8,29
  80adb0:	10c0022c 	andhi	r3,r2,8
  80adb4:	4462b03a 	or	r17,r8,r17
  80adb8:	18000826 	beq	r3,zero,80addc <__adddf3+0x760>
  80adbc:	4808d0fa 	srli	r4,r9,3
  80adc0:	20c0022c 	andhi	r3,r4,8
  80adc4:	1800051e 	bne	r3,zero,80addc <__adddf3+0x760>
  80adc8:	300cd0fa 	srli	r6,r6,3
  80adcc:	4806977a 	slli	r3,r9,29
  80add0:	2005883a 	mov	r2,r4
  80add4:	3825883a 	mov	r18,r7
  80add8:	19a2b03a 	or	r17,r3,r6
  80addc:	8810d77a 	srli	r8,r17,29
  80ade0:	100490fa 	slli	r2,r2,3
  80ade4:	882290fa 	slli	r17,r17,3
  80ade8:	0401ffc4 	movi	r16,2047
  80adec:	4090b03a 	or	r8,r8,r2
  80adf0:	003e4106 	br	80a6f8 <__alt_data_end+0xff80a6f8>
  80adf4:	0141ffc4 	movi	r5,2047
  80adf8:	117fc71e 	bne	r2,r5,80ad18 <__alt_data_end+0xff80ad18>
  80adfc:	4811883a 	mov	r8,r9
  80ae00:	3023883a 	mov	r17,r6
  80ae04:	1021883a 	mov	r16,r2
  80ae08:	003e3b06 	br	80a6f8 <__alt_data_end+0xff80a6f8>
  80ae0c:	10002f26 	beq	r2,zero,80aecc <__adddf3+0x850>
  80ae10:	4984b03a 	or	r2,r9,r6
  80ae14:	10001126 	beq	r2,zero,80ae5c <__adddf3+0x7e0>
  80ae18:	4004d0fa 	srli	r2,r8,3
  80ae1c:	8822d0fa 	srli	r17,r17,3
  80ae20:	4010977a 	slli	r8,r8,29
  80ae24:	10c0022c 	andhi	r3,r2,8
  80ae28:	4462b03a 	or	r17,r8,r17
  80ae2c:	183feb26 	beq	r3,zero,80addc <__alt_data_end+0xff80addc>
  80ae30:	4808d0fa 	srli	r4,r9,3
  80ae34:	20c0022c 	andhi	r3,r4,8
  80ae38:	183fe81e 	bne	r3,zero,80addc <__alt_data_end+0xff80addc>
  80ae3c:	300cd0fa 	srli	r6,r6,3
  80ae40:	4806977a 	slli	r3,r9,29
  80ae44:	2005883a 	mov	r2,r4
  80ae48:	19a2b03a 	or	r17,r3,r6
  80ae4c:	003fe306 	br	80addc <__alt_data_end+0xff80addc>
  80ae50:	0011883a 	mov	r8,zero
  80ae54:	0005883a 	mov	r2,zero
  80ae58:	003e3f06 	br	80a758 <__alt_data_end+0xff80a758>
  80ae5c:	0401ffc4 	movi	r16,2047
  80ae60:	003e2506 	br	80a6f8 <__alt_data_end+0xff80a6f8>
  80ae64:	0013883a 	mov	r9,zero
  80ae68:	003f8406 	br	80ac7c <__alt_data_end+0xff80ac7c>
  80ae6c:	0005883a 	mov	r2,zero
  80ae70:	0007883a 	mov	r3,zero
  80ae74:	003e8906 	br	80a89c <__alt_data_end+0xff80a89c>
  80ae78:	197ff804 	addi	r5,r3,-32
  80ae7c:	01000804 	movi	r4,32
  80ae80:	414ad83a 	srl	r5,r8,r5
  80ae84:	19002426 	beq	r3,r4,80af18 <__adddf3+0x89c>
  80ae88:	01001004 	movi	r4,64
  80ae8c:	20c7c83a 	sub	r3,r4,r3
  80ae90:	40c6983a 	sll	r3,r8,r3
  80ae94:	1c46b03a 	or	r3,r3,r17
  80ae98:	1806c03a 	cmpne	r3,r3,zero
  80ae9c:	28e2b03a 	or	r17,r5,r3
  80aea0:	0007883a 	mov	r3,zero
  80aea4:	003f2306 	br	80ab34 <__alt_data_end+0xff80ab34>
  80aea8:	0007883a 	mov	r3,zero
  80aeac:	5811883a 	mov	r8,r11
  80aeb0:	00bfffc4 	movi	r2,-1
  80aeb4:	0401ffc4 	movi	r16,2047
  80aeb8:	003e7806 	br	80a89c <__alt_data_end+0xff80a89c>
  80aebc:	4462b03a 	or	r17,r8,r17
  80aec0:	8822c03a 	cmpne	r17,r17,zero
  80aec4:	0009883a 	mov	r4,zero
  80aec8:	003fa006 	br	80ad4c <__alt_data_end+0xff80ad4c>
  80aecc:	4811883a 	mov	r8,r9
  80aed0:	3023883a 	mov	r17,r6
  80aed4:	0401ffc4 	movi	r16,2047
  80aed8:	003e0706 	br	80a6f8 <__alt_data_end+0xff80a6f8>
  80aedc:	4811883a 	mov	r8,r9
  80aee0:	3023883a 	mov	r17,r6
  80aee4:	003e0406 	br	80a6f8 <__alt_data_end+0xff80a6f8>
  80aee8:	21fff804 	addi	r7,r4,-32
  80aeec:	01400804 	movi	r5,32
  80aef0:	41ced83a 	srl	r7,r8,r7
  80aef4:	21400a26 	beq	r4,r5,80af20 <__adddf3+0x8a4>
  80aef8:	01401004 	movi	r5,64
  80aefc:	2909c83a 	sub	r4,r5,r4
  80af00:	4108983a 	sll	r4,r8,r4
  80af04:	2448b03a 	or	r4,r4,r17
  80af08:	2008c03a 	cmpne	r4,r4,zero
  80af0c:	3922b03a 	or	r17,r7,r4
  80af10:	0009883a 	mov	r4,zero
  80af14:	003f8d06 	br	80ad4c <__alt_data_end+0xff80ad4c>
  80af18:	0007883a 	mov	r3,zero
  80af1c:	003fdd06 	br	80ae94 <__alt_data_end+0xff80ae94>
  80af20:	0009883a 	mov	r4,zero
  80af24:	003ff706 	br	80af04 <__alt_data_end+0xff80af04>

0080af28 <__divdf3>:
  80af28:	defff204 	addi	sp,sp,-56
  80af2c:	dd400915 	stw	r21,36(sp)
  80af30:	282ad53a 	srli	r21,r5,20
  80af34:	dd000815 	stw	r20,32(sp)
  80af38:	2828d7fa 	srli	r20,r5,31
  80af3c:	dc000415 	stw	r16,16(sp)
  80af40:	04000434 	movhi	r16,16
  80af44:	df000c15 	stw	fp,48(sp)
  80af48:	843fffc4 	addi	r16,r16,-1
  80af4c:	dfc00d15 	stw	ra,52(sp)
  80af50:	ddc00b15 	stw	r23,44(sp)
  80af54:	dd800a15 	stw	r22,40(sp)
  80af58:	dcc00715 	stw	r19,28(sp)
  80af5c:	dc800615 	stw	r18,24(sp)
  80af60:	dc400515 	stw	r17,20(sp)
  80af64:	ad41ffcc 	andi	r21,r21,2047
  80af68:	2c20703a 	and	r16,r5,r16
  80af6c:	a7003fcc 	andi	fp,r20,255
  80af70:	a8006126 	beq	r21,zero,80b0f8 <__divdf3+0x1d0>
  80af74:	0081ffc4 	movi	r2,2047
  80af78:	2025883a 	mov	r18,r4
  80af7c:	a8803726 	beq	r21,r2,80b05c <__divdf3+0x134>
  80af80:	80800434 	orhi	r2,r16,16
  80af84:	100490fa 	slli	r2,r2,3
  80af88:	2020d77a 	srli	r16,r4,29
  80af8c:	202490fa 	slli	r18,r4,3
  80af90:	ad7f0044 	addi	r21,r21,-1023
  80af94:	80a0b03a 	or	r16,r16,r2
  80af98:	0027883a 	mov	r19,zero
  80af9c:	0013883a 	mov	r9,zero
  80afa0:	3804d53a 	srli	r2,r7,20
  80afa4:	382cd7fa 	srli	r22,r7,31
  80afa8:	04400434 	movhi	r17,16
  80afac:	8c7fffc4 	addi	r17,r17,-1
  80afb0:	1081ffcc 	andi	r2,r2,2047
  80afb4:	3011883a 	mov	r8,r6
  80afb8:	3c62703a 	and	r17,r7,r17
  80afbc:	b5c03fcc 	andi	r23,r22,255
  80afc0:	10006c26 	beq	r2,zero,80b174 <__divdf3+0x24c>
  80afc4:	00c1ffc4 	movi	r3,2047
  80afc8:	10c06426 	beq	r2,r3,80b15c <__divdf3+0x234>
  80afcc:	88c00434 	orhi	r3,r17,16
  80afd0:	180690fa 	slli	r3,r3,3
  80afd4:	3022d77a 	srli	r17,r6,29
  80afd8:	301090fa 	slli	r8,r6,3
  80afdc:	10bf0044 	addi	r2,r2,-1023
  80afe0:	88e2b03a 	or	r17,r17,r3
  80afe4:	000f883a 	mov	r7,zero
  80afe8:	a58cf03a 	xor	r6,r20,r22
  80afec:	3cc8b03a 	or	r4,r7,r19
  80aff0:	a8abc83a 	sub	r21,r21,r2
  80aff4:	008003c4 	movi	r2,15
  80aff8:	3007883a 	mov	r3,r6
  80affc:	34c03fcc 	andi	r19,r6,255
  80b000:	11009036 	bltu	r2,r4,80b244 <__divdf3+0x31c>
  80b004:	200890ba 	slli	r4,r4,2
  80b008:	00802074 	movhi	r2,129
  80b00c:	10ac0704 	addi	r2,r2,-20452
  80b010:	2089883a 	add	r4,r4,r2
  80b014:	20800017 	ldw	r2,0(r4)
  80b018:	1000683a 	jmp	r2
  80b01c:	0080b244 	movi	r2,713
  80b020:	0080b094 	movui	r2,706
  80b024:	0080b234 	movhi	r2,712
  80b028:	0080b088 	cmpgei	r2,zero,706
  80b02c:	0080b234 	movhi	r2,712
  80b030:	0080b208 	cmpgei	r2,zero,712
  80b034:	0080b234 	movhi	r2,712
  80b038:	0080b088 	cmpgei	r2,zero,706
  80b03c:	0080b094 	movui	r2,706
  80b040:	0080b094 	movui	r2,706
  80b044:	0080b208 	cmpgei	r2,zero,712
  80b048:	0080b088 	cmpgei	r2,zero,706
  80b04c:	0080b078 	rdprs	r2,zero,705
  80b050:	0080b078 	rdprs	r2,zero,705
  80b054:	0080b078 	rdprs	r2,zero,705
  80b058:	0080b528 	cmpgeui	r2,zero,724
  80b05c:	2404b03a 	or	r2,r4,r16
  80b060:	1000661e 	bne	r2,zero,80b1fc <__divdf3+0x2d4>
  80b064:	04c00204 	movi	r19,8
  80b068:	0021883a 	mov	r16,zero
  80b06c:	0025883a 	mov	r18,zero
  80b070:	02400084 	movi	r9,2
  80b074:	003fca06 	br	80afa0 <__alt_data_end+0xff80afa0>
  80b078:	8023883a 	mov	r17,r16
  80b07c:	9011883a 	mov	r8,r18
  80b080:	e02f883a 	mov	r23,fp
  80b084:	480f883a 	mov	r7,r9
  80b088:	00800084 	movi	r2,2
  80b08c:	3881311e 	bne	r7,r2,80b554 <__divdf3+0x62c>
  80b090:	b827883a 	mov	r19,r23
  80b094:	98c0004c 	andi	r3,r19,1
  80b098:	0081ffc4 	movi	r2,2047
  80b09c:	000b883a 	mov	r5,zero
  80b0a0:	0025883a 	mov	r18,zero
  80b0a4:	1004953a 	slli	r2,r2,20
  80b0a8:	18c03fcc 	andi	r3,r3,255
  80b0ac:	04400434 	movhi	r17,16
  80b0b0:	8c7fffc4 	addi	r17,r17,-1
  80b0b4:	180697fa 	slli	r3,r3,31
  80b0b8:	2c4a703a 	and	r5,r5,r17
  80b0bc:	288ab03a 	or	r5,r5,r2
  80b0c0:	28c6b03a 	or	r3,r5,r3
  80b0c4:	9005883a 	mov	r2,r18
  80b0c8:	dfc00d17 	ldw	ra,52(sp)
  80b0cc:	df000c17 	ldw	fp,48(sp)
  80b0d0:	ddc00b17 	ldw	r23,44(sp)
  80b0d4:	dd800a17 	ldw	r22,40(sp)
  80b0d8:	dd400917 	ldw	r21,36(sp)
  80b0dc:	dd000817 	ldw	r20,32(sp)
  80b0e0:	dcc00717 	ldw	r19,28(sp)
  80b0e4:	dc800617 	ldw	r18,24(sp)
  80b0e8:	dc400517 	ldw	r17,20(sp)
  80b0ec:	dc000417 	ldw	r16,16(sp)
  80b0f0:	dec00e04 	addi	sp,sp,56
  80b0f4:	f800283a 	ret
  80b0f8:	2404b03a 	or	r2,r4,r16
  80b0fc:	2027883a 	mov	r19,r4
  80b100:	10003926 	beq	r2,zero,80b1e8 <__divdf3+0x2c0>
  80b104:	80012e26 	beq	r16,zero,80b5c0 <__divdf3+0x698>
  80b108:	8009883a 	mov	r4,r16
  80b10c:	d9800315 	stw	r6,12(sp)
  80b110:	d9c00215 	stw	r7,8(sp)
  80b114:	080cc800 	call	80cc80 <__clzsi2>
  80b118:	d9800317 	ldw	r6,12(sp)
  80b11c:	d9c00217 	ldw	r7,8(sp)
  80b120:	113ffd44 	addi	r4,r2,-11
  80b124:	00c00704 	movi	r3,28
  80b128:	19012116 	blt	r3,r4,80b5b0 <__divdf3+0x688>
  80b12c:	00c00744 	movi	r3,29
  80b130:	147ffe04 	addi	r17,r2,-8
  80b134:	1907c83a 	sub	r3,r3,r4
  80b138:	8460983a 	sll	r16,r16,r17
  80b13c:	98c6d83a 	srl	r3,r19,r3
  80b140:	9c64983a 	sll	r18,r19,r17
  80b144:	1c20b03a 	or	r16,r3,r16
  80b148:	1080fcc4 	addi	r2,r2,1011
  80b14c:	00abc83a 	sub	r21,zero,r2
  80b150:	0027883a 	mov	r19,zero
  80b154:	0013883a 	mov	r9,zero
  80b158:	003f9106 	br	80afa0 <__alt_data_end+0xff80afa0>
  80b15c:	3446b03a 	or	r3,r6,r17
  80b160:	18001f1e 	bne	r3,zero,80b1e0 <__divdf3+0x2b8>
  80b164:	0023883a 	mov	r17,zero
  80b168:	0011883a 	mov	r8,zero
  80b16c:	01c00084 	movi	r7,2
  80b170:	003f9d06 	br	80afe8 <__alt_data_end+0xff80afe8>
  80b174:	3446b03a 	or	r3,r6,r17
  80b178:	18001526 	beq	r3,zero,80b1d0 <__divdf3+0x2a8>
  80b17c:	88011b26 	beq	r17,zero,80b5ec <__divdf3+0x6c4>
  80b180:	8809883a 	mov	r4,r17
  80b184:	d9800315 	stw	r6,12(sp)
  80b188:	da400115 	stw	r9,4(sp)
  80b18c:	080cc800 	call	80cc80 <__clzsi2>
  80b190:	d9800317 	ldw	r6,12(sp)
  80b194:	da400117 	ldw	r9,4(sp)
  80b198:	113ffd44 	addi	r4,r2,-11
  80b19c:	00c00704 	movi	r3,28
  80b1a0:	19010e16 	blt	r3,r4,80b5dc <__divdf3+0x6b4>
  80b1a4:	00c00744 	movi	r3,29
  80b1a8:	123ffe04 	addi	r8,r2,-8
  80b1ac:	1907c83a 	sub	r3,r3,r4
  80b1b0:	8a22983a 	sll	r17,r17,r8
  80b1b4:	30c6d83a 	srl	r3,r6,r3
  80b1b8:	3210983a 	sll	r8,r6,r8
  80b1bc:	1c62b03a 	or	r17,r3,r17
  80b1c0:	1080fcc4 	addi	r2,r2,1011
  80b1c4:	0085c83a 	sub	r2,zero,r2
  80b1c8:	000f883a 	mov	r7,zero
  80b1cc:	003f8606 	br	80afe8 <__alt_data_end+0xff80afe8>
  80b1d0:	0023883a 	mov	r17,zero
  80b1d4:	0011883a 	mov	r8,zero
  80b1d8:	01c00044 	movi	r7,1
  80b1dc:	003f8206 	br	80afe8 <__alt_data_end+0xff80afe8>
  80b1e0:	01c000c4 	movi	r7,3
  80b1e4:	003f8006 	br	80afe8 <__alt_data_end+0xff80afe8>
  80b1e8:	04c00104 	movi	r19,4
  80b1ec:	0021883a 	mov	r16,zero
  80b1f0:	0025883a 	mov	r18,zero
  80b1f4:	02400044 	movi	r9,1
  80b1f8:	003f6906 	br	80afa0 <__alt_data_end+0xff80afa0>
  80b1fc:	04c00304 	movi	r19,12
  80b200:	024000c4 	movi	r9,3
  80b204:	003f6606 	br	80afa0 <__alt_data_end+0xff80afa0>
  80b208:	01400434 	movhi	r5,16
  80b20c:	0007883a 	mov	r3,zero
  80b210:	297fffc4 	addi	r5,r5,-1
  80b214:	04bfffc4 	movi	r18,-1
  80b218:	0081ffc4 	movi	r2,2047
  80b21c:	003fa106 	br	80b0a4 <__alt_data_end+0xff80b0a4>
  80b220:	00c00044 	movi	r3,1
  80b224:	1887c83a 	sub	r3,r3,r2
  80b228:	01000e04 	movi	r4,56
  80b22c:	20c1210e 	bge	r4,r3,80b6b4 <__divdf3+0x78c>
  80b230:	98c0004c 	andi	r3,r19,1
  80b234:	0005883a 	mov	r2,zero
  80b238:	000b883a 	mov	r5,zero
  80b23c:	0025883a 	mov	r18,zero
  80b240:	003f9806 	br	80b0a4 <__alt_data_end+0xff80b0a4>
  80b244:	8c00fd36 	bltu	r17,r16,80b63c <__divdf3+0x714>
  80b248:	8440fb26 	beq	r16,r17,80b638 <__divdf3+0x710>
  80b24c:	8007883a 	mov	r3,r16
  80b250:	ad7fffc4 	addi	r21,r21,-1
  80b254:	0021883a 	mov	r16,zero
  80b258:	4004d63a 	srli	r2,r8,24
  80b25c:	8822923a 	slli	r17,r17,8
  80b260:	1809883a 	mov	r4,r3
  80b264:	402c923a 	slli	r22,r8,8
  80b268:	88b8b03a 	or	fp,r17,r2
  80b26c:	e028d43a 	srli	r20,fp,16
  80b270:	d8c00015 	stw	r3,0(sp)
  80b274:	e5ffffcc 	andi	r23,fp,65535
  80b278:	a00b883a 	mov	r5,r20
  80b27c:	080a5c00 	call	80a5c0 <__udivsi3>
  80b280:	d8c00017 	ldw	r3,0(sp)
  80b284:	a00b883a 	mov	r5,r20
  80b288:	d8800315 	stw	r2,12(sp)
  80b28c:	1809883a 	mov	r4,r3
  80b290:	080a6240 	call	80a624 <__umodsi3>
  80b294:	d9800317 	ldw	r6,12(sp)
  80b298:	1006943a 	slli	r3,r2,16
  80b29c:	9004d43a 	srli	r2,r18,16
  80b2a0:	b9a3383a 	mul	r17,r23,r6
  80b2a4:	10c4b03a 	or	r2,r2,r3
  80b2a8:	1440062e 	bgeu	r2,r17,80b2c4 <__divdf3+0x39c>
  80b2ac:	1705883a 	add	r2,r2,fp
  80b2b0:	30ffffc4 	addi	r3,r6,-1
  80b2b4:	1700ee36 	bltu	r2,fp,80b670 <__divdf3+0x748>
  80b2b8:	1440ed2e 	bgeu	r2,r17,80b670 <__divdf3+0x748>
  80b2bc:	31bfff84 	addi	r6,r6,-2
  80b2c0:	1705883a 	add	r2,r2,fp
  80b2c4:	1463c83a 	sub	r17,r2,r17
  80b2c8:	a00b883a 	mov	r5,r20
  80b2cc:	8809883a 	mov	r4,r17
  80b2d0:	d9800315 	stw	r6,12(sp)
  80b2d4:	080a5c00 	call	80a5c0 <__udivsi3>
  80b2d8:	a00b883a 	mov	r5,r20
  80b2dc:	8809883a 	mov	r4,r17
  80b2e0:	d8800215 	stw	r2,8(sp)
  80b2e4:	080a6240 	call	80a624 <__umodsi3>
  80b2e8:	d9c00217 	ldw	r7,8(sp)
  80b2ec:	1004943a 	slli	r2,r2,16
  80b2f0:	94bfffcc 	andi	r18,r18,65535
  80b2f4:	b9d1383a 	mul	r8,r23,r7
  80b2f8:	90a4b03a 	or	r18,r18,r2
  80b2fc:	d9800317 	ldw	r6,12(sp)
  80b300:	9200062e 	bgeu	r18,r8,80b31c <__divdf3+0x3f4>
  80b304:	9725883a 	add	r18,r18,fp
  80b308:	38bfffc4 	addi	r2,r7,-1
  80b30c:	9700d636 	bltu	r18,fp,80b668 <__divdf3+0x740>
  80b310:	9200d52e 	bgeu	r18,r8,80b668 <__divdf3+0x740>
  80b314:	39ffff84 	addi	r7,r7,-2
  80b318:	9725883a 	add	r18,r18,fp
  80b31c:	3004943a 	slli	r2,r6,16
  80b320:	b012d43a 	srli	r9,r22,16
  80b324:	b1bfffcc 	andi	r6,r22,65535
  80b328:	11e2b03a 	or	r17,r2,r7
  80b32c:	8806d43a 	srli	r3,r17,16
  80b330:	893fffcc 	andi	r4,r17,65535
  80b334:	218b383a 	mul	r5,r4,r6
  80b338:	30c5383a 	mul	r2,r6,r3
  80b33c:	2249383a 	mul	r4,r4,r9
  80b340:	280ed43a 	srli	r7,r5,16
  80b344:	9225c83a 	sub	r18,r18,r8
  80b348:	2089883a 	add	r4,r4,r2
  80b34c:	3909883a 	add	r4,r7,r4
  80b350:	1a47383a 	mul	r3,r3,r9
  80b354:	2080022e 	bgeu	r4,r2,80b360 <__divdf3+0x438>
  80b358:	00800074 	movhi	r2,1
  80b35c:	1887883a 	add	r3,r3,r2
  80b360:	2004d43a 	srli	r2,r4,16
  80b364:	2008943a 	slli	r4,r4,16
  80b368:	297fffcc 	andi	r5,r5,65535
  80b36c:	10c7883a 	add	r3,r2,r3
  80b370:	2149883a 	add	r4,r4,r5
  80b374:	90c0a536 	bltu	r18,r3,80b60c <__divdf3+0x6e4>
  80b378:	90c0bf26 	beq	r18,r3,80b678 <__divdf3+0x750>
  80b37c:	90c7c83a 	sub	r3,r18,r3
  80b380:	810fc83a 	sub	r7,r16,r4
  80b384:	81e5803a 	cmpltu	r18,r16,r7
  80b388:	1ca5c83a 	sub	r18,r3,r18
  80b38c:	e480c126 	beq	fp,r18,80b694 <__divdf3+0x76c>
  80b390:	a00b883a 	mov	r5,r20
  80b394:	9009883a 	mov	r4,r18
  80b398:	d9800315 	stw	r6,12(sp)
  80b39c:	d9c00215 	stw	r7,8(sp)
  80b3a0:	da400115 	stw	r9,4(sp)
  80b3a4:	080a5c00 	call	80a5c0 <__udivsi3>
  80b3a8:	a00b883a 	mov	r5,r20
  80b3ac:	9009883a 	mov	r4,r18
  80b3b0:	d8800015 	stw	r2,0(sp)
  80b3b4:	080a6240 	call	80a624 <__umodsi3>
  80b3b8:	d9c00217 	ldw	r7,8(sp)
  80b3bc:	da000017 	ldw	r8,0(sp)
  80b3c0:	1006943a 	slli	r3,r2,16
  80b3c4:	3804d43a 	srli	r2,r7,16
  80b3c8:	ba21383a 	mul	r16,r23,r8
  80b3cc:	d9800317 	ldw	r6,12(sp)
  80b3d0:	10c4b03a 	or	r2,r2,r3
  80b3d4:	da400117 	ldw	r9,4(sp)
  80b3d8:	1400062e 	bgeu	r2,r16,80b3f4 <__divdf3+0x4cc>
  80b3dc:	1705883a 	add	r2,r2,fp
  80b3e0:	40ffffc4 	addi	r3,r8,-1
  80b3e4:	1700ad36 	bltu	r2,fp,80b69c <__divdf3+0x774>
  80b3e8:	1400ac2e 	bgeu	r2,r16,80b69c <__divdf3+0x774>
  80b3ec:	423fff84 	addi	r8,r8,-2
  80b3f0:	1705883a 	add	r2,r2,fp
  80b3f4:	1421c83a 	sub	r16,r2,r16
  80b3f8:	a00b883a 	mov	r5,r20
  80b3fc:	8009883a 	mov	r4,r16
  80b400:	d9800315 	stw	r6,12(sp)
  80b404:	d9c00215 	stw	r7,8(sp)
  80b408:	da000015 	stw	r8,0(sp)
  80b40c:	da400115 	stw	r9,4(sp)
  80b410:	080a5c00 	call	80a5c0 <__udivsi3>
  80b414:	8009883a 	mov	r4,r16
  80b418:	a00b883a 	mov	r5,r20
  80b41c:	1025883a 	mov	r18,r2
  80b420:	080a6240 	call	80a624 <__umodsi3>
  80b424:	d9c00217 	ldw	r7,8(sp)
  80b428:	1004943a 	slli	r2,r2,16
  80b42c:	bcaf383a 	mul	r23,r23,r18
  80b430:	393fffcc 	andi	r4,r7,65535
  80b434:	2088b03a 	or	r4,r4,r2
  80b438:	d9800317 	ldw	r6,12(sp)
  80b43c:	da000017 	ldw	r8,0(sp)
  80b440:	da400117 	ldw	r9,4(sp)
  80b444:	25c0062e 	bgeu	r4,r23,80b460 <__divdf3+0x538>
  80b448:	2709883a 	add	r4,r4,fp
  80b44c:	90bfffc4 	addi	r2,r18,-1
  80b450:	27009436 	bltu	r4,fp,80b6a4 <__divdf3+0x77c>
  80b454:	25c0932e 	bgeu	r4,r23,80b6a4 <__divdf3+0x77c>
  80b458:	94bfff84 	addi	r18,r18,-2
  80b45c:	2709883a 	add	r4,r4,fp
  80b460:	4004943a 	slli	r2,r8,16
  80b464:	25efc83a 	sub	r23,r4,r23
  80b468:	1490b03a 	or	r8,r2,r18
  80b46c:	4008d43a 	srli	r4,r8,16
  80b470:	40ffffcc 	andi	r3,r8,65535
  80b474:	30c5383a 	mul	r2,r6,r3
  80b478:	1a47383a 	mul	r3,r3,r9
  80b47c:	310d383a 	mul	r6,r6,r4
  80b480:	100ad43a 	srli	r5,r2,16
  80b484:	4913383a 	mul	r9,r9,r4
  80b488:	1987883a 	add	r3,r3,r6
  80b48c:	28c7883a 	add	r3,r5,r3
  80b490:	1980022e 	bgeu	r3,r6,80b49c <__divdf3+0x574>
  80b494:	01000074 	movhi	r4,1
  80b498:	4913883a 	add	r9,r9,r4
  80b49c:	1808d43a 	srli	r4,r3,16
  80b4a0:	1806943a 	slli	r3,r3,16
  80b4a4:	10bfffcc 	andi	r2,r2,65535
  80b4a8:	2253883a 	add	r9,r4,r9
  80b4ac:	1887883a 	add	r3,r3,r2
  80b4b0:	ba403836 	bltu	r23,r9,80b594 <__divdf3+0x66c>
  80b4b4:	ba403626 	beq	r23,r9,80b590 <__divdf3+0x668>
  80b4b8:	42000054 	ori	r8,r8,1
  80b4bc:	a880ffc4 	addi	r2,r21,1023
  80b4c0:	00bf570e 	bge	zero,r2,80b220 <__alt_data_end+0xff80b220>
  80b4c4:	40c001cc 	andi	r3,r8,7
  80b4c8:	18000726 	beq	r3,zero,80b4e8 <__divdf3+0x5c0>
  80b4cc:	40c003cc 	andi	r3,r8,15
  80b4d0:	01000104 	movi	r4,4
  80b4d4:	19000426 	beq	r3,r4,80b4e8 <__divdf3+0x5c0>
  80b4d8:	4107883a 	add	r3,r8,r4
  80b4dc:	1a11803a 	cmpltu	r8,r3,r8
  80b4e0:	8a23883a 	add	r17,r17,r8
  80b4e4:	1811883a 	mov	r8,r3
  80b4e8:	88c0402c 	andhi	r3,r17,256
  80b4ec:	18000426 	beq	r3,zero,80b500 <__divdf3+0x5d8>
  80b4f0:	00ffc034 	movhi	r3,65280
  80b4f4:	18ffffc4 	addi	r3,r3,-1
  80b4f8:	a8810004 	addi	r2,r21,1024
  80b4fc:	88e2703a 	and	r17,r17,r3
  80b500:	00c1ff84 	movi	r3,2046
  80b504:	18bee316 	blt	r3,r2,80b094 <__alt_data_end+0xff80b094>
  80b508:	8824977a 	slli	r18,r17,29
  80b50c:	4010d0fa 	srli	r8,r8,3
  80b510:	8822927a 	slli	r17,r17,9
  80b514:	1081ffcc 	andi	r2,r2,2047
  80b518:	9224b03a 	or	r18,r18,r8
  80b51c:	880ad33a 	srli	r5,r17,12
  80b520:	98c0004c 	andi	r3,r19,1
  80b524:	003edf06 	br	80b0a4 <__alt_data_end+0xff80b0a4>
  80b528:	8080022c 	andhi	r2,r16,8
  80b52c:	10001226 	beq	r2,zero,80b578 <__divdf3+0x650>
  80b530:	8880022c 	andhi	r2,r17,8
  80b534:	1000101e 	bne	r2,zero,80b578 <__divdf3+0x650>
  80b538:	00800434 	movhi	r2,16
  80b53c:	89400234 	orhi	r5,r17,8
  80b540:	10bfffc4 	addi	r2,r2,-1
  80b544:	b007883a 	mov	r3,r22
  80b548:	288a703a 	and	r5,r5,r2
  80b54c:	4025883a 	mov	r18,r8
  80b550:	003f3106 	br	80b218 <__alt_data_end+0xff80b218>
  80b554:	008000c4 	movi	r2,3
  80b558:	3880a626 	beq	r7,r2,80b7f4 <__divdf3+0x8cc>
  80b55c:	00800044 	movi	r2,1
  80b560:	3880521e 	bne	r7,r2,80b6ac <__divdf3+0x784>
  80b564:	b807883a 	mov	r3,r23
  80b568:	0005883a 	mov	r2,zero
  80b56c:	000b883a 	mov	r5,zero
  80b570:	0025883a 	mov	r18,zero
  80b574:	003ecb06 	br	80b0a4 <__alt_data_end+0xff80b0a4>
  80b578:	00800434 	movhi	r2,16
  80b57c:	81400234 	orhi	r5,r16,8
  80b580:	10bfffc4 	addi	r2,r2,-1
  80b584:	a007883a 	mov	r3,r20
  80b588:	288a703a 	and	r5,r5,r2
  80b58c:	003f2206 	br	80b218 <__alt_data_end+0xff80b218>
  80b590:	183fca26 	beq	r3,zero,80b4bc <__alt_data_end+0xff80b4bc>
  80b594:	e5ef883a 	add	r23,fp,r23
  80b598:	40bfffc4 	addi	r2,r8,-1
  80b59c:	bf00392e 	bgeu	r23,fp,80b684 <__divdf3+0x75c>
  80b5a0:	1011883a 	mov	r8,r2
  80b5a4:	ba7fc41e 	bne	r23,r9,80b4b8 <__alt_data_end+0xff80b4b8>
  80b5a8:	b0ffc31e 	bne	r22,r3,80b4b8 <__alt_data_end+0xff80b4b8>
  80b5ac:	003fc306 	br	80b4bc <__alt_data_end+0xff80b4bc>
  80b5b0:	143ff604 	addi	r16,r2,-40
  80b5b4:	9c20983a 	sll	r16,r19,r16
  80b5b8:	0025883a 	mov	r18,zero
  80b5bc:	003ee206 	br	80b148 <__alt_data_end+0xff80b148>
  80b5c0:	d9800315 	stw	r6,12(sp)
  80b5c4:	d9c00215 	stw	r7,8(sp)
  80b5c8:	080cc800 	call	80cc80 <__clzsi2>
  80b5cc:	10800804 	addi	r2,r2,32
  80b5d0:	d9c00217 	ldw	r7,8(sp)
  80b5d4:	d9800317 	ldw	r6,12(sp)
  80b5d8:	003ed106 	br	80b120 <__alt_data_end+0xff80b120>
  80b5dc:	147ff604 	addi	r17,r2,-40
  80b5e0:	3462983a 	sll	r17,r6,r17
  80b5e4:	0011883a 	mov	r8,zero
  80b5e8:	003ef506 	br	80b1c0 <__alt_data_end+0xff80b1c0>
  80b5ec:	3009883a 	mov	r4,r6
  80b5f0:	d9800315 	stw	r6,12(sp)
  80b5f4:	da400115 	stw	r9,4(sp)
  80b5f8:	080cc800 	call	80cc80 <__clzsi2>
  80b5fc:	10800804 	addi	r2,r2,32
  80b600:	da400117 	ldw	r9,4(sp)
  80b604:	d9800317 	ldw	r6,12(sp)
  80b608:	003ee306 	br	80b198 <__alt_data_end+0xff80b198>
  80b60c:	85a1883a 	add	r16,r16,r22
  80b610:	8585803a 	cmpltu	r2,r16,r22
  80b614:	1705883a 	add	r2,r2,fp
  80b618:	14a5883a 	add	r18,r2,r18
  80b61c:	88bfffc4 	addi	r2,r17,-1
  80b620:	e4800c2e 	bgeu	fp,r18,80b654 <__divdf3+0x72c>
  80b624:	90c03e36 	bltu	r18,r3,80b720 <__divdf3+0x7f8>
  80b628:	1c806926 	beq	r3,r18,80b7d0 <__divdf3+0x8a8>
  80b62c:	90c7c83a 	sub	r3,r18,r3
  80b630:	1023883a 	mov	r17,r2
  80b634:	003f5206 	br	80b380 <__alt_data_end+0xff80b380>
  80b638:	923f0436 	bltu	r18,r8,80b24c <__alt_data_end+0xff80b24c>
  80b63c:	800897fa 	slli	r4,r16,31
  80b640:	9004d07a 	srli	r2,r18,1
  80b644:	8006d07a 	srli	r3,r16,1
  80b648:	902097fa 	slli	r16,r18,31
  80b64c:	20a4b03a 	or	r18,r4,r2
  80b650:	003f0106 	br	80b258 <__alt_data_end+0xff80b258>
  80b654:	e4bff51e 	bne	fp,r18,80b62c <__alt_data_end+0xff80b62c>
  80b658:	85bff22e 	bgeu	r16,r22,80b624 <__alt_data_end+0xff80b624>
  80b65c:	e0c7c83a 	sub	r3,fp,r3
  80b660:	1023883a 	mov	r17,r2
  80b664:	003f4606 	br	80b380 <__alt_data_end+0xff80b380>
  80b668:	100f883a 	mov	r7,r2
  80b66c:	003f2b06 	br	80b31c <__alt_data_end+0xff80b31c>
  80b670:	180d883a 	mov	r6,r3
  80b674:	003f1306 	br	80b2c4 <__alt_data_end+0xff80b2c4>
  80b678:	813fe436 	bltu	r16,r4,80b60c <__alt_data_end+0xff80b60c>
  80b67c:	0007883a 	mov	r3,zero
  80b680:	003f3f06 	br	80b380 <__alt_data_end+0xff80b380>
  80b684:	ba402c36 	bltu	r23,r9,80b738 <__divdf3+0x810>
  80b688:	4dc05426 	beq	r9,r23,80b7dc <__divdf3+0x8b4>
  80b68c:	1011883a 	mov	r8,r2
  80b690:	003f8906 	br	80b4b8 <__alt_data_end+0xff80b4b8>
  80b694:	023fffc4 	movi	r8,-1
  80b698:	003f8806 	br	80b4bc <__alt_data_end+0xff80b4bc>
  80b69c:	1811883a 	mov	r8,r3
  80b6a0:	003f5406 	br	80b3f4 <__alt_data_end+0xff80b3f4>
  80b6a4:	1025883a 	mov	r18,r2
  80b6a8:	003f6d06 	br	80b460 <__alt_data_end+0xff80b460>
  80b6ac:	b827883a 	mov	r19,r23
  80b6b0:	003f8206 	br	80b4bc <__alt_data_end+0xff80b4bc>
  80b6b4:	010007c4 	movi	r4,31
  80b6b8:	20c02616 	blt	r4,r3,80b754 <__divdf3+0x82c>
  80b6bc:	00800804 	movi	r2,32
  80b6c0:	10c5c83a 	sub	r2,r2,r3
  80b6c4:	888a983a 	sll	r5,r17,r2
  80b6c8:	40c8d83a 	srl	r4,r8,r3
  80b6cc:	4084983a 	sll	r2,r8,r2
  80b6d0:	88e2d83a 	srl	r17,r17,r3
  80b6d4:	2906b03a 	or	r3,r5,r4
  80b6d8:	1004c03a 	cmpne	r2,r2,zero
  80b6dc:	1886b03a 	or	r3,r3,r2
  80b6e0:	188001cc 	andi	r2,r3,7
  80b6e4:	10000726 	beq	r2,zero,80b704 <__divdf3+0x7dc>
  80b6e8:	188003cc 	andi	r2,r3,15
  80b6ec:	01000104 	movi	r4,4
  80b6f0:	11000426 	beq	r2,r4,80b704 <__divdf3+0x7dc>
  80b6f4:	1805883a 	mov	r2,r3
  80b6f8:	10c00104 	addi	r3,r2,4
  80b6fc:	1885803a 	cmpltu	r2,r3,r2
  80b700:	88a3883a 	add	r17,r17,r2
  80b704:	8880202c 	andhi	r2,r17,128
  80b708:	10002726 	beq	r2,zero,80b7a8 <__divdf3+0x880>
  80b70c:	98c0004c 	andi	r3,r19,1
  80b710:	00800044 	movi	r2,1
  80b714:	000b883a 	mov	r5,zero
  80b718:	0025883a 	mov	r18,zero
  80b71c:	003e6106 	br	80b0a4 <__alt_data_end+0xff80b0a4>
  80b720:	85a1883a 	add	r16,r16,r22
  80b724:	8585803a 	cmpltu	r2,r16,r22
  80b728:	1705883a 	add	r2,r2,fp
  80b72c:	14a5883a 	add	r18,r2,r18
  80b730:	8c7fff84 	addi	r17,r17,-2
  80b734:	003f1106 	br	80b37c <__alt_data_end+0xff80b37c>
  80b738:	b589883a 	add	r4,r22,r22
  80b73c:	25ad803a 	cmpltu	r22,r4,r22
  80b740:	b739883a 	add	fp,r22,fp
  80b744:	40bfff84 	addi	r2,r8,-2
  80b748:	bf2f883a 	add	r23,r23,fp
  80b74c:	202d883a 	mov	r22,r4
  80b750:	003f9306 	br	80b5a0 <__alt_data_end+0xff80b5a0>
  80b754:	013ff844 	movi	r4,-31
  80b758:	2085c83a 	sub	r2,r4,r2
  80b75c:	8888d83a 	srl	r4,r17,r2
  80b760:	00800804 	movi	r2,32
  80b764:	18802126 	beq	r3,r2,80b7ec <__divdf3+0x8c4>
  80b768:	00801004 	movi	r2,64
  80b76c:	10c5c83a 	sub	r2,r2,r3
  80b770:	8884983a 	sll	r2,r17,r2
  80b774:	1204b03a 	or	r2,r2,r8
  80b778:	1004c03a 	cmpne	r2,r2,zero
  80b77c:	2084b03a 	or	r2,r4,r2
  80b780:	144001cc 	andi	r17,r2,7
  80b784:	88000d1e 	bne	r17,zero,80b7bc <__divdf3+0x894>
  80b788:	000b883a 	mov	r5,zero
  80b78c:	1024d0fa 	srli	r18,r2,3
  80b790:	98c0004c 	andi	r3,r19,1
  80b794:	0005883a 	mov	r2,zero
  80b798:	9464b03a 	or	r18,r18,r17
  80b79c:	003e4106 	br	80b0a4 <__alt_data_end+0xff80b0a4>
  80b7a0:	1007883a 	mov	r3,r2
  80b7a4:	0023883a 	mov	r17,zero
  80b7a8:	880a927a 	slli	r5,r17,9
  80b7ac:	1805883a 	mov	r2,r3
  80b7b0:	8822977a 	slli	r17,r17,29
  80b7b4:	280ad33a 	srli	r5,r5,12
  80b7b8:	003ff406 	br	80b78c <__alt_data_end+0xff80b78c>
  80b7bc:	10c003cc 	andi	r3,r2,15
  80b7c0:	01000104 	movi	r4,4
  80b7c4:	193ff626 	beq	r3,r4,80b7a0 <__alt_data_end+0xff80b7a0>
  80b7c8:	0023883a 	mov	r17,zero
  80b7cc:	003fca06 	br	80b6f8 <__alt_data_end+0xff80b6f8>
  80b7d0:	813fd336 	bltu	r16,r4,80b720 <__alt_data_end+0xff80b720>
  80b7d4:	1023883a 	mov	r17,r2
  80b7d8:	003fa806 	br	80b67c <__alt_data_end+0xff80b67c>
  80b7dc:	b0ffd636 	bltu	r22,r3,80b738 <__alt_data_end+0xff80b738>
  80b7e0:	1011883a 	mov	r8,r2
  80b7e4:	b0ff341e 	bne	r22,r3,80b4b8 <__alt_data_end+0xff80b4b8>
  80b7e8:	003f3406 	br	80b4bc <__alt_data_end+0xff80b4bc>
  80b7ec:	0005883a 	mov	r2,zero
  80b7f0:	003fe006 	br	80b774 <__alt_data_end+0xff80b774>
  80b7f4:	00800434 	movhi	r2,16
  80b7f8:	89400234 	orhi	r5,r17,8
  80b7fc:	10bfffc4 	addi	r2,r2,-1
  80b800:	b807883a 	mov	r3,r23
  80b804:	288a703a 	and	r5,r5,r2
  80b808:	4025883a 	mov	r18,r8
  80b80c:	003e8206 	br	80b218 <__alt_data_end+0xff80b218>

0080b810 <__eqdf2>:
  80b810:	2804d53a 	srli	r2,r5,20
  80b814:	3806d53a 	srli	r3,r7,20
  80b818:	02000434 	movhi	r8,16
  80b81c:	423fffc4 	addi	r8,r8,-1
  80b820:	1081ffcc 	andi	r2,r2,2047
  80b824:	0281ffc4 	movi	r10,2047
  80b828:	2a12703a 	and	r9,r5,r8
  80b82c:	18c1ffcc 	andi	r3,r3,2047
  80b830:	3a10703a 	and	r8,r7,r8
  80b834:	280ad7fa 	srli	r5,r5,31
  80b838:	380ed7fa 	srli	r7,r7,31
  80b83c:	12801026 	beq	r2,r10,80b880 <__eqdf2+0x70>
  80b840:	0281ffc4 	movi	r10,2047
  80b844:	1a800a26 	beq	r3,r10,80b870 <__eqdf2+0x60>
  80b848:	10c00226 	beq	r2,r3,80b854 <__eqdf2+0x44>
  80b84c:	00800044 	movi	r2,1
  80b850:	f800283a 	ret
  80b854:	4a3ffd1e 	bne	r9,r8,80b84c <__alt_data_end+0xff80b84c>
  80b858:	21bffc1e 	bne	r4,r6,80b84c <__alt_data_end+0xff80b84c>
  80b85c:	29c00c26 	beq	r5,r7,80b890 <__eqdf2+0x80>
  80b860:	103ffa1e 	bne	r2,zero,80b84c <__alt_data_end+0xff80b84c>
  80b864:	2244b03a 	or	r2,r4,r9
  80b868:	1004c03a 	cmpne	r2,r2,zero
  80b86c:	f800283a 	ret
  80b870:	3214b03a 	or	r10,r6,r8
  80b874:	503ff426 	beq	r10,zero,80b848 <__alt_data_end+0xff80b848>
  80b878:	00800044 	movi	r2,1
  80b87c:	f800283a 	ret
  80b880:	2254b03a 	or	r10,r4,r9
  80b884:	503fee26 	beq	r10,zero,80b840 <__alt_data_end+0xff80b840>
  80b888:	00800044 	movi	r2,1
  80b88c:	f800283a 	ret
  80b890:	0005883a 	mov	r2,zero
  80b894:	f800283a 	ret

0080b898 <__gedf2>:
  80b898:	2804d53a 	srli	r2,r5,20
  80b89c:	3806d53a 	srli	r3,r7,20
  80b8a0:	02000434 	movhi	r8,16
  80b8a4:	423fffc4 	addi	r8,r8,-1
  80b8a8:	1081ffcc 	andi	r2,r2,2047
  80b8ac:	0241ffc4 	movi	r9,2047
  80b8b0:	2a14703a 	and	r10,r5,r8
  80b8b4:	18c1ffcc 	andi	r3,r3,2047
  80b8b8:	3a10703a 	and	r8,r7,r8
  80b8bc:	280ad7fa 	srli	r5,r5,31
  80b8c0:	380ed7fa 	srli	r7,r7,31
  80b8c4:	12401d26 	beq	r2,r9,80b93c <__gedf2+0xa4>
  80b8c8:	0241ffc4 	movi	r9,2047
  80b8cc:	1a401226 	beq	r3,r9,80b918 <__gedf2+0x80>
  80b8d0:	1000081e 	bne	r2,zero,80b8f4 <__gedf2+0x5c>
  80b8d4:	2296b03a 	or	r11,r4,r10
  80b8d8:	5813003a 	cmpeq	r9,r11,zero
  80b8dc:	1800091e 	bne	r3,zero,80b904 <__gedf2+0x6c>
  80b8e0:	3218b03a 	or	r12,r6,r8
  80b8e4:	6000071e 	bne	r12,zero,80b904 <__gedf2+0x6c>
  80b8e8:	0005883a 	mov	r2,zero
  80b8ec:	5800101e 	bne	r11,zero,80b930 <__gedf2+0x98>
  80b8f0:	f800283a 	ret
  80b8f4:	18000c1e 	bne	r3,zero,80b928 <__gedf2+0x90>
  80b8f8:	3212b03a 	or	r9,r6,r8
  80b8fc:	48000c26 	beq	r9,zero,80b930 <__gedf2+0x98>
  80b900:	0013883a 	mov	r9,zero
  80b904:	39c03fcc 	andi	r7,r7,255
  80b908:	48000826 	beq	r9,zero,80b92c <__gedf2+0x94>
  80b90c:	38000926 	beq	r7,zero,80b934 <__gedf2+0x9c>
  80b910:	00800044 	movi	r2,1
  80b914:	f800283a 	ret
  80b918:	3212b03a 	or	r9,r6,r8
  80b91c:	483fec26 	beq	r9,zero,80b8d0 <__alt_data_end+0xff80b8d0>
  80b920:	00bfff84 	movi	r2,-2
  80b924:	f800283a 	ret
  80b928:	39c03fcc 	andi	r7,r7,255
  80b92c:	29c00626 	beq	r5,r7,80b948 <__gedf2+0xb0>
  80b930:	283ff726 	beq	r5,zero,80b910 <__alt_data_end+0xff80b910>
  80b934:	00bfffc4 	movi	r2,-1
  80b938:	f800283a 	ret
  80b93c:	2292b03a 	or	r9,r4,r10
  80b940:	483fe126 	beq	r9,zero,80b8c8 <__alt_data_end+0xff80b8c8>
  80b944:	003ff606 	br	80b920 <__alt_data_end+0xff80b920>
  80b948:	18bff916 	blt	r3,r2,80b930 <__alt_data_end+0xff80b930>
  80b94c:	10c00316 	blt	r2,r3,80b95c <__gedf2+0xc4>
  80b950:	42bff736 	bltu	r8,r10,80b930 <__alt_data_end+0xff80b930>
  80b954:	52000326 	beq	r10,r8,80b964 <__gedf2+0xcc>
  80b958:	5200042e 	bgeu	r10,r8,80b96c <__gedf2+0xd4>
  80b95c:	283fec1e 	bne	r5,zero,80b910 <__alt_data_end+0xff80b910>
  80b960:	003ff406 	br	80b934 <__alt_data_end+0xff80b934>
  80b964:	313ff236 	bltu	r6,r4,80b930 <__alt_data_end+0xff80b930>
  80b968:	21bffc36 	bltu	r4,r6,80b95c <__alt_data_end+0xff80b95c>
  80b96c:	0005883a 	mov	r2,zero
  80b970:	f800283a 	ret

0080b974 <__ledf2>:
  80b974:	2804d53a 	srli	r2,r5,20
  80b978:	3810d53a 	srli	r8,r7,20
  80b97c:	00c00434 	movhi	r3,16
  80b980:	18ffffc4 	addi	r3,r3,-1
  80b984:	1081ffcc 	andi	r2,r2,2047
  80b988:	0241ffc4 	movi	r9,2047
  80b98c:	28d4703a 	and	r10,r5,r3
  80b990:	4201ffcc 	andi	r8,r8,2047
  80b994:	38c6703a 	and	r3,r7,r3
  80b998:	280ad7fa 	srli	r5,r5,31
  80b99c:	380ed7fa 	srli	r7,r7,31
  80b9a0:	12401f26 	beq	r2,r9,80ba20 <__ledf2+0xac>
  80b9a4:	0241ffc4 	movi	r9,2047
  80b9a8:	42401426 	beq	r8,r9,80b9fc <__ledf2+0x88>
  80b9ac:	1000091e 	bne	r2,zero,80b9d4 <__ledf2+0x60>
  80b9b0:	2296b03a 	or	r11,r4,r10
  80b9b4:	5813003a 	cmpeq	r9,r11,zero
  80b9b8:	29403fcc 	andi	r5,r5,255
  80b9bc:	40000a1e 	bne	r8,zero,80b9e8 <__ledf2+0x74>
  80b9c0:	30d8b03a 	or	r12,r6,r3
  80b9c4:	6000081e 	bne	r12,zero,80b9e8 <__ledf2+0x74>
  80b9c8:	0005883a 	mov	r2,zero
  80b9cc:	5800111e 	bne	r11,zero,80ba14 <__ledf2+0xa0>
  80b9d0:	f800283a 	ret
  80b9d4:	29403fcc 	andi	r5,r5,255
  80b9d8:	40000c1e 	bne	r8,zero,80ba0c <__ledf2+0x98>
  80b9dc:	30d2b03a 	or	r9,r6,r3
  80b9e0:	48000c26 	beq	r9,zero,80ba14 <__ledf2+0xa0>
  80b9e4:	0013883a 	mov	r9,zero
  80b9e8:	39c03fcc 	andi	r7,r7,255
  80b9ec:	48000826 	beq	r9,zero,80ba10 <__ledf2+0x9c>
  80b9f0:	38001126 	beq	r7,zero,80ba38 <__ledf2+0xc4>
  80b9f4:	00800044 	movi	r2,1
  80b9f8:	f800283a 	ret
  80b9fc:	30d2b03a 	or	r9,r6,r3
  80ba00:	483fea26 	beq	r9,zero,80b9ac <__alt_data_end+0xff80b9ac>
  80ba04:	00800084 	movi	r2,2
  80ba08:	f800283a 	ret
  80ba0c:	39c03fcc 	andi	r7,r7,255
  80ba10:	39400726 	beq	r7,r5,80ba30 <__ledf2+0xbc>
  80ba14:	2800081e 	bne	r5,zero,80ba38 <__ledf2+0xc4>
  80ba18:	00800044 	movi	r2,1
  80ba1c:	f800283a 	ret
  80ba20:	2292b03a 	or	r9,r4,r10
  80ba24:	483fdf26 	beq	r9,zero,80b9a4 <__alt_data_end+0xff80b9a4>
  80ba28:	00800084 	movi	r2,2
  80ba2c:	f800283a 	ret
  80ba30:	4080030e 	bge	r8,r2,80ba40 <__ledf2+0xcc>
  80ba34:	383fef26 	beq	r7,zero,80b9f4 <__alt_data_end+0xff80b9f4>
  80ba38:	00bfffc4 	movi	r2,-1
  80ba3c:	f800283a 	ret
  80ba40:	123feb16 	blt	r2,r8,80b9f0 <__alt_data_end+0xff80b9f0>
  80ba44:	1abff336 	bltu	r3,r10,80ba14 <__alt_data_end+0xff80ba14>
  80ba48:	50c00326 	beq	r10,r3,80ba58 <__ledf2+0xe4>
  80ba4c:	50c0042e 	bgeu	r10,r3,80ba60 <__ledf2+0xec>
  80ba50:	283fe81e 	bne	r5,zero,80b9f4 <__alt_data_end+0xff80b9f4>
  80ba54:	003ff806 	br	80ba38 <__alt_data_end+0xff80ba38>
  80ba58:	313fee36 	bltu	r6,r4,80ba14 <__alt_data_end+0xff80ba14>
  80ba5c:	21bffc36 	bltu	r4,r6,80ba50 <__alt_data_end+0xff80ba50>
  80ba60:	0005883a 	mov	r2,zero
  80ba64:	f800283a 	ret

0080ba68 <__muldf3>:
  80ba68:	defff304 	addi	sp,sp,-52
  80ba6c:	2804d53a 	srli	r2,r5,20
  80ba70:	dd800915 	stw	r22,36(sp)
  80ba74:	282cd7fa 	srli	r22,r5,31
  80ba78:	dc000315 	stw	r16,12(sp)
  80ba7c:	04000434 	movhi	r16,16
  80ba80:	dd400815 	stw	r21,32(sp)
  80ba84:	dc800515 	stw	r18,20(sp)
  80ba88:	843fffc4 	addi	r16,r16,-1
  80ba8c:	dfc00c15 	stw	ra,48(sp)
  80ba90:	df000b15 	stw	fp,44(sp)
  80ba94:	ddc00a15 	stw	r23,40(sp)
  80ba98:	dd000715 	stw	r20,28(sp)
  80ba9c:	dcc00615 	stw	r19,24(sp)
  80baa0:	dc400415 	stw	r17,16(sp)
  80baa4:	1481ffcc 	andi	r18,r2,2047
  80baa8:	2c20703a 	and	r16,r5,r16
  80baac:	b02b883a 	mov	r21,r22
  80bab0:	b2403fcc 	andi	r9,r22,255
  80bab4:	90006026 	beq	r18,zero,80bc38 <__muldf3+0x1d0>
  80bab8:	0081ffc4 	movi	r2,2047
  80babc:	2029883a 	mov	r20,r4
  80bac0:	90803626 	beq	r18,r2,80bb9c <__muldf3+0x134>
  80bac4:	80800434 	orhi	r2,r16,16
  80bac8:	100490fa 	slli	r2,r2,3
  80bacc:	2020d77a 	srli	r16,r4,29
  80bad0:	202890fa 	slli	r20,r4,3
  80bad4:	94bf0044 	addi	r18,r18,-1023
  80bad8:	80a0b03a 	or	r16,r16,r2
  80badc:	0027883a 	mov	r19,zero
  80bae0:	0039883a 	mov	fp,zero
  80bae4:	3804d53a 	srli	r2,r7,20
  80bae8:	382ed7fa 	srli	r23,r7,31
  80baec:	04400434 	movhi	r17,16
  80baf0:	8c7fffc4 	addi	r17,r17,-1
  80baf4:	1081ffcc 	andi	r2,r2,2047
  80baf8:	3011883a 	mov	r8,r6
  80bafc:	3c62703a 	and	r17,r7,r17
  80bb00:	ba803fcc 	andi	r10,r23,255
  80bb04:	10006d26 	beq	r2,zero,80bcbc <__muldf3+0x254>
  80bb08:	00c1ffc4 	movi	r3,2047
  80bb0c:	10c06526 	beq	r2,r3,80bca4 <__muldf3+0x23c>
  80bb10:	88c00434 	orhi	r3,r17,16
  80bb14:	180690fa 	slli	r3,r3,3
  80bb18:	3022d77a 	srli	r17,r6,29
  80bb1c:	301090fa 	slli	r8,r6,3
  80bb20:	10bf0044 	addi	r2,r2,-1023
  80bb24:	88e2b03a 	or	r17,r17,r3
  80bb28:	000b883a 	mov	r5,zero
  80bb2c:	9085883a 	add	r2,r18,r2
  80bb30:	2cc8b03a 	or	r4,r5,r19
  80bb34:	00c003c4 	movi	r3,15
  80bb38:	bdacf03a 	xor	r22,r23,r22
  80bb3c:	12c00044 	addi	r11,r2,1
  80bb40:	19009936 	bltu	r3,r4,80bda8 <__muldf3+0x340>
  80bb44:	200890ba 	slli	r4,r4,2
  80bb48:	00c02074 	movhi	r3,129
  80bb4c:	18eed704 	addi	r3,r3,-17572
  80bb50:	20c9883a 	add	r4,r4,r3
  80bb54:	20c00017 	ldw	r3,0(r4)
  80bb58:	1800683a 	jmp	r3
  80bb5c:	0080bda8 	cmpgeui	r2,zero,758
  80bb60:	0080bbbc 	xorhi	r2,zero,750
  80bb64:	0080bbbc 	xorhi	r2,zero,750
  80bb68:	0080bbb8 	rdprs	r2,zero,750
  80bb6c:	0080bd84 	movi	r2,758
  80bb70:	0080bd84 	movi	r2,758
  80bb74:	0080bd6c 	andhi	r2,zero,757
  80bb78:	0080bbb8 	rdprs	r2,zero,750
  80bb7c:	0080bd84 	movi	r2,758
  80bb80:	0080bd6c 	andhi	r2,zero,757
  80bb84:	0080bd84 	movi	r2,758
  80bb88:	0080bbb8 	rdprs	r2,zero,750
  80bb8c:	0080bd94 	movui	r2,758
  80bb90:	0080bd94 	movui	r2,758
  80bb94:	0080bd94 	movui	r2,758
  80bb98:	0080bfb0 	cmpltui	r2,zero,766
  80bb9c:	2404b03a 	or	r2,r4,r16
  80bba0:	10006f1e 	bne	r2,zero,80bd60 <__muldf3+0x2f8>
  80bba4:	04c00204 	movi	r19,8
  80bba8:	0021883a 	mov	r16,zero
  80bbac:	0029883a 	mov	r20,zero
  80bbb0:	07000084 	movi	fp,2
  80bbb4:	003fcb06 	br	80bae4 <__alt_data_end+0xff80bae4>
  80bbb8:	502d883a 	mov	r22,r10
  80bbbc:	00800084 	movi	r2,2
  80bbc0:	28805726 	beq	r5,r2,80bd20 <__muldf3+0x2b8>
  80bbc4:	008000c4 	movi	r2,3
  80bbc8:	28816626 	beq	r5,r2,80c164 <__muldf3+0x6fc>
  80bbcc:	00800044 	movi	r2,1
  80bbd0:	2881411e 	bne	r5,r2,80c0d8 <__muldf3+0x670>
  80bbd4:	b02b883a 	mov	r21,r22
  80bbd8:	0005883a 	mov	r2,zero
  80bbdc:	000b883a 	mov	r5,zero
  80bbe0:	0029883a 	mov	r20,zero
  80bbe4:	1004953a 	slli	r2,r2,20
  80bbe8:	a8c03fcc 	andi	r3,r21,255
  80bbec:	04400434 	movhi	r17,16
  80bbf0:	8c7fffc4 	addi	r17,r17,-1
  80bbf4:	180697fa 	slli	r3,r3,31
  80bbf8:	2c4a703a 	and	r5,r5,r17
  80bbfc:	288ab03a 	or	r5,r5,r2
  80bc00:	28c6b03a 	or	r3,r5,r3
  80bc04:	a005883a 	mov	r2,r20
  80bc08:	dfc00c17 	ldw	ra,48(sp)
  80bc0c:	df000b17 	ldw	fp,44(sp)
  80bc10:	ddc00a17 	ldw	r23,40(sp)
  80bc14:	dd800917 	ldw	r22,36(sp)
  80bc18:	dd400817 	ldw	r21,32(sp)
  80bc1c:	dd000717 	ldw	r20,28(sp)
  80bc20:	dcc00617 	ldw	r19,24(sp)
  80bc24:	dc800517 	ldw	r18,20(sp)
  80bc28:	dc400417 	ldw	r17,16(sp)
  80bc2c:	dc000317 	ldw	r16,12(sp)
  80bc30:	dec00d04 	addi	sp,sp,52
  80bc34:	f800283a 	ret
  80bc38:	2404b03a 	or	r2,r4,r16
  80bc3c:	2027883a 	mov	r19,r4
  80bc40:	10004226 	beq	r2,zero,80bd4c <__muldf3+0x2e4>
  80bc44:	8000fc26 	beq	r16,zero,80c038 <__muldf3+0x5d0>
  80bc48:	8009883a 	mov	r4,r16
  80bc4c:	d9800215 	stw	r6,8(sp)
  80bc50:	d9c00015 	stw	r7,0(sp)
  80bc54:	da400115 	stw	r9,4(sp)
  80bc58:	080cc800 	call	80cc80 <__clzsi2>
  80bc5c:	d9800217 	ldw	r6,8(sp)
  80bc60:	d9c00017 	ldw	r7,0(sp)
  80bc64:	da400117 	ldw	r9,4(sp)
  80bc68:	113ffd44 	addi	r4,r2,-11
  80bc6c:	00c00704 	movi	r3,28
  80bc70:	1900ed16 	blt	r3,r4,80c028 <__muldf3+0x5c0>
  80bc74:	00c00744 	movi	r3,29
  80bc78:	147ffe04 	addi	r17,r2,-8
  80bc7c:	1907c83a 	sub	r3,r3,r4
  80bc80:	8460983a 	sll	r16,r16,r17
  80bc84:	98c6d83a 	srl	r3,r19,r3
  80bc88:	9c68983a 	sll	r20,r19,r17
  80bc8c:	1c20b03a 	or	r16,r3,r16
  80bc90:	1080fcc4 	addi	r2,r2,1011
  80bc94:	00a5c83a 	sub	r18,zero,r2
  80bc98:	0027883a 	mov	r19,zero
  80bc9c:	0039883a 	mov	fp,zero
  80bca0:	003f9006 	br	80bae4 <__alt_data_end+0xff80bae4>
  80bca4:	3446b03a 	or	r3,r6,r17
  80bca8:	1800261e 	bne	r3,zero,80bd44 <__muldf3+0x2dc>
  80bcac:	0023883a 	mov	r17,zero
  80bcb0:	0011883a 	mov	r8,zero
  80bcb4:	01400084 	movi	r5,2
  80bcb8:	003f9c06 	br	80bb2c <__alt_data_end+0xff80bb2c>
  80bcbc:	3446b03a 	or	r3,r6,r17
  80bcc0:	18001c26 	beq	r3,zero,80bd34 <__muldf3+0x2cc>
  80bcc4:	8800ce26 	beq	r17,zero,80c000 <__muldf3+0x598>
  80bcc8:	8809883a 	mov	r4,r17
  80bccc:	d9800215 	stw	r6,8(sp)
  80bcd0:	da400115 	stw	r9,4(sp)
  80bcd4:	da800015 	stw	r10,0(sp)
  80bcd8:	080cc800 	call	80cc80 <__clzsi2>
  80bcdc:	d9800217 	ldw	r6,8(sp)
  80bce0:	da400117 	ldw	r9,4(sp)
  80bce4:	da800017 	ldw	r10,0(sp)
  80bce8:	113ffd44 	addi	r4,r2,-11
  80bcec:	00c00704 	movi	r3,28
  80bcf0:	1900bf16 	blt	r3,r4,80bff0 <__muldf3+0x588>
  80bcf4:	00c00744 	movi	r3,29
  80bcf8:	123ffe04 	addi	r8,r2,-8
  80bcfc:	1907c83a 	sub	r3,r3,r4
  80bd00:	8a22983a 	sll	r17,r17,r8
  80bd04:	30c6d83a 	srl	r3,r6,r3
  80bd08:	3210983a 	sll	r8,r6,r8
  80bd0c:	1c62b03a 	or	r17,r3,r17
  80bd10:	1080fcc4 	addi	r2,r2,1011
  80bd14:	0085c83a 	sub	r2,zero,r2
  80bd18:	000b883a 	mov	r5,zero
  80bd1c:	003f8306 	br	80bb2c <__alt_data_end+0xff80bb2c>
  80bd20:	b02b883a 	mov	r21,r22
  80bd24:	0081ffc4 	movi	r2,2047
  80bd28:	000b883a 	mov	r5,zero
  80bd2c:	0029883a 	mov	r20,zero
  80bd30:	003fac06 	br	80bbe4 <__alt_data_end+0xff80bbe4>
  80bd34:	0023883a 	mov	r17,zero
  80bd38:	0011883a 	mov	r8,zero
  80bd3c:	01400044 	movi	r5,1
  80bd40:	003f7a06 	br	80bb2c <__alt_data_end+0xff80bb2c>
  80bd44:	014000c4 	movi	r5,3
  80bd48:	003f7806 	br	80bb2c <__alt_data_end+0xff80bb2c>
  80bd4c:	04c00104 	movi	r19,4
  80bd50:	0021883a 	mov	r16,zero
  80bd54:	0029883a 	mov	r20,zero
  80bd58:	07000044 	movi	fp,1
  80bd5c:	003f6106 	br	80bae4 <__alt_data_end+0xff80bae4>
  80bd60:	04c00304 	movi	r19,12
  80bd64:	070000c4 	movi	fp,3
  80bd68:	003f5e06 	br	80bae4 <__alt_data_end+0xff80bae4>
  80bd6c:	01400434 	movhi	r5,16
  80bd70:	002b883a 	mov	r21,zero
  80bd74:	297fffc4 	addi	r5,r5,-1
  80bd78:	053fffc4 	movi	r20,-1
  80bd7c:	0081ffc4 	movi	r2,2047
  80bd80:	003f9806 	br	80bbe4 <__alt_data_end+0xff80bbe4>
  80bd84:	8023883a 	mov	r17,r16
  80bd88:	a011883a 	mov	r8,r20
  80bd8c:	e00b883a 	mov	r5,fp
  80bd90:	003f8a06 	br	80bbbc <__alt_data_end+0xff80bbbc>
  80bd94:	8023883a 	mov	r17,r16
  80bd98:	a011883a 	mov	r8,r20
  80bd9c:	482d883a 	mov	r22,r9
  80bda0:	e00b883a 	mov	r5,fp
  80bda4:	003f8506 	br	80bbbc <__alt_data_end+0xff80bbbc>
  80bda8:	a00ad43a 	srli	r5,r20,16
  80bdac:	401ad43a 	srli	r13,r8,16
  80bdb0:	a53fffcc 	andi	r20,r20,65535
  80bdb4:	423fffcc 	andi	r8,r8,65535
  80bdb8:	4519383a 	mul	r12,r8,r20
  80bdbc:	4147383a 	mul	r3,r8,r5
  80bdc0:	6d09383a 	mul	r4,r13,r20
  80bdc4:	600cd43a 	srli	r6,r12,16
  80bdc8:	2b5d383a 	mul	r14,r5,r13
  80bdcc:	20c9883a 	add	r4,r4,r3
  80bdd0:	310d883a 	add	r6,r6,r4
  80bdd4:	30c0022e 	bgeu	r6,r3,80bde0 <__muldf3+0x378>
  80bdd8:	00c00074 	movhi	r3,1
  80bddc:	70dd883a 	add	r14,r14,r3
  80bde0:	8826d43a 	srli	r19,r17,16
  80bde4:	8bffffcc 	andi	r15,r17,65535
  80bde8:	7d23383a 	mul	r17,r15,r20
  80bdec:	7949383a 	mul	r4,r15,r5
  80bdf0:	9d29383a 	mul	r20,r19,r20
  80bdf4:	8814d43a 	srli	r10,r17,16
  80bdf8:	3012943a 	slli	r9,r6,16
  80bdfc:	a129883a 	add	r20,r20,r4
  80be00:	633fffcc 	andi	r12,r12,65535
  80be04:	5515883a 	add	r10,r10,r20
  80be08:	3006d43a 	srli	r3,r6,16
  80be0c:	4b13883a 	add	r9,r9,r12
  80be10:	2ccb383a 	mul	r5,r5,r19
  80be14:	5100022e 	bgeu	r10,r4,80be20 <__muldf3+0x3b8>
  80be18:	01000074 	movhi	r4,1
  80be1c:	290b883a 	add	r5,r5,r4
  80be20:	802ad43a 	srli	r21,r16,16
  80be24:	843fffcc 	andi	r16,r16,65535
  80be28:	440d383a 	mul	r6,r8,r16
  80be2c:	4565383a 	mul	r18,r8,r21
  80be30:	8349383a 	mul	r4,r16,r13
  80be34:	500e943a 	slli	r7,r10,16
  80be38:	3010d43a 	srli	r8,r6,16
  80be3c:	5028d43a 	srli	r20,r10,16
  80be40:	2489883a 	add	r4,r4,r18
  80be44:	8abfffcc 	andi	r10,r17,65535
  80be48:	3a95883a 	add	r10,r7,r10
  80be4c:	4119883a 	add	r12,r8,r4
  80be50:	a169883a 	add	r20,r20,r5
  80be54:	1a87883a 	add	r3,r3,r10
  80be58:	6d5b383a 	mul	r13,r13,r21
  80be5c:	6480022e 	bgeu	r12,r18,80be68 <__muldf3+0x400>
  80be60:	01000074 	movhi	r4,1
  80be64:	691b883a 	add	r13,r13,r4
  80be68:	7c25383a 	mul	r18,r15,r16
  80be6c:	7d4b383a 	mul	r5,r15,r21
  80be70:	84cf383a 	mul	r7,r16,r19
  80be74:	901ed43a 	srli	r15,r18,16
  80be78:	6008d43a 	srli	r4,r12,16
  80be7c:	6010943a 	slli	r8,r12,16
  80be80:	394f883a 	add	r7,r7,r5
  80be84:	333fffcc 	andi	r12,r6,65535
  80be88:	79df883a 	add	r15,r15,r7
  80be8c:	235b883a 	add	r13,r4,r13
  80be90:	9d63383a 	mul	r17,r19,r21
  80be94:	4309883a 	add	r4,r8,r12
  80be98:	7940022e 	bgeu	r15,r5,80bea4 <__muldf3+0x43c>
  80be9c:	01400074 	movhi	r5,1
  80bea0:	8963883a 	add	r17,r17,r5
  80bea4:	780a943a 	slli	r5,r15,16
  80bea8:	91bfffcc 	andi	r6,r18,65535
  80beac:	70c7883a 	add	r3,r14,r3
  80beb0:	298d883a 	add	r6,r5,r6
  80beb4:	1a8f803a 	cmpltu	r7,r3,r10
  80beb8:	350b883a 	add	r5,r6,r20
  80bebc:	20c7883a 	add	r3,r4,r3
  80bec0:	3955883a 	add	r10,r7,r5
  80bec4:	1909803a 	cmpltu	r4,r3,r4
  80bec8:	6a91883a 	add	r8,r13,r10
  80becc:	780cd43a 	srli	r6,r15,16
  80bed0:	2219883a 	add	r12,r4,r8
  80bed4:	2d0b803a 	cmpltu	r5,r5,r20
  80bed8:	51cf803a 	cmpltu	r7,r10,r7
  80bedc:	29ceb03a 	or	r7,r5,r7
  80bee0:	4351803a 	cmpltu	r8,r8,r13
  80bee4:	610b803a 	cmpltu	r5,r12,r4
  80bee8:	4148b03a 	or	r4,r8,r5
  80beec:	398f883a 	add	r7,r7,r6
  80bef0:	3909883a 	add	r4,r7,r4
  80bef4:	1810927a 	slli	r8,r3,9
  80bef8:	2449883a 	add	r4,r4,r17
  80befc:	2008927a 	slli	r4,r4,9
  80bf00:	6022d5fa 	srli	r17,r12,23
  80bf04:	1806d5fa 	srli	r3,r3,23
  80bf08:	4252b03a 	or	r9,r8,r9
  80bf0c:	600a927a 	slli	r5,r12,9
  80bf10:	4810c03a 	cmpne	r8,r9,zero
  80bf14:	2462b03a 	or	r17,r4,r17
  80bf18:	40c6b03a 	or	r3,r8,r3
  80bf1c:	8900402c 	andhi	r4,r17,256
  80bf20:	1950b03a 	or	r8,r3,r5
  80bf24:	20000726 	beq	r4,zero,80bf44 <__muldf3+0x4dc>
  80bf28:	4006d07a 	srli	r3,r8,1
  80bf2c:	880497fa 	slli	r2,r17,31
  80bf30:	4200004c 	andi	r8,r8,1
  80bf34:	8822d07a 	srli	r17,r17,1
  80bf38:	1a10b03a 	or	r8,r3,r8
  80bf3c:	1210b03a 	or	r8,r2,r8
  80bf40:	5805883a 	mov	r2,r11
  80bf44:	1140ffc4 	addi	r5,r2,1023
  80bf48:	0140440e 	bge	zero,r5,80c05c <__muldf3+0x5f4>
  80bf4c:	40c001cc 	andi	r3,r8,7
  80bf50:	18000726 	beq	r3,zero,80bf70 <__muldf3+0x508>
  80bf54:	40c003cc 	andi	r3,r8,15
  80bf58:	01000104 	movi	r4,4
  80bf5c:	19000426 	beq	r3,r4,80bf70 <__muldf3+0x508>
  80bf60:	4107883a 	add	r3,r8,r4
  80bf64:	1a11803a 	cmpltu	r8,r3,r8
  80bf68:	8a23883a 	add	r17,r17,r8
  80bf6c:	1811883a 	mov	r8,r3
  80bf70:	88c0402c 	andhi	r3,r17,256
  80bf74:	18000426 	beq	r3,zero,80bf88 <__muldf3+0x520>
  80bf78:	11410004 	addi	r5,r2,1024
  80bf7c:	00bfc034 	movhi	r2,65280
  80bf80:	10bfffc4 	addi	r2,r2,-1
  80bf84:	88a2703a 	and	r17,r17,r2
  80bf88:	0081ff84 	movi	r2,2046
  80bf8c:	117f6416 	blt	r2,r5,80bd20 <__alt_data_end+0xff80bd20>
  80bf90:	8828977a 	slli	r20,r17,29
  80bf94:	4010d0fa 	srli	r8,r8,3
  80bf98:	8822927a 	slli	r17,r17,9
  80bf9c:	2881ffcc 	andi	r2,r5,2047
  80bfa0:	a228b03a 	or	r20,r20,r8
  80bfa4:	880ad33a 	srli	r5,r17,12
  80bfa8:	b02b883a 	mov	r21,r22
  80bfac:	003f0d06 	br	80bbe4 <__alt_data_end+0xff80bbe4>
  80bfb0:	8080022c 	andhi	r2,r16,8
  80bfb4:	10000926 	beq	r2,zero,80bfdc <__muldf3+0x574>
  80bfb8:	8880022c 	andhi	r2,r17,8
  80bfbc:	1000071e 	bne	r2,zero,80bfdc <__muldf3+0x574>
  80bfc0:	00800434 	movhi	r2,16
  80bfc4:	89400234 	orhi	r5,r17,8
  80bfc8:	10bfffc4 	addi	r2,r2,-1
  80bfcc:	b82b883a 	mov	r21,r23
  80bfd0:	288a703a 	and	r5,r5,r2
  80bfd4:	4029883a 	mov	r20,r8
  80bfd8:	003f6806 	br	80bd7c <__alt_data_end+0xff80bd7c>
  80bfdc:	00800434 	movhi	r2,16
  80bfe0:	81400234 	orhi	r5,r16,8
  80bfe4:	10bfffc4 	addi	r2,r2,-1
  80bfe8:	288a703a 	and	r5,r5,r2
  80bfec:	003f6306 	br	80bd7c <__alt_data_end+0xff80bd7c>
  80bff0:	147ff604 	addi	r17,r2,-40
  80bff4:	3462983a 	sll	r17,r6,r17
  80bff8:	0011883a 	mov	r8,zero
  80bffc:	003f4406 	br	80bd10 <__alt_data_end+0xff80bd10>
  80c000:	3009883a 	mov	r4,r6
  80c004:	d9800215 	stw	r6,8(sp)
  80c008:	da400115 	stw	r9,4(sp)
  80c00c:	da800015 	stw	r10,0(sp)
  80c010:	080cc800 	call	80cc80 <__clzsi2>
  80c014:	10800804 	addi	r2,r2,32
  80c018:	da800017 	ldw	r10,0(sp)
  80c01c:	da400117 	ldw	r9,4(sp)
  80c020:	d9800217 	ldw	r6,8(sp)
  80c024:	003f3006 	br	80bce8 <__alt_data_end+0xff80bce8>
  80c028:	143ff604 	addi	r16,r2,-40
  80c02c:	9c20983a 	sll	r16,r19,r16
  80c030:	0029883a 	mov	r20,zero
  80c034:	003f1606 	br	80bc90 <__alt_data_end+0xff80bc90>
  80c038:	d9800215 	stw	r6,8(sp)
  80c03c:	d9c00015 	stw	r7,0(sp)
  80c040:	da400115 	stw	r9,4(sp)
  80c044:	080cc800 	call	80cc80 <__clzsi2>
  80c048:	10800804 	addi	r2,r2,32
  80c04c:	da400117 	ldw	r9,4(sp)
  80c050:	d9c00017 	ldw	r7,0(sp)
  80c054:	d9800217 	ldw	r6,8(sp)
  80c058:	003f0306 	br	80bc68 <__alt_data_end+0xff80bc68>
  80c05c:	00c00044 	movi	r3,1
  80c060:	1947c83a 	sub	r3,r3,r5
  80c064:	00800e04 	movi	r2,56
  80c068:	10feda16 	blt	r2,r3,80bbd4 <__alt_data_end+0xff80bbd4>
  80c06c:	008007c4 	movi	r2,31
  80c070:	10c01b16 	blt	r2,r3,80c0e0 <__muldf3+0x678>
  80c074:	00800804 	movi	r2,32
  80c078:	10c5c83a 	sub	r2,r2,r3
  80c07c:	888a983a 	sll	r5,r17,r2
  80c080:	40c8d83a 	srl	r4,r8,r3
  80c084:	4084983a 	sll	r2,r8,r2
  80c088:	88e2d83a 	srl	r17,r17,r3
  80c08c:	2906b03a 	or	r3,r5,r4
  80c090:	1004c03a 	cmpne	r2,r2,zero
  80c094:	1886b03a 	or	r3,r3,r2
  80c098:	188001cc 	andi	r2,r3,7
  80c09c:	10000726 	beq	r2,zero,80c0bc <__muldf3+0x654>
  80c0a0:	188003cc 	andi	r2,r3,15
  80c0a4:	01000104 	movi	r4,4
  80c0a8:	11000426 	beq	r2,r4,80c0bc <__muldf3+0x654>
  80c0ac:	1805883a 	mov	r2,r3
  80c0b0:	10c00104 	addi	r3,r2,4
  80c0b4:	1885803a 	cmpltu	r2,r3,r2
  80c0b8:	88a3883a 	add	r17,r17,r2
  80c0bc:	8880202c 	andhi	r2,r17,128
  80c0c0:	10001c26 	beq	r2,zero,80c134 <__muldf3+0x6cc>
  80c0c4:	b02b883a 	mov	r21,r22
  80c0c8:	00800044 	movi	r2,1
  80c0cc:	000b883a 	mov	r5,zero
  80c0d0:	0029883a 	mov	r20,zero
  80c0d4:	003ec306 	br	80bbe4 <__alt_data_end+0xff80bbe4>
  80c0d8:	5805883a 	mov	r2,r11
  80c0dc:	003f9906 	br	80bf44 <__alt_data_end+0xff80bf44>
  80c0e0:	00bff844 	movi	r2,-31
  80c0e4:	1145c83a 	sub	r2,r2,r5
  80c0e8:	8888d83a 	srl	r4,r17,r2
  80c0ec:	00800804 	movi	r2,32
  80c0f0:	18801a26 	beq	r3,r2,80c15c <__muldf3+0x6f4>
  80c0f4:	00801004 	movi	r2,64
  80c0f8:	10c5c83a 	sub	r2,r2,r3
  80c0fc:	8884983a 	sll	r2,r17,r2
  80c100:	1204b03a 	or	r2,r2,r8
  80c104:	1004c03a 	cmpne	r2,r2,zero
  80c108:	2084b03a 	or	r2,r4,r2
  80c10c:	144001cc 	andi	r17,r2,7
  80c110:	88000d1e 	bne	r17,zero,80c148 <__muldf3+0x6e0>
  80c114:	000b883a 	mov	r5,zero
  80c118:	1028d0fa 	srli	r20,r2,3
  80c11c:	b02b883a 	mov	r21,r22
  80c120:	0005883a 	mov	r2,zero
  80c124:	a468b03a 	or	r20,r20,r17
  80c128:	003eae06 	br	80bbe4 <__alt_data_end+0xff80bbe4>
  80c12c:	1007883a 	mov	r3,r2
  80c130:	0023883a 	mov	r17,zero
  80c134:	880a927a 	slli	r5,r17,9
  80c138:	1805883a 	mov	r2,r3
  80c13c:	8822977a 	slli	r17,r17,29
  80c140:	280ad33a 	srli	r5,r5,12
  80c144:	003ff406 	br	80c118 <__alt_data_end+0xff80c118>
  80c148:	10c003cc 	andi	r3,r2,15
  80c14c:	01000104 	movi	r4,4
  80c150:	193ff626 	beq	r3,r4,80c12c <__alt_data_end+0xff80c12c>
  80c154:	0023883a 	mov	r17,zero
  80c158:	003fd506 	br	80c0b0 <__alt_data_end+0xff80c0b0>
  80c15c:	0005883a 	mov	r2,zero
  80c160:	003fe706 	br	80c100 <__alt_data_end+0xff80c100>
  80c164:	00800434 	movhi	r2,16
  80c168:	89400234 	orhi	r5,r17,8
  80c16c:	10bfffc4 	addi	r2,r2,-1
  80c170:	b02b883a 	mov	r21,r22
  80c174:	288a703a 	and	r5,r5,r2
  80c178:	4029883a 	mov	r20,r8
  80c17c:	003eff06 	br	80bd7c <__alt_data_end+0xff80bd7c>

0080c180 <__subdf3>:
  80c180:	02000434 	movhi	r8,16
  80c184:	423fffc4 	addi	r8,r8,-1
  80c188:	defffb04 	addi	sp,sp,-20
  80c18c:	2a14703a 	and	r10,r5,r8
  80c190:	3812d53a 	srli	r9,r7,20
  80c194:	3a10703a 	and	r8,r7,r8
  80c198:	2006d77a 	srli	r3,r4,29
  80c19c:	3004d77a 	srli	r2,r6,29
  80c1a0:	dc000015 	stw	r16,0(sp)
  80c1a4:	501490fa 	slli	r10,r10,3
  80c1a8:	2820d53a 	srli	r16,r5,20
  80c1ac:	401090fa 	slli	r8,r8,3
  80c1b0:	dc800215 	stw	r18,8(sp)
  80c1b4:	dc400115 	stw	r17,4(sp)
  80c1b8:	dfc00415 	stw	ra,16(sp)
  80c1bc:	202290fa 	slli	r17,r4,3
  80c1c0:	dcc00315 	stw	r19,12(sp)
  80c1c4:	4a41ffcc 	andi	r9,r9,2047
  80c1c8:	0101ffc4 	movi	r4,2047
  80c1cc:	2824d7fa 	srli	r18,r5,31
  80c1d0:	8401ffcc 	andi	r16,r16,2047
  80c1d4:	50c6b03a 	or	r3,r10,r3
  80c1d8:	380ed7fa 	srli	r7,r7,31
  80c1dc:	408ab03a 	or	r5,r8,r2
  80c1e0:	300c90fa 	slli	r6,r6,3
  80c1e4:	49009626 	beq	r9,r4,80c440 <__subdf3+0x2c0>
  80c1e8:	39c0005c 	xori	r7,r7,1
  80c1ec:	8245c83a 	sub	r2,r16,r9
  80c1f0:	3c807426 	beq	r7,r18,80c3c4 <__subdf3+0x244>
  80c1f4:	0080af0e 	bge	zero,r2,80c4b4 <__subdf3+0x334>
  80c1f8:	48002a1e 	bne	r9,zero,80c2a4 <__subdf3+0x124>
  80c1fc:	2988b03a 	or	r4,r5,r6
  80c200:	20009a1e 	bne	r4,zero,80c46c <__subdf3+0x2ec>
  80c204:	888001cc 	andi	r2,r17,7
  80c208:	10000726 	beq	r2,zero,80c228 <__subdf3+0xa8>
  80c20c:	888003cc 	andi	r2,r17,15
  80c210:	01000104 	movi	r4,4
  80c214:	11000426 	beq	r2,r4,80c228 <__subdf3+0xa8>
  80c218:	890b883a 	add	r5,r17,r4
  80c21c:	2c63803a 	cmpltu	r17,r5,r17
  80c220:	1c47883a 	add	r3,r3,r17
  80c224:	2823883a 	mov	r17,r5
  80c228:	1880202c 	andhi	r2,r3,128
  80c22c:	10005926 	beq	r2,zero,80c394 <__subdf3+0x214>
  80c230:	84000044 	addi	r16,r16,1
  80c234:	0081ffc4 	movi	r2,2047
  80c238:	8080be26 	beq	r16,r2,80c534 <__subdf3+0x3b4>
  80c23c:	017fe034 	movhi	r5,65408
  80c240:	297fffc4 	addi	r5,r5,-1
  80c244:	1946703a 	and	r3,r3,r5
  80c248:	1804977a 	slli	r2,r3,29
  80c24c:	1806927a 	slli	r3,r3,9
  80c250:	8822d0fa 	srli	r17,r17,3
  80c254:	8401ffcc 	andi	r16,r16,2047
  80c258:	180ad33a 	srli	r5,r3,12
  80c25c:	9100004c 	andi	r4,r18,1
  80c260:	1444b03a 	or	r2,r2,r17
  80c264:	80c1ffcc 	andi	r3,r16,2047
  80c268:	1820953a 	slli	r16,r3,20
  80c26c:	20c03fcc 	andi	r3,r4,255
  80c270:	180897fa 	slli	r4,r3,31
  80c274:	00c00434 	movhi	r3,16
  80c278:	18ffffc4 	addi	r3,r3,-1
  80c27c:	28c6703a 	and	r3,r5,r3
  80c280:	1c06b03a 	or	r3,r3,r16
  80c284:	1906b03a 	or	r3,r3,r4
  80c288:	dfc00417 	ldw	ra,16(sp)
  80c28c:	dcc00317 	ldw	r19,12(sp)
  80c290:	dc800217 	ldw	r18,8(sp)
  80c294:	dc400117 	ldw	r17,4(sp)
  80c298:	dc000017 	ldw	r16,0(sp)
  80c29c:	dec00504 	addi	sp,sp,20
  80c2a0:	f800283a 	ret
  80c2a4:	0101ffc4 	movi	r4,2047
  80c2a8:	813fd626 	beq	r16,r4,80c204 <__alt_data_end+0xff80c204>
  80c2ac:	29402034 	orhi	r5,r5,128
  80c2b0:	01000e04 	movi	r4,56
  80c2b4:	2080a316 	blt	r4,r2,80c544 <__subdf3+0x3c4>
  80c2b8:	010007c4 	movi	r4,31
  80c2bc:	2080c616 	blt	r4,r2,80c5d8 <__subdf3+0x458>
  80c2c0:	01000804 	movi	r4,32
  80c2c4:	2089c83a 	sub	r4,r4,r2
  80c2c8:	2910983a 	sll	r8,r5,r4
  80c2cc:	308ed83a 	srl	r7,r6,r2
  80c2d0:	3108983a 	sll	r4,r6,r4
  80c2d4:	2884d83a 	srl	r2,r5,r2
  80c2d8:	41ccb03a 	or	r6,r8,r7
  80c2dc:	2008c03a 	cmpne	r4,r4,zero
  80c2e0:	310cb03a 	or	r6,r6,r4
  80c2e4:	898dc83a 	sub	r6,r17,r6
  80c2e8:	89a3803a 	cmpltu	r17,r17,r6
  80c2ec:	1887c83a 	sub	r3,r3,r2
  80c2f0:	1c47c83a 	sub	r3,r3,r17
  80c2f4:	3023883a 	mov	r17,r6
  80c2f8:	1880202c 	andhi	r2,r3,128
  80c2fc:	10002326 	beq	r2,zero,80c38c <__subdf3+0x20c>
  80c300:	04c02034 	movhi	r19,128
  80c304:	9cffffc4 	addi	r19,r19,-1
  80c308:	1ce6703a 	and	r19,r3,r19
  80c30c:	98007a26 	beq	r19,zero,80c4f8 <__subdf3+0x378>
  80c310:	9809883a 	mov	r4,r19
  80c314:	080cc800 	call	80cc80 <__clzsi2>
  80c318:	113ffe04 	addi	r4,r2,-8
  80c31c:	00c007c4 	movi	r3,31
  80c320:	19007b16 	blt	r3,r4,80c510 <__subdf3+0x390>
  80c324:	00800804 	movi	r2,32
  80c328:	1105c83a 	sub	r2,r2,r4
  80c32c:	8884d83a 	srl	r2,r17,r2
  80c330:	9906983a 	sll	r3,r19,r4
  80c334:	8922983a 	sll	r17,r17,r4
  80c338:	10c4b03a 	or	r2,r2,r3
  80c33c:	24007816 	blt	r4,r16,80c520 <__subdf3+0x3a0>
  80c340:	2421c83a 	sub	r16,r4,r16
  80c344:	80c00044 	addi	r3,r16,1
  80c348:	010007c4 	movi	r4,31
  80c34c:	20c09516 	blt	r4,r3,80c5a4 <__subdf3+0x424>
  80c350:	01400804 	movi	r5,32
  80c354:	28cbc83a 	sub	r5,r5,r3
  80c358:	88c8d83a 	srl	r4,r17,r3
  80c35c:	8962983a 	sll	r17,r17,r5
  80c360:	114a983a 	sll	r5,r2,r5
  80c364:	10c6d83a 	srl	r3,r2,r3
  80c368:	8804c03a 	cmpne	r2,r17,zero
  80c36c:	290ab03a 	or	r5,r5,r4
  80c370:	28a2b03a 	or	r17,r5,r2
  80c374:	0021883a 	mov	r16,zero
  80c378:	003fa206 	br	80c204 <__alt_data_end+0xff80c204>
  80c37c:	2090b03a 	or	r8,r4,r2
  80c380:	40018e26 	beq	r8,zero,80c9bc <__subdf3+0x83c>
  80c384:	1007883a 	mov	r3,r2
  80c388:	2023883a 	mov	r17,r4
  80c38c:	888001cc 	andi	r2,r17,7
  80c390:	103f9e1e 	bne	r2,zero,80c20c <__alt_data_end+0xff80c20c>
  80c394:	1804977a 	slli	r2,r3,29
  80c398:	8822d0fa 	srli	r17,r17,3
  80c39c:	1810d0fa 	srli	r8,r3,3
  80c3a0:	9100004c 	andi	r4,r18,1
  80c3a4:	1444b03a 	or	r2,r2,r17
  80c3a8:	00c1ffc4 	movi	r3,2047
  80c3ac:	80c02826 	beq	r16,r3,80c450 <__subdf3+0x2d0>
  80c3b0:	01400434 	movhi	r5,16
  80c3b4:	297fffc4 	addi	r5,r5,-1
  80c3b8:	80e0703a 	and	r16,r16,r3
  80c3bc:	414a703a 	and	r5,r8,r5
  80c3c0:	003fa806 	br	80c264 <__alt_data_end+0xff80c264>
  80c3c4:	0080630e 	bge	zero,r2,80c554 <__subdf3+0x3d4>
  80c3c8:	48003026 	beq	r9,zero,80c48c <__subdf3+0x30c>
  80c3cc:	0101ffc4 	movi	r4,2047
  80c3d0:	813f8c26 	beq	r16,r4,80c204 <__alt_data_end+0xff80c204>
  80c3d4:	29402034 	orhi	r5,r5,128
  80c3d8:	01000e04 	movi	r4,56
  80c3dc:	2080a90e 	bge	r4,r2,80c684 <__subdf3+0x504>
  80c3e0:	298cb03a 	or	r6,r5,r6
  80c3e4:	3012c03a 	cmpne	r9,r6,zero
  80c3e8:	0005883a 	mov	r2,zero
  80c3ec:	4c53883a 	add	r9,r9,r17
  80c3f0:	4c63803a 	cmpltu	r17,r9,r17
  80c3f4:	10c7883a 	add	r3,r2,r3
  80c3f8:	88c7883a 	add	r3,r17,r3
  80c3fc:	4823883a 	mov	r17,r9
  80c400:	1880202c 	andhi	r2,r3,128
  80c404:	1000d026 	beq	r2,zero,80c748 <__subdf3+0x5c8>
  80c408:	84000044 	addi	r16,r16,1
  80c40c:	0081ffc4 	movi	r2,2047
  80c410:	8080fe26 	beq	r16,r2,80c80c <__subdf3+0x68c>
  80c414:	00bfe034 	movhi	r2,65408
  80c418:	10bfffc4 	addi	r2,r2,-1
  80c41c:	1886703a 	and	r3,r3,r2
  80c420:	880ad07a 	srli	r5,r17,1
  80c424:	180497fa 	slli	r2,r3,31
  80c428:	8900004c 	andi	r4,r17,1
  80c42c:	2922b03a 	or	r17,r5,r4
  80c430:	1806d07a 	srli	r3,r3,1
  80c434:	1462b03a 	or	r17,r2,r17
  80c438:	3825883a 	mov	r18,r7
  80c43c:	003f7106 	br	80c204 <__alt_data_end+0xff80c204>
  80c440:	2984b03a 	or	r2,r5,r6
  80c444:	103f6826 	beq	r2,zero,80c1e8 <__alt_data_end+0xff80c1e8>
  80c448:	39c03fcc 	andi	r7,r7,255
  80c44c:	003f6706 	br	80c1ec <__alt_data_end+0xff80c1ec>
  80c450:	4086b03a 	or	r3,r8,r2
  80c454:	18015226 	beq	r3,zero,80c9a0 <__subdf3+0x820>
  80c458:	00c00434 	movhi	r3,16
  80c45c:	41400234 	orhi	r5,r8,8
  80c460:	18ffffc4 	addi	r3,r3,-1
  80c464:	28ca703a 	and	r5,r5,r3
  80c468:	003f7e06 	br	80c264 <__alt_data_end+0xff80c264>
  80c46c:	10bfffc4 	addi	r2,r2,-1
  80c470:	1000491e 	bne	r2,zero,80c598 <__subdf3+0x418>
  80c474:	898fc83a 	sub	r7,r17,r6
  80c478:	89e3803a 	cmpltu	r17,r17,r7
  80c47c:	1947c83a 	sub	r3,r3,r5
  80c480:	1c47c83a 	sub	r3,r3,r17
  80c484:	3823883a 	mov	r17,r7
  80c488:	003f9b06 	br	80c2f8 <__alt_data_end+0xff80c2f8>
  80c48c:	2988b03a 	or	r4,r5,r6
  80c490:	203f5c26 	beq	r4,zero,80c204 <__alt_data_end+0xff80c204>
  80c494:	10bfffc4 	addi	r2,r2,-1
  80c498:	1000931e 	bne	r2,zero,80c6e8 <__subdf3+0x568>
  80c49c:	898d883a 	add	r6,r17,r6
  80c4a0:	3463803a 	cmpltu	r17,r6,r17
  80c4a4:	1947883a 	add	r3,r3,r5
  80c4a8:	88c7883a 	add	r3,r17,r3
  80c4ac:	3023883a 	mov	r17,r6
  80c4b0:	003fd306 	br	80c400 <__alt_data_end+0xff80c400>
  80c4b4:	1000541e 	bne	r2,zero,80c608 <__subdf3+0x488>
  80c4b8:	80800044 	addi	r2,r16,1
  80c4bc:	1081ffcc 	andi	r2,r2,2047
  80c4c0:	01000044 	movi	r4,1
  80c4c4:	2080a20e 	bge	r4,r2,80c750 <__subdf3+0x5d0>
  80c4c8:	8989c83a 	sub	r4,r17,r6
  80c4cc:	8905803a 	cmpltu	r2,r17,r4
  80c4d0:	1967c83a 	sub	r19,r3,r5
  80c4d4:	98a7c83a 	sub	r19,r19,r2
  80c4d8:	9880202c 	andhi	r2,r19,128
  80c4dc:	10006326 	beq	r2,zero,80c66c <__subdf3+0x4ec>
  80c4e0:	3463c83a 	sub	r17,r6,r17
  80c4e4:	28c7c83a 	sub	r3,r5,r3
  80c4e8:	344d803a 	cmpltu	r6,r6,r17
  80c4ec:	19a7c83a 	sub	r19,r3,r6
  80c4f0:	3825883a 	mov	r18,r7
  80c4f4:	983f861e 	bne	r19,zero,80c310 <__alt_data_end+0xff80c310>
  80c4f8:	8809883a 	mov	r4,r17
  80c4fc:	080cc800 	call	80cc80 <__clzsi2>
  80c500:	10800804 	addi	r2,r2,32
  80c504:	113ffe04 	addi	r4,r2,-8
  80c508:	00c007c4 	movi	r3,31
  80c50c:	193f850e 	bge	r3,r4,80c324 <__alt_data_end+0xff80c324>
  80c510:	10bff604 	addi	r2,r2,-40
  80c514:	8884983a 	sll	r2,r17,r2
  80c518:	0023883a 	mov	r17,zero
  80c51c:	243f880e 	bge	r4,r16,80c340 <__alt_data_end+0xff80c340>
  80c520:	00ffe034 	movhi	r3,65408
  80c524:	18ffffc4 	addi	r3,r3,-1
  80c528:	8121c83a 	sub	r16,r16,r4
  80c52c:	10c6703a 	and	r3,r2,r3
  80c530:	003f3406 	br	80c204 <__alt_data_end+0xff80c204>
  80c534:	9100004c 	andi	r4,r18,1
  80c538:	000b883a 	mov	r5,zero
  80c53c:	0005883a 	mov	r2,zero
  80c540:	003f4806 	br	80c264 <__alt_data_end+0xff80c264>
  80c544:	298cb03a 	or	r6,r5,r6
  80c548:	300cc03a 	cmpne	r6,r6,zero
  80c54c:	0005883a 	mov	r2,zero
  80c550:	003f6406 	br	80c2e4 <__alt_data_end+0xff80c2e4>
  80c554:	10009a1e 	bne	r2,zero,80c7c0 <__subdf3+0x640>
  80c558:	82400044 	addi	r9,r16,1
  80c55c:	4881ffcc 	andi	r2,r9,2047
  80c560:	02800044 	movi	r10,1
  80c564:	5080670e 	bge	r10,r2,80c704 <__subdf3+0x584>
  80c568:	0081ffc4 	movi	r2,2047
  80c56c:	4880af26 	beq	r9,r2,80c82c <__subdf3+0x6ac>
  80c570:	898d883a 	add	r6,r17,r6
  80c574:	1945883a 	add	r2,r3,r5
  80c578:	3447803a 	cmpltu	r3,r6,r17
  80c57c:	1887883a 	add	r3,r3,r2
  80c580:	182297fa 	slli	r17,r3,31
  80c584:	300cd07a 	srli	r6,r6,1
  80c588:	1806d07a 	srli	r3,r3,1
  80c58c:	4821883a 	mov	r16,r9
  80c590:	89a2b03a 	or	r17,r17,r6
  80c594:	003f1b06 	br	80c204 <__alt_data_end+0xff80c204>
  80c598:	0101ffc4 	movi	r4,2047
  80c59c:	813f441e 	bne	r16,r4,80c2b0 <__alt_data_end+0xff80c2b0>
  80c5a0:	003f1806 	br	80c204 <__alt_data_end+0xff80c204>
  80c5a4:	843ff844 	addi	r16,r16,-31
  80c5a8:	01400804 	movi	r5,32
  80c5ac:	1408d83a 	srl	r4,r2,r16
  80c5b0:	19405026 	beq	r3,r5,80c6f4 <__subdf3+0x574>
  80c5b4:	01401004 	movi	r5,64
  80c5b8:	28c7c83a 	sub	r3,r5,r3
  80c5bc:	10c4983a 	sll	r2,r2,r3
  80c5c0:	88a2b03a 	or	r17,r17,r2
  80c5c4:	8822c03a 	cmpne	r17,r17,zero
  80c5c8:	2462b03a 	or	r17,r4,r17
  80c5cc:	0007883a 	mov	r3,zero
  80c5d0:	0021883a 	mov	r16,zero
  80c5d4:	003f6d06 	br	80c38c <__alt_data_end+0xff80c38c>
  80c5d8:	11fff804 	addi	r7,r2,-32
  80c5dc:	01000804 	movi	r4,32
  80c5e0:	29ced83a 	srl	r7,r5,r7
  80c5e4:	11004526 	beq	r2,r4,80c6fc <__subdf3+0x57c>
  80c5e8:	01001004 	movi	r4,64
  80c5ec:	2089c83a 	sub	r4,r4,r2
  80c5f0:	2904983a 	sll	r2,r5,r4
  80c5f4:	118cb03a 	or	r6,r2,r6
  80c5f8:	300cc03a 	cmpne	r6,r6,zero
  80c5fc:	398cb03a 	or	r6,r7,r6
  80c600:	0005883a 	mov	r2,zero
  80c604:	003f3706 	br	80c2e4 <__alt_data_end+0xff80c2e4>
  80c608:	80002a26 	beq	r16,zero,80c6b4 <__subdf3+0x534>
  80c60c:	0101ffc4 	movi	r4,2047
  80c610:	49006626 	beq	r9,r4,80c7ac <__subdf3+0x62c>
  80c614:	0085c83a 	sub	r2,zero,r2
  80c618:	18c02034 	orhi	r3,r3,128
  80c61c:	01000e04 	movi	r4,56
  80c620:	20807e16 	blt	r4,r2,80c81c <__subdf3+0x69c>
  80c624:	010007c4 	movi	r4,31
  80c628:	2080e716 	blt	r4,r2,80c9c8 <__subdf3+0x848>
  80c62c:	01000804 	movi	r4,32
  80c630:	2089c83a 	sub	r4,r4,r2
  80c634:	1914983a 	sll	r10,r3,r4
  80c638:	8890d83a 	srl	r8,r17,r2
  80c63c:	8908983a 	sll	r4,r17,r4
  80c640:	1884d83a 	srl	r2,r3,r2
  80c644:	5222b03a 	or	r17,r10,r8
  80c648:	2006c03a 	cmpne	r3,r4,zero
  80c64c:	88e2b03a 	or	r17,r17,r3
  80c650:	3463c83a 	sub	r17,r6,r17
  80c654:	2885c83a 	sub	r2,r5,r2
  80c658:	344d803a 	cmpltu	r6,r6,r17
  80c65c:	1187c83a 	sub	r3,r2,r6
  80c660:	4821883a 	mov	r16,r9
  80c664:	3825883a 	mov	r18,r7
  80c668:	003f2306 	br	80c2f8 <__alt_data_end+0xff80c2f8>
  80c66c:	24d0b03a 	or	r8,r4,r19
  80c670:	40001b1e 	bne	r8,zero,80c6e0 <__subdf3+0x560>
  80c674:	0005883a 	mov	r2,zero
  80c678:	0009883a 	mov	r4,zero
  80c67c:	0021883a 	mov	r16,zero
  80c680:	003f4906 	br	80c3a8 <__alt_data_end+0xff80c3a8>
  80c684:	010007c4 	movi	r4,31
  80c688:	20803a16 	blt	r4,r2,80c774 <__subdf3+0x5f4>
  80c68c:	01000804 	movi	r4,32
  80c690:	2089c83a 	sub	r4,r4,r2
  80c694:	2912983a 	sll	r9,r5,r4
  80c698:	3090d83a 	srl	r8,r6,r2
  80c69c:	3108983a 	sll	r4,r6,r4
  80c6a0:	2884d83a 	srl	r2,r5,r2
  80c6a4:	4a12b03a 	or	r9,r9,r8
  80c6a8:	2008c03a 	cmpne	r4,r4,zero
  80c6ac:	4912b03a 	or	r9,r9,r4
  80c6b0:	003f4e06 	br	80c3ec <__alt_data_end+0xff80c3ec>
  80c6b4:	1c48b03a 	or	r4,r3,r17
  80c6b8:	20003c26 	beq	r4,zero,80c7ac <__subdf3+0x62c>
  80c6bc:	0084303a 	nor	r2,zero,r2
  80c6c0:	1000381e 	bne	r2,zero,80c7a4 <__subdf3+0x624>
  80c6c4:	3463c83a 	sub	r17,r6,r17
  80c6c8:	28c5c83a 	sub	r2,r5,r3
  80c6cc:	344d803a 	cmpltu	r6,r6,r17
  80c6d0:	1187c83a 	sub	r3,r2,r6
  80c6d4:	4821883a 	mov	r16,r9
  80c6d8:	3825883a 	mov	r18,r7
  80c6dc:	003f0606 	br	80c2f8 <__alt_data_end+0xff80c2f8>
  80c6e0:	2023883a 	mov	r17,r4
  80c6e4:	003f0906 	br	80c30c <__alt_data_end+0xff80c30c>
  80c6e8:	0101ffc4 	movi	r4,2047
  80c6ec:	813f3a1e 	bne	r16,r4,80c3d8 <__alt_data_end+0xff80c3d8>
  80c6f0:	003ec406 	br	80c204 <__alt_data_end+0xff80c204>
  80c6f4:	0005883a 	mov	r2,zero
  80c6f8:	003fb106 	br	80c5c0 <__alt_data_end+0xff80c5c0>
  80c6fc:	0005883a 	mov	r2,zero
  80c700:	003fbc06 	br	80c5f4 <__alt_data_end+0xff80c5f4>
  80c704:	1c44b03a 	or	r2,r3,r17
  80c708:	80008e1e 	bne	r16,zero,80c944 <__subdf3+0x7c4>
  80c70c:	1000c826 	beq	r2,zero,80ca30 <__subdf3+0x8b0>
  80c710:	2984b03a 	or	r2,r5,r6
  80c714:	103ebb26 	beq	r2,zero,80c204 <__alt_data_end+0xff80c204>
  80c718:	8989883a 	add	r4,r17,r6
  80c71c:	1945883a 	add	r2,r3,r5
  80c720:	2447803a 	cmpltu	r3,r4,r17
  80c724:	1887883a 	add	r3,r3,r2
  80c728:	1880202c 	andhi	r2,r3,128
  80c72c:	2023883a 	mov	r17,r4
  80c730:	103f1626 	beq	r2,zero,80c38c <__alt_data_end+0xff80c38c>
  80c734:	00bfe034 	movhi	r2,65408
  80c738:	10bfffc4 	addi	r2,r2,-1
  80c73c:	5021883a 	mov	r16,r10
  80c740:	1886703a 	and	r3,r3,r2
  80c744:	003eaf06 	br	80c204 <__alt_data_end+0xff80c204>
  80c748:	3825883a 	mov	r18,r7
  80c74c:	003f0f06 	br	80c38c <__alt_data_end+0xff80c38c>
  80c750:	1c44b03a 	or	r2,r3,r17
  80c754:	8000251e 	bne	r16,zero,80c7ec <__subdf3+0x66c>
  80c758:	1000661e 	bne	r2,zero,80c8f4 <__subdf3+0x774>
  80c75c:	2990b03a 	or	r8,r5,r6
  80c760:	40009626 	beq	r8,zero,80c9bc <__subdf3+0x83c>
  80c764:	2807883a 	mov	r3,r5
  80c768:	3023883a 	mov	r17,r6
  80c76c:	3825883a 	mov	r18,r7
  80c770:	003ea406 	br	80c204 <__alt_data_end+0xff80c204>
  80c774:	127ff804 	addi	r9,r2,-32
  80c778:	01000804 	movi	r4,32
  80c77c:	2a52d83a 	srl	r9,r5,r9
  80c780:	11008c26 	beq	r2,r4,80c9b4 <__subdf3+0x834>
  80c784:	01001004 	movi	r4,64
  80c788:	2085c83a 	sub	r2,r4,r2
  80c78c:	2884983a 	sll	r2,r5,r2
  80c790:	118cb03a 	or	r6,r2,r6
  80c794:	300cc03a 	cmpne	r6,r6,zero
  80c798:	4992b03a 	or	r9,r9,r6
  80c79c:	0005883a 	mov	r2,zero
  80c7a0:	003f1206 	br	80c3ec <__alt_data_end+0xff80c3ec>
  80c7a4:	0101ffc4 	movi	r4,2047
  80c7a8:	493f9c1e 	bne	r9,r4,80c61c <__alt_data_end+0xff80c61c>
  80c7ac:	2807883a 	mov	r3,r5
  80c7b0:	3023883a 	mov	r17,r6
  80c7b4:	4821883a 	mov	r16,r9
  80c7b8:	3825883a 	mov	r18,r7
  80c7bc:	003e9106 	br	80c204 <__alt_data_end+0xff80c204>
  80c7c0:	80001f1e 	bne	r16,zero,80c840 <__subdf3+0x6c0>
  80c7c4:	1c48b03a 	or	r4,r3,r17
  80c7c8:	20005a26 	beq	r4,zero,80c934 <__subdf3+0x7b4>
  80c7cc:	0084303a 	nor	r2,zero,r2
  80c7d0:	1000561e 	bne	r2,zero,80c92c <__subdf3+0x7ac>
  80c7d4:	89a3883a 	add	r17,r17,r6
  80c7d8:	1945883a 	add	r2,r3,r5
  80c7dc:	898d803a 	cmpltu	r6,r17,r6
  80c7e0:	3087883a 	add	r3,r6,r2
  80c7e4:	4821883a 	mov	r16,r9
  80c7e8:	003f0506 	br	80c400 <__alt_data_end+0xff80c400>
  80c7ec:	10002b1e 	bne	r2,zero,80c89c <__subdf3+0x71c>
  80c7f0:	2984b03a 	or	r2,r5,r6
  80c7f4:	10008026 	beq	r2,zero,80c9f8 <__subdf3+0x878>
  80c7f8:	2807883a 	mov	r3,r5
  80c7fc:	3023883a 	mov	r17,r6
  80c800:	3825883a 	mov	r18,r7
  80c804:	0401ffc4 	movi	r16,2047
  80c808:	003e7e06 	br	80c204 <__alt_data_end+0xff80c204>
  80c80c:	3809883a 	mov	r4,r7
  80c810:	0011883a 	mov	r8,zero
  80c814:	0005883a 	mov	r2,zero
  80c818:	003ee306 	br	80c3a8 <__alt_data_end+0xff80c3a8>
  80c81c:	1c62b03a 	or	r17,r3,r17
  80c820:	8822c03a 	cmpne	r17,r17,zero
  80c824:	0005883a 	mov	r2,zero
  80c828:	003f8906 	br	80c650 <__alt_data_end+0xff80c650>
  80c82c:	3809883a 	mov	r4,r7
  80c830:	4821883a 	mov	r16,r9
  80c834:	0011883a 	mov	r8,zero
  80c838:	0005883a 	mov	r2,zero
  80c83c:	003eda06 	br	80c3a8 <__alt_data_end+0xff80c3a8>
  80c840:	0101ffc4 	movi	r4,2047
  80c844:	49003b26 	beq	r9,r4,80c934 <__subdf3+0x7b4>
  80c848:	0085c83a 	sub	r2,zero,r2
  80c84c:	18c02034 	orhi	r3,r3,128
  80c850:	01000e04 	movi	r4,56
  80c854:	20806e16 	blt	r4,r2,80ca10 <__subdf3+0x890>
  80c858:	010007c4 	movi	r4,31
  80c85c:	20807716 	blt	r4,r2,80ca3c <__subdf3+0x8bc>
  80c860:	01000804 	movi	r4,32
  80c864:	2089c83a 	sub	r4,r4,r2
  80c868:	1914983a 	sll	r10,r3,r4
  80c86c:	8890d83a 	srl	r8,r17,r2
  80c870:	8908983a 	sll	r4,r17,r4
  80c874:	1884d83a 	srl	r2,r3,r2
  80c878:	5222b03a 	or	r17,r10,r8
  80c87c:	2006c03a 	cmpne	r3,r4,zero
  80c880:	88e2b03a 	or	r17,r17,r3
  80c884:	89a3883a 	add	r17,r17,r6
  80c888:	1145883a 	add	r2,r2,r5
  80c88c:	898d803a 	cmpltu	r6,r17,r6
  80c890:	3087883a 	add	r3,r6,r2
  80c894:	4821883a 	mov	r16,r9
  80c898:	003ed906 	br	80c400 <__alt_data_end+0xff80c400>
  80c89c:	2984b03a 	or	r2,r5,r6
  80c8a0:	10004226 	beq	r2,zero,80c9ac <__subdf3+0x82c>
  80c8a4:	1808d0fa 	srli	r4,r3,3
  80c8a8:	8822d0fa 	srli	r17,r17,3
  80c8ac:	1806977a 	slli	r3,r3,29
  80c8b0:	2080022c 	andhi	r2,r4,8
  80c8b4:	1c62b03a 	or	r17,r3,r17
  80c8b8:	10000826 	beq	r2,zero,80c8dc <__subdf3+0x75c>
  80c8bc:	2812d0fa 	srli	r9,r5,3
  80c8c0:	4880022c 	andhi	r2,r9,8
  80c8c4:	1000051e 	bne	r2,zero,80c8dc <__subdf3+0x75c>
  80c8c8:	300cd0fa 	srli	r6,r6,3
  80c8cc:	2804977a 	slli	r2,r5,29
  80c8d0:	4809883a 	mov	r4,r9
  80c8d4:	3825883a 	mov	r18,r7
  80c8d8:	11a2b03a 	or	r17,r2,r6
  80c8dc:	8806d77a 	srli	r3,r17,29
  80c8e0:	200890fa 	slli	r4,r4,3
  80c8e4:	882290fa 	slli	r17,r17,3
  80c8e8:	0401ffc4 	movi	r16,2047
  80c8ec:	1906b03a 	or	r3,r3,r4
  80c8f0:	003e4406 	br	80c204 <__alt_data_end+0xff80c204>
  80c8f4:	2984b03a 	or	r2,r5,r6
  80c8f8:	103e4226 	beq	r2,zero,80c204 <__alt_data_end+0xff80c204>
  80c8fc:	8989c83a 	sub	r4,r17,r6
  80c900:	8911803a 	cmpltu	r8,r17,r4
  80c904:	1945c83a 	sub	r2,r3,r5
  80c908:	1205c83a 	sub	r2,r2,r8
  80c90c:	1200202c 	andhi	r8,r2,128
  80c910:	403e9a26 	beq	r8,zero,80c37c <__alt_data_end+0xff80c37c>
  80c914:	3463c83a 	sub	r17,r6,r17
  80c918:	28c5c83a 	sub	r2,r5,r3
  80c91c:	344d803a 	cmpltu	r6,r6,r17
  80c920:	1187c83a 	sub	r3,r2,r6
  80c924:	3825883a 	mov	r18,r7
  80c928:	003e3606 	br	80c204 <__alt_data_end+0xff80c204>
  80c92c:	0101ffc4 	movi	r4,2047
  80c930:	493fc71e 	bne	r9,r4,80c850 <__alt_data_end+0xff80c850>
  80c934:	2807883a 	mov	r3,r5
  80c938:	3023883a 	mov	r17,r6
  80c93c:	4821883a 	mov	r16,r9
  80c940:	003e3006 	br	80c204 <__alt_data_end+0xff80c204>
  80c944:	10003626 	beq	r2,zero,80ca20 <__subdf3+0x8a0>
  80c948:	2984b03a 	or	r2,r5,r6
  80c94c:	10001726 	beq	r2,zero,80c9ac <__subdf3+0x82c>
  80c950:	1808d0fa 	srli	r4,r3,3
  80c954:	8822d0fa 	srli	r17,r17,3
  80c958:	1806977a 	slli	r3,r3,29
  80c95c:	2080022c 	andhi	r2,r4,8
  80c960:	1c62b03a 	or	r17,r3,r17
  80c964:	10000726 	beq	r2,zero,80c984 <__subdf3+0x804>
  80c968:	2812d0fa 	srli	r9,r5,3
  80c96c:	4880022c 	andhi	r2,r9,8
  80c970:	1000041e 	bne	r2,zero,80c984 <__subdf3+0x804>
  80c974:	300cd0fa 	srli	r6,r6,3
  80c978:	2804977a 	slli	r2,r5,29
  80c97c:	4809883a 	mov	r4,r9
  80c980:	11a2b03a 	or	r17,r2,r6
  80c984:	8806d77a 	srli	r3,r17,29
  80c988:	200890fa 	slli	r4,r4,3
  80c98c:	882290fa 	slli	r17,r17,3
  80c990:	3825883a 	mov	r18,r7
  80c994:	1906b03a 	or	r3,r3,r4
  80c998:	0401ffc4 	movi	r16,2047
  80c99c:	003e1906 	br	80c204 <__alt_data_end+0xff80c204>
  80c9a0:	000b883a 	mov	r5,zero
  80c9a4:	0005883a 	mov	r2,zero
  80c9a8:	003e2e06 	br	80c264 <__alt_data_end+0xff80c264>
  80c9ac:	0401ffc4 	movi	r16,2047
  80c9b0:	003e1406 	br	80c204 <__alt_data_end+0xff80c204>
  80c9b4:	0005883a 	mov	r2,zero
  80c9b8:	003f7506 	br	80c790 <__alt_data_end+0xff80c790>
  80c9bc:	0005883a 	mov	r2,zero
  80c9c0:	0009883a 	mov	r4,zero
  80c9c4:	003e7806 	br	80c3a8 <__alt_data_end+0xff80c3a8>
  80c9c8:	123ff804 	addi	r8,r2,-32
  80c9cc:	01000804 	movi	r4,32
  80c9d0:	1a10d83a 	srl	r8,r3,r8
  80c9d4:	11002526 	beq	r2,r4,80ca6c <__subdf3+0x8ec>
  80c9d8:	01001004 	movi	r4,64
  80c9dc:	2085c83a 	sub	r2,r4,r2
  80c9e0:	1884983a 	sll	r2,r3,r2
  80c9e4:	1444b03a 	or	r2,r2,r17
  80c9e8:	1004c03a 	cmpne	r2,r2,zero
  80c9ec:	40a2b03a 	or	r17,r8,r2
  80c9f0:	0005883a 	mov	r2,zero
  80c9f4:	003f1606 	br	80c650 <__alt_data_end+0xff80c650>
  80c9f8:	02000434 	movhi	r8,16
  80c9fc:	0009883a 	mov	r4,zero
  80ca00:	423fffc4 	addi	r8,r8,-1
  80ca04:	00bfffc4 	movi	r2,-1
  80ca08:	0401ffc4 	movi	r16,2047
  80ca0c:	003e6606 	br	80c3a8 <__alt_data_end+0xff80c3a8>
  80ca10:	1c62b03a 	or	r17,r3,r17
  80ca14:	8822c03a 	cmpne	r17,r17,zero
  80ca18:	0005883a 	mov	r2,zero
  80ca1c:	003f9906 	br	80c884 <__alt_data_end+0xff80c884>
  80ca20:	2807883a 	mov	r3,r5
  80ca24:	3023883a 	mov	r17,r6
  80ca28:	0401ffc4 	movi	r16,2047
  80ca2c:	003df506 	br	80c204 <__alt_data_end+0xff80c204>
  80ca30:	2807883a 	mov	r3,r5
  80ca34:	3023883a 	mov	r17,r6
  80ca38:	003df206 	br	80c204 <__alt_data_end+0xff80c204>
  80ca3c:	123ff804 	addi	r8,r2,-32
  80ca40:	01000804 	movi	r4,32
  80ca44:	1a10d83a 	srl	r8,r3,r8
  80ca48:	11000a26 	beq	r2,r4,80ca74 <__subdf3+0x8f4>
  80ca4c:	01001004 	movi	r4,64
  80ca50:	2085c83a 	sub	r2,r4,r2
  80ca54:	1884983a 	sll	r2,r3,r2
  80ca58:	1444b03a 	or	r2,r2,r17
  80ca5c:	1004c03a 	cmpne	r2,r2,zero
  80ca60:	40a2b03a 	or	r17,r8,r2
  80ca64:	0005883a 	mov	r2,zero
  80ca68:	003f8606 	br	80c884 <__alt_data_end+0xff80c884>
  80ca6c:	0005883a 	mov	r2,zero
  80ca70:	003fdc06 	br	80c9e4 <__alt_data_end+0xff80c9e4>
  80ca74:	0005883a 	mov	r2,zero
  80ca78:	003ff706 	br	80ca58 <__alt_data_end+0xff80ca58>

0080ca7c <__fixdfsi>:
  80ca7c:	280cd53a 	srli	r6,r5,20
  80ca80:	00c00434 	movhi	r3,16
  80ca84:	18ffffc4 	addi	r3,r3,-1
  80ca88:	3181ffcc 	andi	r6,r6,2047
  80ca8c:	01c0ff84 	movi	r7,1022
  80ca90:	28c6703a 	and	r3,r5,r3
  80ca94:	280ad7fa 	srli	r5,r5,31
  80ca98:	3980120e 	bge	r7,r6,80cae4 <__fixdfsi+0x68>
  80ca9c:	00810744 	movi	r2,1053
  80caa0:	11800c16 	blt	r2,r6,80cad4 <__fixdfsi+0x58>
  80caa4:	00810cc4 	movi	r2,1075
  80caa8:	1185c83a 	sub	r2,r2,r6
  80caac:	01c007c4 	movi	r7,31
  80cab0:	18c00434 	orhi	r3,r3,16
  80cab4:	38800d16 	blt	r7,r2,80caec <__fixdfsi+0x70>
  80cab8:	31befb44 	addi	r6,r6,-1043
  80cabc:	2084d83a 	srl	r2,r4,r2
  80cac0:	1986983a 	sll	r3,r3,r6
  80cac4:	1884b03a 	or	r2,r3,r2
  80cac8:	28000726 	beq	r5,zero,80cae8 <__fixdfsi+0x6c>
  80cacc:	0085c83a 	sub	r2,zero,r2
  80cad0:	f800283a 	ret
  80cad4:	00a00034 	movhi	r2,32768
  80cad8:	10bfffc4 	addi	r2,r2,-1
  80cadc:	2885883a 	add	r2,r5,r2
  80cae0:	f800283a 	ret
  80cae4:	0005883a 	mov	r2,zero
  80cae8:	f800283a 	ret
  80caec:	008104c4 	movi	r2,1043
  80caf0:	1185c83a 	sub	r2,r2,r6
  80caf4:	1884d83a 	srl	r2,r3,r2
  80caf8:	003ff306 	br	80cac8 <__alt_data_end+0xff80cac8>

0080cafc <__floatsidf>:
  80cafc:	defffd04 	addi	sp,sp,-12
  80cb00:	dfc00215 	stw	ra,8(sp)
  80cb04:	dc400115 	stw	r17,4(sp)
  80cb08:	dc000015 	stw	r16,0(sp)
  80cb0c:	20002b26 	beq	r4,zero,80cbbc <__floatsidf+0xc0>
  80cb10:	2023883a 	mov	r17,r4
  80cb14:	2020d7fa 	srli	r16,r4,31
  80cb18:	20002d16 	blt	r4,zero,80cbd0 <__floatsidf+0xd4>
  80cb1c:	8809883a 	mov	r4,r17
  80cb20:	080cc800 	call	80cc80 <__clzsi2>
  80cb24:	01410784 	movi	r5,1054
  80cb28:	288bc83a 	sub	r5,r5,r2
  80cb2c:	01010cc4 	movi	r4,1075
  80cb30:	2149c83a 	sub	r4,r4,r5
  80cb34:	00c007c4 	movi	r3,31
  80cb38:	1900160e 	bge	r3,r4,80cb94 <__floatsidf+0x98>
  80cb3c:	00c104c4 	movi	r3,1043
  80cb40:	1947c83a 	sub	r3,r3,r5
  80cb44:	88c6983a 	sll	r3,r17,r3
  80cb48:	00800434 	movhi	r2,16
  80cb4c:	10bfffc4 	addi	r2,r2,-1
  80cb50:	1886703a 	and	r3,r3,r2
  80cb54:	2941ffcc 	andi	r5,r5,2047
  80cb58:	800d883a 	mov	r6,r16
  80cb5c:	0005883a 	mov	r2,zero
  80cb60:	280a953a 	slli	r5,r5,20
  80cb64:	31803fcc 	andi	r6,r6,255
  80cb68:	01000434 	movhi	r4,16
  80cb6c:	300c97fa 	slli	r6,r6,31
  80cb70:	213fffc4 	addi	r4,r4,-1
  80cb74:	1906703a 	and	r3,r3,r4
  80cb78:	1946b03a 	or	r3,r3,r5
  80cb7c:	1986b03a 	or	r3,r3,r6
  80cb80:	dfc00217 	ldw	ra,8(sp)
  80cb84:	dc400117 	ldw	r17,4(sp)
  80cb88:	dc000017 	ldw	r16,0(sp)
  80cb8c:	dec00304 	addi	sp,sp,12
  80cb90:	f800283a 	ret
  80cb94:	00c002c4 	movi	r3,11
  80cb98:	1887c83a 	sub	r3,r3,r2
  80cb9c:	88c6d83a 	srl	r3,r17,r3
  80cba0:	8904983a 	sll	r2,r17,r4
  80cba4:	01000434 	movhi	r4,16
  80cba8:	213fffc4 	addi	r4,r4,-1
  80cbac:	2941ffcc 	andi	r5,r5,2047
  80cbb0:	1906703a 	and	r3,r3,r4
  80cbb4:	800d883a 	mov	r6,r16
  80cbb8:	003fe906 	br	80cb60 <__alt_data_end+0xff80cb60>
  80cbbc:	000d883a 	mov	r6,zero
  80cbc0:	000b883a 	mov	r5,zero
  80cbc4:	0007883a 	mov	r3,zero
  80cbc8:	0005883a 	mov	r2,zero
  80cbcc:	003fe406 	br	80cb60 <__alt_data_end+0xff80cb60>
  80cbd0:	0123c83a 	sub	r17,zero,r4
  80cbd4:	003fd106 	br	80cb1c <__alt_data_end+0xff80cb1c>

0080cbd8 <__floatunsidf>:
  80cbd8:	defffe04 	addi	sp,sp,-8
  80cbdc:	dc000015 	stw	r16,0(sp)
  80cbe0:	dfc00115 	stw	ra,4(sp)
  80cbe4:	2021883a 	mov	r16,r4
  80cbe8:	20002226 	beq	r4,zero,80cc74 <__floatunsidf+0x9c>
  80cbec:	080cc800 	call	80cc80 <__clzsi2>
  80cbf0:	01010784 	movi	r4,1054
  80cbf4:	2089c83a 	sub	r4,r4,r2
  80cbf8:	01810cc4 	movi	r6,1075
  80cbfc:	310dc83a 	sub	r6,r6,r4
  80cc00:	00c007c4 	movi	r3,31
  80cc04:	1980120e 	bge	r3,r6,80cc50 <__floatunsidf+0x78>
  80cc08:	00c104c4 	movi	r3,1043
  80cc0c:	1907c83a 	sub	r3,r3,r4
  80cc10:	80ca983a 	sll	r5,r16,r3
  80cc14:	00800434 	movhi	r2,16
  80cc18:	10bfffc4 	addi	r2,r2,-1
  80cc1c:	2101ffcc 	andi	r4,r4,2047
  80cc20:	0021883a 	mov	r16,zero
  80cc24:	288a703a 	and	r5,r5,r2
  80cc28:	2008953a 	slli	r4,r4,20
  80cc2c:	00c00434 	movhi	r3,16
  80cc30:	18ffffc4 	addi	r3,r3,-1
  80cc34:	28c6703a 	and	r3,r5,r3
  80cc38:	8005883a 	mov	r2,r16
  80cc3c:	1906b03a 	or	r3,r3,r4
  80cc40:	dfc00117 	ldw	ra,4(sp)
  80cc44:	dc000017 	ldw	r16,0(sp)
  80cc48:	dec00204 	addi	sp,sp,8
  80cc4c:	f800283a 	ret
  80cc50:	00c002c4 	movi	r3,11
  80cc54:	188bc83a 	sub	r5,r3,r2
  80cc58:	814ad83a 	srl	r5,r16,r5
  80cc5c:	00c00434 	movhi	r3,16
  80cc60:	18ffffc4 	addi	r3,r3,-1
  80cc64:	81a0983a 	sll	r16,r16,r6
  80cc68:	2101ffcc 	andi	r4,r4,2047
  80cc6c:	28ca703a 	and	r5,r5,r3
  80cc70:	003fed06 	br	80cc28 <__alt_data_end+0xff80cc28>
  80cc74:	0009883a 	mov	r4,zero
  80cc78:	000b883a 	mov	r5,zero
  80cc7c:	003fea06 	br	80cc28 <__alt_data_end+0xff80cc28>

0080cc80 <__clzsi2>:
  80cc80:	00bfffd4 	movui	r2,65535
  80cc84:	11000536 	bltu	r2,r4,80cc9c <__clzsi2+0x1c>
  80cc88:	00803fc4 	movi	r2,255
  80cc8c:	11000f36 	bltu	r2,r4,80cccc <__clzsi2+0x4c>
  80cc90:	00800804 	movi	r2,32
  80cc94:	0007883a 	mov	r3,zero
  80cc98:	00000506 	br	80ccb0 <__clzsi2+0x30>
  80cc9c:	00804034 	movhi	r2,256
  80cca0:	10bfffc4 	addi	r2,r2,-1
  80cca4:	11000c2e 	bgeu	r2,r4,80ccd8 <__clzsi2+0x58>
  80cca8:	00800204 	movi	r2,8
  80ccac:	00c00604 	movi	r3,24
  80ccb0:	20c8d83a 	srl	r4,r4,r3
  80ccb4:	00c02074 	movhi	r3,129
  80ccb8:	18c1a604 	addi	r3,r3,1688
  80ccbc:	1909883a 	add	r4,r3,r4
  80ccc0:	20c00003 	ldbu	r3,0(r4)
  80ccc4:	10c5c83a 	sub	r2,r2,r3
  80ccc8:	f800283a 	ret
  80cccc:	00800604 	movi	r2,24
  80ccd0:	00c00204 	movi	r3,8
  80ccd4:	003ff606 	br	80ccb0 <__alt_data_end+0xff80ccb0>
  80ccd8:	00800404 	movi	r2,16
  80ccdc:	1007883a 	mov	r3,r2
  80cce0:	003ff306 	br	80ccb0 <__alt_data_end+0xff80ccb0>

0080cce4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80cce4:	defffe04 	addi	sp,sp,-8
  80cce8:	dfc00115 	stw	ra,4(sp)
  80ccec:	df000015 	stw	fp,0(sp)
  80ccf0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80ccf4:	d0a00c17 	ldw	r2,-32720(gp)
  80ccf8:	10000326 	beq	r2,zero,80cd08 <alt_get_errno+0x24>
  80ccfc:	d0a00c17 	ldw	r2,-32720(gp)
  80cd00:	103ee83a 	callr	r2
  80cd04:	00000106 	br	80cd0c <alt_get_errno+0x28>
  80cd08:	d0a35d04 	addi	r2,gp,-29324
}
  80cd0c:	e037883a 	mov	sp,fp
  80cd10:	dfc00117 	ldw	ra,4(sp)
  80cd14:	df000017 	ldw	fp,0(sp)
  80cd18:	dec00204 	addi	sp,sp,8
  80cd1c:	f800283a 	ret

0080cd20 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  80cd20:	defffb04 	addi	sp,sp,-20
  80cd24:	dfc00415 	stw	ra,16(sp)
  80cd28:	df000315 	stw	fp,12(sp)
  80cd2c:	df000304 	addi	fp,sp,12
  80cd30:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  80cd34:	e0bfff17 	ldw	r2,-4(fp)
  80cd38:	10000616 	blt	r2,zero,80cd54 <close+0x34>
  80cd3c:	e0bfff17 	ldw	r2,-4(fp)
  80cd40:	10c00324 	muli	r3,r2,12
  80cd44:	00802074 	movhi	r2,129
  80cd48:	1084d704 	addi	r2,r2,4956
  80cd4c:	1885883a 	add	r2,r3,r2
  80cd50:	00000106 	br	80cd58 <close+0x38>
  80cd54:	0005883a 	mov	r2,zero
  80cd58:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
  80cd5c:	e0bffd17 	ldw	r2,-12(fp)
  80cd60:	10001926 	beq	r2,zero,80cdc8 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  80cd64:	e0bffd17 	ldw	r2,-12(fp)
  80cd68:	10800017 	ldw	r2,0(r2)
  80cd6c:	10800417 	ldw	r2,16(r2)
  80cd70:	10000626 	beq	r2,zero,80cd8c <close+0x6c>
  80cd74:	e0bffd17 	ldw	r2,-12(fp)
  80cd78:	10800017 	ldw	r2,0(r2)
  80cd7c:	10800417 	ldw	r2,16(r2)
  80cd80:	e13ffd17 	ldw	r4,-12(fp)
  80cd84:	103ee83a 	callr	r2
  80cd88:	00000106 	br	80cd90 <close+0x70>
  80cd8c:	0005883a 	mov	r2,zero
  80cd90:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  80cd94:	e13fff17 	ldw	r4,-4(fp)
  80cd98:	080d5600 	call	80d560 <alt_release_fd>
    if (rval < 0)
  80cd9c:	e0bffe17 	ldw	r2,-8(fp)
  80cda0:	1000070e 	bge	r2,zero,80cdc0 <close+0xa0>
    {
      ALT_ERRNO = -rval;
  80cda4:	080cce40 	call	80cce4 <alt_get_errno>
  80cda8:	1007883a 	mov	r3,r2
  80cdac:	e0bffe17 	ldw	r2,-8(fp)
  80cdb0:	0085c83a 	sub	r2,zero,r2
  80cdb4:	18800015 	stw	r2,0(r3)
      return -1;
  80cdb8:	00bfffc4 	movi	r2,-1
  80cdbc:	00000706 	br	80cddc <close+0xbc>
    }
    return 0;
  80cdc0:	0005883a 	mov	r2,zero
  80cdc4:	00000506 	br	80cddc <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80cdc8:	080cce40 	call	80cce4 <alt_get_errno>
  80cdcc:	1007883a 	mov	r3,r2
  80cdd0:	00801444 	movi	r2,81
  80cdd4:	18800015 	stw	r2,0(r3)
    return -1;
  80cdd8:	00bfffc4 	movi	r2,-1
  }
}
  80cddc:	e037883a 	mov	sp,fp
  80cde0:	dfc00117 	ldw	ra,4(sp)
  80cde4:	df000017 	ldw	fp,0(sp)
  80cde8:	dec00204 	addi	sp,sp,8
  80cdec:	f800283a 	ret

0080cdf0 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  80cdf0:	defffc04 	addi	sp,sp,-16
  80cdf4:	df000315 	stw	fp,12(sp)
  80cdf8:	df000304 	addi	fp,sp,12
  80cdfc:	e13ffd15 	stw	r4,-12(fp)
  80ce00:	e17ffe15 	stw	r5,-8(fp)
  80ce04:	e1bfff15 	stw	r6,-4(fp)
  return len;
  80ce08:	e0bfff17 	ldw	r2,-4(fp)
}
  80ce0c:	e037883a 	mov	sp,fp
  80ce10:	df000017 	ldw	fp,0(sp)
  80ce14:	dec00104 	addi	sp,sp,4
  80ce18:	f800283a 	ret

0080ce1c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80ce1c:	defffe04 	addi	sp,sp,-8
  80ce20:	dfc00115 	stw	ra,4(sp)
  80ce24:	df000015 	stw	fp,0(sp)
  80ce28:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80ce2c:	d0a00c17 	ldw	r2,-32720(gp)
  80ce30:	10000326 	beq	r2,zero,80ce40 <alt_get_errno+0x24>
  80ce34:	d0a00c17 	ldw	r2,-32720(gp)
  80ce38:	103ee83a 	callr	r2
  80ce3c:	00000106 	br	80ce44 <alt_get_errno+0x28>
  80ce40:	d0a35d04 	addi	r2,gp,-29324
}
  80ce44:	e037883a 	mov	sp,fp
  80ce48:	dfc00117 	ldw	ra,4(sp)
  80ce4c:	df000017 	ldw	fp,0(sp)
  80ce50:	dec00204 	addi	sp,sp,8
  80ce54:	f800283a 	ret

0080ce58 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
  80ce58:	defffb04 	addi	sp,sp,-20
  80ce5c:	dfc00415 	stw	ra,16(sp)
  80ce60:	df000315 	stw	fp,12(sp)
  80ce64:	df000304 	addi	fp,sp,12
  80ce68:	e13ffe15 	stw	r4,-8(fp)
  80ce6c:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80ce70:	e0bffe17 	ldw	r2,-8(fp)
  80ce74:	10000616 	blt	r2,zero,80ce90 <fstat+0x38>
  80ce78:	e0bffe17 	ldw	r2,-8(fp)
  80ce7c:	10c00324 	muli	r3,r2,12
  80ce80:	00802074 	movhi	r2,129
  80ce84:	1084d704 	addi	r2,r2,4956
  80ce88:	1885883a 	add	r2,r3,r2
  80ce8c:	00000106 	br	80ce94 <fstat+0x3c>
  80ce90:	0005883a 	mov	r2,zero
  80ce94:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
  80ce98:	e0bffd17 	ldw	r2,-12(fp)
  80ce9c:	10001026 	beq	r2,zero,80cee0 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
  80cea0:	e0bffd17 	ldw	r2,-12(fp)
  80cea4:	10800017 	ldw	r2,0(r2)
  80cea8:	10800817 	ldw	r2,32(r2)
  80ceac:	10000726 	beq	r2,zero,80cecc <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
  80ceb0:	e0bffd17 	ldw	r2,-12(fp)
  80ceb4:	10800017 	ldw	r2,0(r2)
  80ceb8:	10800817 	ldw	r2,32(r2)
  80cebc:	e17fff17 	ldw	r5,-4(fp)
  80cec0:	e13ffd17 	ldw	r4,-12(fp)
  80cec4:	103ee83a 	callr	r2
  80cec8:	00000a06 	br	80cef4 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
  80cecc:	e0bfff17 	ldw	r2,-4(fp)
  80ced0:	00c80004 	movi	r3,8192
  80ced4:	10c00115 	stw	r3,4(r2)
      return 0;
  80ced8:	0005883a 	mov	r2,zero
  80cedc:	00000506 	br	80cef4 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80cee0:	080ce1c0 	call	80ce1c <alt_get_errno>
  80cee4:	1007883a 	mov	r3,r2
  80cee8:	00801444 	movi	r2,81
  80ceec:	18800015 	stw	r2,0(r3)
    return -1;
  80cef0:	00bfffc4 	movi	r2,-1
  }
}
  80cef4:	e037883a 	mov	sp,fp
  80cef8:	dfc00117 	ldw	ra,4(sp)
  80cefc:	df000017 	ldw	fp,0(sp)
  80cf00:	dec00204 	addi	sp,sp,8
  80cf04:	f800283a 	ret

0080cf08 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
  80cf08:	defff004 	addi	sp,sp,-64
  80cf0c:	df000f15 	stw	fp,60(sp)
  80cf10:	df000f04 	addi	fp,sp,60
  80cf14:	e13ffd15 	stw	r4,-12(fp)
  80cf18:	e17ffe15 	stw	r5,-8(fp)
  80cf1c:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
  80cf20:	00bffa84 	movi	r2,-22
  80cf24:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  80cf28:	e0bffd17 	ldw	r2,-12(fp)
  80cf2c:	10800828 	cmpgeui	r2,r2,32
  80cf30:	1000501e 	bne	r2,zero,80d074 <alt_irq_register+0x16c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80cf34:	0005303a 	rdctl	r2,status
  80cf38:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80cf3c:	e0fff617 	ldw	r3,-40(fp)
  80cf40:	00bfff84 	movi	r2,-2
  80cf44:	1884703a 	and	r2,r3,r2
  80cf48:	1001703a 	wrctl	status,r2
  
  return context;
  80cf4c:	e0bff617 	ldw	r2,-40(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
  80cf50:	e0bff315 	stw	r2,-52(fp)

    alt_irq[id].handler = handler;
  80cf54:	00802074 	movhi	r2,129
  80cf58:	10894204 	addi	r2,r2,9480
  80cf5c:	e0fffd17 	ldw	r3,-12(fp)
  80cf60:	180690fa 	slli	r3,r3,3
  80cf64:	10c5883a 	add	r2,r2,r3
  80cf68:	e0ffff17 	ldw	r3,-4(fp)
  80cf6c:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
  80cf70:	00802074 	movhi	r2,129
  80cf74:	10894204 	addi	r2,r2,9480
  80cf78:	e0fffd17 	ldw	r3,-12(fp)
  80cf7c:	180690fa 	slli	r3,r3,3
  80cf80:	10c5883a 	add	r2,r2,r3
  80cf84:	10800104 	addi	r2,r2,4
  80cf88:	e0fffe17 	ldw	r3,-8(fp)
  80cf8c:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
  80cf90:	e0bfff17 	ldw	r2,-4(fp)
  80cf94:	10001926 	beq	r2,zero,80cffc <alt_irq_register+0xf4>
  80cf98:	e0bffd17 	ldw	r2,-12(fp)
  80cf9c:	e0bff215 	stw	r2,-56(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80cfa0:	0005303a 	rdctl	r2,status
  80cfa4:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80cfa8:	e0fff717 	ldw	r3,-36(fp)
  80cfac:	00bfff84 	movi	r2,-2
  80cfb0:	1884703a 	and	r2,r3,r2
  80cfb4:	1001703a 	wrctl	status,r2
  
  return context;
  80cfb8:	e0bff717 	ldw	r2,-36(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  80cfbc:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
  80cfc0:	00c00044 	movi	r3,1
  80cfc4:	e0bff217 	ldw	r2,-56(fp)
  80cfc8:	1884983a 	sll	r2,r3,r2
  80cfcc:	1007883a 	mov	r3,r2
  80cfd0:	d0a35e17 	ldw	r2,-29320(gp)
  80cfd4:	1884b03a 	or	r2,r3,r2
  80cfd8:	d0a35e15 	stw	r2,-29320(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  80cfdc:	d0a35e17 	ldw	r2,-29320(gp)
  80cfe0:	100170fa 	wrctl	ienable,r2
  80cfe4:	e0bff817 	ldw	r2,-32(fp)
  80cfe8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80cfec:	e0bff917 	ldw	r2,-28(fp)
  80cff0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  80cff4:	0005883a 	mov	r2,zero
  80cff8:	00001906 	br	80d060 <alt_irq_register+0x158>
  80cffc:	e0bffd17 	ldw	r2,-12(fp)
  80d000:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80d004:	0005303a 	rdctl	r2,status
  80d008:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80d00c:	e0fffa17 	ldw	r3,-24(fp)
  80d010:	00bfff84 	movi	r2,-2
  80d014:	1884703a 	and	r2,r3,r2
  80d018:	1001703a 	wrctl	status,r2
  
  return context;
  80d01c:	e0bffa17 	ldw	r2,-24(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  80d020:	e0bffb15 	stw	r2,-20(fp)

  alt_irq_active &= ~(1 << id);
  80d024:	00c00044 	movi	r3,1
  80d028:	e0bff417 	ldw	r2,-48(fp)
  80d02c:	1884983a 	sll	r2,r3,r2
  80d030:	0084303a 	nor	r2,zero,r2
  80d034:	1007883a 	mov	r3,r2
  80d038:	d0a35e17 	ldw	r2,-29320(gp)
  80d03c:	1884703a 	and	r2,r3,r2
  80d040:	d0a35e15 	stw	r2,-29320(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  80d044:	d0a35e17 	ldw	r2,-29320(gp)
  80d048:	100170fa 	wrctl	ienable,r2
  80d04c:	e0bffb17 	ldw	r2,-20(fp)
  80d050:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80d054:	e0bffc17 	ldw	r2,-16(fp)
  80d058:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  80d05c:	0005883a 	mov	r2,zero
  80d060:	e0bff115 	stw	r2,-60(fp)
  80d064:	e0bff317 	ldw	r2,-52(fp)
  80d068:	e0bff515 	stw	r2,-44(fp)
  80d06c:	e0bff517 	ldw	r2,-44(fp)
  80d070:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
  80d074:	e0bff117 	ldw	r2,-60(fp)
}
  80d078:	e037883a 	mov	sp,fp
  80d07c:	df000017 	ldw	fp,0(sp)
  80d080:	dec00104 	addi	sp,sp,4
  80d084:	f800283a 	ret

0080d088 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80d088:	defffe04 	addi	sp,sp,-8
  80d08c:	dfc00115 	stw	ra,4(sp)
  80d090:	df000015 	stw	fp,0(sp)
  80d094:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80d098:	d0a00c17 	ldw	r2,-32720(gp)
  80d09c:	10000326 	beq	r2,zero,80d0ac <alt_get_errno+0x24>
  80d0a0:	d0a00c17 	ldw	r2,-32720(gp)
  80d0a4:	103ee83a 	callr	r2
  80d0a8:	00000106 	br	80d0b0 <alt_get_errno+0x28>
  80d0ac:	d0a35d04 	addi	r2,gp,-29324
}
  80d0b0:	e037883a 	mov	sp,fp
  80d0b4:	dfc00117 	ldw	ra,4(sp)
  80d0b8:	df000017 	ldw	fp,0(sp)
  80d0bc:	dec00204 	addi	sp,sp,8
  80d0c0:	f800283a 	ret

0080d0c4 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
  80d0c4:	deffed04 	addi	sp,sp,-76
  80d0c8:	dfc01215 	stw	ra,72(sp)
  80d0cc:	df001115 	stw	fp,68(sp)
  80d0d0:	df001104 	addi	fp,sp,68
  80d0d4:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80d0d8:	e0bfff17 	ldw	r2,-4(fp)
  80d0dc:	10000616 	blt	r2,zero,80d0f8 <isatty+0x34>
  80d0e0:	e0bfff17 	ldw	r2,-4(fp)
  80d0e4:	10c00324 	muli	r3,r2,12
  80d0e8:	00802074 	movhi	r2,129
  80d0ec:	1084d704 	addi	r2,r2,4956
  80d0f0:	1885883a 	add	r2,r3,r2
  80d0f4:	00000106 	br	80d0fc <isatty+0x38>
  80d0f8:	0005883a 	mov	r2,zero
  80d0fc:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
  80d100:	e0bfef17 	ldw	r2,-68(fp)
  80d104:	10000e26 	beq	r2,zero,80d140 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
  80d108:	e0bfef17 	ldw	r2,-68(fp)
  80d10c:	10800017 	ldw	r2,0(r2)
  80d110:	10800817 	ldw	r2,32(r2)
  80d114:	1000021e 	bne	r2,zero,80d120 <isatty+0x5c>
    {
      return 1;
  80d118:	00800044 	movi	r2,1
  80d11c:	00000d06 	br	80d154 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
  80d120:	e0bff004 	addi	r2,fp,-64
  80d124:	100b883a 	mov	r5,r2
  80d128:	e13fff17 	ldw	r4,-4(fp)
  80d12c:	080ce580 	call	80ce58 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
  80d130:	e0bff117 	ldw	r2,-60(fp)
  80d134:	10880020 	cmpeqi	r2,r2,8192
  80d138:	10803fcc 	andi	r2,r2,255
  80d13c:	00000506 	br	80d154 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80d140:	080d0880 	call	80d088 <alt_get_errno>
  80d144:	1007883a 	mov	r3,r2
  80d148:	00801444 	movi	r2,81
  80d14c:	18800015 	stw	r2,0(r3)
    return 0;
  80d150:	0005883a 	mov	r2,zero
  }
}
  80d154:	e037883a 	mov	sp,fp
  80d158:	dfc00117 	ldw	ra,4(sp)
  80d15c:	df000017 	ldw	fp,0(sp)
  80d160:	dec00204 	addi	sp,sp,8
  80d164:	f800283a 	ret

0080d168 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  80d168:	defffc04 	addi	sp,sp,-16
  80d16c:	df000315 	stw	fp,12(sp)
  80d170:	df000304 	addi	fp,sp,12
  80d174:	e13ffd15 	stw	r4,-12(fp)
  80d178:	e17ffe15 	stw	r5,-8(fp)
  80d17c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
  80d180:	e0fffe17 	ldw	r3,-8(fp)
  80d184:	e0bffd17 	ldw	r2,-12(fp)
  80d188:	18800c26 	beq	r3,r2,80d1bc <alt_load_section+0x54>
  {
    while( to != end )
  80d18c:	00000806 	br	80d1b0 <alt_load_section+0x48>
    {
      *to++ = *from++;
  80d190:	e0bffe17 	ldw	r2,-8(fp)
  80d194:	10c00104 	addi	r3,r2,4
  80d198:	e0fffe15 	stw	r3,-8(fp)
  80d19c:	e0fffd17 	ldw	r3,-12(fp)
  80d1a0:	19000104 	addi	r4,r3,4
  80d1a4:	e13ffd15 	stw	r4,-12(fp)
  80d1a8:	18c00017 	ldw	r3,0(r3)
  80d1ac:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
  80d1b0:	e0fffe17 	ldw	r3,-8(fp)
  80d1b4:	e0bfff17 	ldw	r2,-4(fp)
  80d1b8:	18bff51e 	bne	r3,r2,80d190 <__alt_data_end+0xff80d190>
    {
      *to++ = *from++;
    }
  }
}
  80d1bc:	0001883a 	nop
  80d1c0:	e037883a 	mov	sp,fp
  80d1c4:	df000017 	ldw	fp,0(sp)
  80d1c8:	dec00104 	addi	sp,sp,4
  80d1cc:	f800283a 	ret

0080d1d0 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  80d1d0:	defffe04 	addi	sp,sp,-8
  80d1d4:	dfc00115 	stw	ra,4(sp)
  80d1d8:	df000015 	stw	fp,0(sp)
  80d1dc:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
  80d1e0:	01802074 	movhi	r6,129
  80d1e4:	3185e604 	addi	r6,r6,6040
  80d1e8:	01402074 	movhi	r5,129
  80d1ec:	2942a404 	addi	r5,r5,2704
  80d1f0:	01002074 	movhi	r4,129
  80d1f4:	2105e604 	addi	r4,r4,6040
  80d1f8:	080d1680 	call	80d168 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
  80d1fc:	01802034 	movhi	r6,128
  80d200:	31809204 	addi	r6,r6,584
  80d204:	01402034 	movhi	r5,128
  80d208:	29400804 	addi	r5,r5,32
  80d20c:	01002034 	movhi	r4,128
  80d210:	21000804 	addi	r4,r4,32
  80d214:	080d1680 	call	80d168 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
  80d218:	01802074 	movhi	r6,129
  80d21c:	3182a404 	addi	r6,r6,2704
  80d220:	01402074 	movhi	r5,129
  80d224:	29412f04 	addi	r5,r5,1212
  80d228:	01002074 	movhi	r4,129
  80d22c:	21012f04 	addi	r4,r4,1212
  80d230:	080d1680 	call	80d168 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  80d234:	080f4c00 	call	80f4c0 <alt_dcache_flush_all>
  alt_icache_flush_all();
  80d238:	080f6a80 	call	80f6a8 <alt_icache_flush_all>
}
  80d23c:	0001883a 	nop
  80d240:	e037883a 	mov	sp,fp
  80d244:	dfc00117 	ldw	ra,4(sp)
  80d248:	df000017 	ldw	fp,0(sp)
  80d24c:	dec00204 	addi	sp,sp,8
  80d250:	f800283a 	ret

0080d254 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80d254:	defffe04 	addi	sp,sp,-8
  80d258:	dfc00115 	stw	ra,4(sp)
  80d25c:	df000015 	stw	fp,0(sp)
  80d260:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80d264:	d0a00c17 	ldw	r2,-32720(gp)
  80d268:	10000326 	beq	r2,zero,80d278 <alt_get_errno+0x24>
  80d26c:	d0a00c17 	ldw	r2,-32720(gp)
  80d270:	103ee83a 	callr	r2
  80d274:	00000106 	br	80d27c <alt_get_errno+0x28>
  80d278:	d0a35d04 	addi	r2,gp,-29324
}
  80d27c:	e037883a 	mov	sp,fp
  80d280:	dfc00117 	ldw	ra,4(sp)
  80d284:	df000017 	ldw	fp,0(sp)
  80d288:	dec00204 	addi	sp,sp,8
  80d28c:	f800283a 	ret

0080d290 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
  80d290:	defff904 	addi	sp,sp,-28
  80d294:	dfc00615 	stw	ra,24(sp)
  80d298:	df000515 	stw	fp,20(sp)
  80d29c:	df000504 	addi	fp,sp,20
  80d2a0:	e13ffd15 	stw	r4,-12(fp)
  80d2a4:	e17ffe15 	stw	r5,-8(fp)
  80d2a8:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
  80d2ac:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80d2b0:	e0bffd17 	ldw	r2,-12(fp)
  80d2b4:	10000616 	blt	r2,zero,80d2d0 <lseek+0x40>
  80d2b8:	e0bffd17 	ldw	r2,-12(fp)
  80d2bc:	10c00324 	muli	r3,r2,12
  80d2c0:	00802074 	movhi	r2,129
  80d2c4:	1084d704 	addi	r2,r2,4956
  80d2c8:	1885883a 	add	r2,r3,r2
  80d2cc:	00000106 	br	80d2d4 <lseek+0x44>
  80d2d0:	0005883a 	mov	r2,zero
  80d2d4:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
  80d2d8:	e0bffc17 	ldw	r2,-16(fp)
  80d2dc:	10001026 	beq	r2,zero,80d320 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
  80d2e0:	e0bffc17 	ldw	r2,-16(fp)
  80d2e4:	10800017 	ldw	r2,0(r2)
  80d2e8:	10800717 	ldw	r2,28(r2)
  80d2ec:	10000926 	beq	r2,zero,80d314 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
  80d2f0:	e0bffc17 	ldw	r2,-16(fp)
  80d2f4:	10800017 	ldw	r2,0(r2)
  80d2f8:	10800717 	ldw	r2,28(r2)
  80d2fc:	e1bfff17 	ldw	r6,-4(fp)
  80d300:	e17ffe17 	ldw	r5,-8(fp)
  80d304:	e13ffc17 	ldw	r4,-16(fp)
  80d308:	103ee83a 	callr	r2
  80d30c:	e0bffb15 	stw	r2,-20(fp)
  80d310:	00000506 	br	80d328 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
  80d314:	00bfde84 	movi	r2,-134
  80d318:	e0bffb15 	stw	r2,-20(fp)
  80d31c:	00000206 	br	80d328 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
  80d320:	00bfebc4 	movi	r2,-81
  80d324:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
  80d328:	e0bffb17 	ldw	r2,-20(fp)
  80d32c:	1000070e 	bge	r2,zero,80d34c <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
  80d330:	080d2540 	call	80d254 <alt_get_errno>
  80d334:	1007883a 	mov	r3,r2
  80d338:	e0bffb17 	ldw	r2,-20(fp)
  80d33c:	0085c83a 	sub	r2,zero,r2
  80d340:	18800015 	stw	r2,0(r3)
    rc = -1;
  80d344:	00bfffc4 	movi	r2,-1
  80d348:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
  80d34c:	e0bffb17 	ldw	r2,-20(fp)
}
  80d350:	e037883a 	mov	sp,fp
  80d354:	dfc00117 	ldw	ra,4(sp)
  80d358:	df000017 	ldw	fp,0(sp)
  80d35c:	dec00204 	addi	sp,sp,8
  80d360:	f800283a 	ret

0080d364 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  80d364:	defffd04 	addi	sp,sp,-12
  80d368:	dfc00215 	stw	ra,8(sp)
  80d36c:	df000115 	stw	fp,4(sp)
  80d370:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  80d374:	0009883a 	mov	r4,zero
  80d378:	080d7dc0 	call	80d7dc <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
  80d37c:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  80d380:	080d8140 	call	80d814 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  80d384:	01802074 	movhi	r6,129
  80d388:	3181e904 	addi	r6,r6,1956
  80d38c:	01402074 	movhi	r5,129
  80d390:	2941e904 	addi	r5,r5,1956
  80d394:	01002074 	movhi	r4,129
  80d398:	2101e904 	addi	r4,r4,1956
  80d39c:	080f7a00 	call	80f7a0 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
  80d3a0:	080f5e80 	call	80f5e8 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
  80d3a4:	01002074 	movhi	r4,129
  80d3a8:	213d9204 	addi	r4,r4,-2488
  80d3ac:	08101280 	call	810128 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  80d3b0:	d0a35f17 	ldw	r2,-29316(gp)
  80d3b4:	d0e36017 	ldw	r3,-29312(gp)
  80d3b8:	d1236117 	ldw	r4,-29308(gp)
  80d3bc:	200d883a 	mov	r6,r4
  80d3c0:	180b883a 	mov	r5,r3
  80d3c4:	1009883a 	mov	r4,r2
  80d3c8:	08002940 	call	800294 <main>
  80d3cc:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
  80d3d0:	01000044 	movi	r4,1
  80d3d4:	080cd200 	call	80cd20 <close>
  exit (result);
  80d3d8:	e13fff17 	ldw	r4,-4(fp)
  80d3dc:	081013c0 	call	81013c <exit>

0080d3e0 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
  80d3e0:	defffe04 	addi	sp,sp,-8
  80d3e4:	df000115 	stw	fp,4(sp)
  80d3e8:	df000104 	addi	fp,sp,4
  80d3ec:	e13fff15 	stw	r4,-4(fp)
}
  80d3f0:	0001883a 	nop
  80d3f4:	e037883a 	mov	sp,fp
  80d3f8:	df000017 	ldw	fp,0(sp)
  80d3fc:	dec00104 	addi	sp,sp,4
  80d400:	f800283a 	ret

0080d404 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
  80d404:	defffe04 	addi	sp,sp,-8
  80d408:	df000115 	stw	fp,4(sp)
  80d40c:	df000104 	addi	fp,sp,4
  80d410:	e13fff15 	stw	r4,-4(fp)
}
  80d414:	0001883a 	nop
  80d418:	e037883a 	mov	sp,fp
  80d41c:	df000017 	ldw	fp,0(sp)
  80d420:	dec00104 	addi	sp,sp,4
  80d424:	f800283a 	ret

0080d428 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80d428:	defffe04 	addi	sp,sp,-8
  80d42c:	dfc00115 	stw	ra,4(sp)
  80d430:	df000015 	stw	fp,0(sp)
  80d434:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80d438:	d0a00c17 	ldw	r2,-32720(gp)
  80d43c:	10000326 	beq	r2,zero,80d44c <alt_get_errno+0x24>
  80d440:	d0a00c17 	ldw	r2,-32720(gp)
  80d444:	103ee83a 	callr	r2
  80d448:	00000106 	br	80d450 <alt_get_errno+0x28>
  80d44c:	d0a35d04 	addi	r2,gp,-29324
}
  80d450:	e037883a 	mov	sp,fp
  80d454:	dfc00117 	ldw	ra,4(sp)
  80d458:	df000017 	ldw	fp,0(sp)
  80d45c:	dec00204 	addi	sp,sp,8
  80d460:	f800283a 	ret

0080d464 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
  80d464:	defff904 	addi	sp,sp,-28
  80d468:	dfc00615 	stw	ra,24(sp)
  80d46c:	df000515 	stw	fp,20(sp)
  80d470:	df000504 	addi	fp,sp,20
  80d474:	e13ffd15 	stw	r4,-12(fp)
  80d478:	e17ffe15 	stw	r5,-8(fp)
  80d47c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80d480:	e0bffd17 	ldw	r2,-12(fp)
  80d484:	10000616 	blt	r2,zero,80d4a0 <read+0x3c>
  80d488:	e0bffd17 	ldw	r2,-12(fp)
  80d48c:	10c00324 	muli	r3,r2,12
  80d490:	00802074 	movhi	r2,129
  80d494:	1084d704 	addi	r2,r2,4956
  80d498:	1885883a 	add	r2,r3,r2
  80d49c:	00000106 	br	80d4a4 <read+0x40>
  80d4a0:	0005883a 	mov	r2,zero
  80d4a4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  80d4a8:	e0bffb17 	ldw	r2,-20(fp)
  80d4ac:	10002226 	beq	r2,zero,80d538 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  80d4b0:	e0bffb17 	ldw	r2,-20(fp)
  80d4b4:	10800217 	ldw	r2,8(r2)
  80d4b8:	108000cc 	andi	r2,r2,3
  80d4bc:	10800060 	cmpeqi	r2,r2,1
  80d4c0:	1000181e 	bne	r2,zero,80d524 <read+0xc0>
        (fd->dev->read))
  80d4c4:	e0bffb17 	ldw	r2,-20(fp)
  80d4c8:	10800017 	ldw	r2,0(r2)
  80d4cc:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  80d4d0:	10001426 	beq	r2,zero,80d524 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
  80d4d4:	e0bffb17 	ldw	r2,-20(fp)
  80d4d8:	10800017 	ldw	r2,0(r2)
  80d4dc:	10800517 	ldw	r2,20(r2)
  80d4e0:	e0ffff17 	ldw	r3,-4(fp)
  80d4e4:	180d883a 	mov	r6,r3
  80d4e8:	e17ffe17 	ldw	r5,-8(fp)
  80d4ec:	e13ffb17 	ldw	r4,-20(fp)
  80d4f0:	103ee83a 	callr	r2
  80d4f4:	e0bffc15 	stw	r2,-16(fp)
  80d4f8:	e0bffc17 	ldw	r2,-16(fp)
  80d4fc:	1000070e 	bge	r2,zero,80d51c <read+0xb8>
        {
          ALT_ERRNO = -rval;
  80d500:	080d4280 	call	80d428 <alt_get_errno>
  80d504:	1007883a 	mov	r3,r2
  80d508:	e0bffc17 	ldw	r2,-16(fp)
  80d50c:	0085c83a 	sub	r2,zero,r2
  80d510:	18800015 	stw	r2,0(r3)
          return -1;
  80d514:	00bfffc4 	movi	r2,-1
  80d518:	00000c06 	br	80d54c <read+0xe8>
        }
        return rval;
  80d51c:	e0bffc17 	ldw	r2,-16(fp)
  80d520:	00000a06 	br	80d54c <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
  80d524:	080d4280 	call	80d428 <alt_get_errno>
  80d528:	1007883a 	mov	r3,r2
  80d52c:	00800344 	movi	r2,13
  80d530:	18800015 	stw	r2,0(r3)
  80d534:	00000406 	br	80d548 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
  80d538:	080d4280 	call	80d428 <alt_get_errno>
  80d53c:	1007883a 	mov	r3,r2
  80d540:	00801444 	movi	r2,81
  80d544:	18800015 	stw	r2,0(r3)
  }
  return -1;
  80d548:	00bfffc4 	movi	r2,-1
}
  80d54c:	e037883a 	mov	sp,fp
  80d550:	dfc00117 	ldw	ra,4(sp)
  80d554:	df000017 	ldw	fp,0(sp)
  80d558:	dec00204 	addi	sp,sp,8
  80d55c:	f800283a 	ret

0080d560 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  80d560:	defffe04 	addi	sp,sp,-8
  80d564:	df000115 	stw	fp,4(sp)
  80d568:	df000104 	addi	fp,sp,4
  80d56c:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
  80d570:	e0bfff17 	ldw	r2,-4(fp)
  80d574:	108000d0 	cmplti	r2,r2,3
  80d578:	10000d1e 	bne	r2,zero,80d5b0 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
  80d57c:	00802074 	movhi	r2,129
  80d580:	1084d704 	addi	r2,r2,4956
  80d584:	e0ffff17 	ldw	r3,-4(fp)
  80d588:	18c00324 	muli	r3,r3,12
  80d58c:	10c5883a 	add	r2,r2,r3
  80d590:	10800204 	addi	r2,r2,8
  80d594:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
  80d598:	00802074 	movhi	r2,129
  80d59c:	1084d704 	addi	r2,r2,4956
  80d5a0:	e0ffff17 	ldw	r3,-4(fp)
  80d5a4:	18c00324 	muli	r3,r3,12
  80d5a8:	10c5883a 	add	r2,r2,r3
  80d5ac:	10000015 	stw	zero,0(r2)
  }
}
  80d5b0:	0001883a 	nop
  80d5b4:	e037883a 	mov	sp,fp
  80d5b8:	df000017 	ldw	fp,0(sp)
  80d5bc:	dec00104 	addi	sp,sp,4
  80d5c0:	f800283a 	ret

0080d5c4 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
  80d5c4:	defff904 	addi	sp,sp,-28
  80d5c8:	df000615 	stw	fp,24(sp)
  80d5cc:	df000604 	addi	fp,sp,24
  80d5d0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80d5d4:	0005303a 	rdctl	r2,status
  80d5d8:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80d5dc:	e0fffe17 	ldw	r3,-8(fp)
  80d5e0:	00bfff84 	movi	r2,-2
  80d5e4:	1884703a 	and	r2,r3,r2
  80d5e8:	1001703a 	wrctl	status,r2
  
  return context;
  80d5ec:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
  80d5f0:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  80d5f4:	d0a00e17 	ldw	r2,-32712(gp)
  80d5f8:	10c000c4 	addi	r3,r2,3
  80d5fc:	00bfff04 	movi	r2,-4
  80d600:	1884703a 	and	r2,r3,r2
  80d604:	d0a00e15 	stw	r2,-32712(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  80d608:	d0e00e17 	ldw	r3,-32712(gp)
  80d60c:	e0bfff17 	ldw	r2,-4(fp)
  80d610:	1887883a 	add	r3,r3,r2
  80d614:	00804034 	movhi	r2,256
  80d618:	10800004 	addi	r2,r2,0
  80d61c:	10c0062e 	bgeu	r2,r3,80d638 <sbrk+0x74>
  80d620:	e0bffb17 	ldw	r2,-20(fp)
  80d624:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80d628:	e0bffa17 	ldw	r2,-24(fp)
  80d62c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  80d630:	00bfffc4 	movi	r2,-1
  80d634:	00000b06 	br	80d664 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
  80d638:	d0a00e17 	ldw	r2,-32712(gp)
  80d63c:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
  80d640:	d0e00e17 	ldw	r3,-32712(gp)
  80d644:	e0bfff17 	ldw	r2,-4(fp)
  80d648:	1885883a 	add	r2,r3,r2
  80d64c:	d0a00e15 	stw	r2,-32712(gp)
  80d650:	e0bffb17 	ldw	r2,-20(fp)
  80d654:	e0bffc15 	stw	r2,-16(fp)
  80d658:	e0bffc17 	ldw	r2,-16(fp)
  80d65c:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
  80d660:	e0bffd17 	ldw	r2,-12(fp)
} 
  80d664:	e037883a 	mov	sp,fp
  80d668:	df000017 	ldw	fp,0(sp)
  80d66c:	dec00104 	addi	sp,sp,4
  80d670:	f800283a 	ret

0080d674 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80d674:	defffe04 	addi	sp,sp,-8
  80d678:	dfc00115 	stw	ra,4(sp)
  80d67c:	df000015 	stw	fp,0(sp)
  80d680:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80d684:	d0a00c17 	ldw	r2,-32720(gp)
  80d688:	10000326 	beq	r2,zero,80d698 <alt_get_errno+0x24>
  80d68c:	d0a00c17 	ldw	r2,-32720(gp)
  80d690:	103ee83a 	callr	r2
  80d694:	00000106 	br	80d69c <alt_get_errno+0x28>
  80d698:	d0a35d04 	addi	r2,gp,-29324
}
  80d69c:	e037883a 	mov	sp,fp
  80d6a0:	dfc00117 	ldw	ra,4(sp)
  80d6a4:	df000017 	ldw	fp,0(sp)
  80d6a8:	dec00204 	addi	sp,sp,8
  80d6ac:	f800283a 	ret

0080d6b0 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
  80d6b0:	defff904 	addi	sp,sp,-28
  80d6b4:	dfc00615 	stw	ra,24(sp)
  80d6b8:	df000515 	stw	fp,20(sp)
  80d6bc:	df000504 	addi	fp,sp,20
  80d6c0:	e13ffd15 	stw	r4,-12(fp)
  80d6c4:	e17ffe15 	stw	r5,-8(fp)
  80d6c8:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80d6cc:	e0bffd17 	ldw	r2,-12(fp)
  80d6d0:	10000616 	blt	r2,zero,80d6ec <write+0x3c>
  80d6d4:	e0bffd17 	ldw	r2,-12(fp)
  80d6d8:	10c00324 	muli	r3,r2,12
  80d6dc:	00802074 	movhi	r2,129
  80d6e0:	1084d704 	addi	r2,r2,4956
  80d6e4:	1885883a 	add	r2,r3,r2
  80d6e8:	00000106 	br	80d6f0 <write+0x40>
  80d6ec:	0005883a 	mov	r2,zero
  80d6f0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  80d6f4:	e0bffb17 	ldw	r2,-20(fp)
  80d6f8:	10002126 	beq	r2,zero,80d780 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
  80d6fc:	e0bffb17 	ldw	r2,-20(fp)
  80d700:	10800217 	ldw	r2,8(r2)
  80d704:	108000cc 	andi	r2,r2,3
  80d708:	10001826 	beq	r2,zero,80d76c <write+0xbc>
  80d70c:	e0bffb17 	ldw	r2,-20(fp)
  80d710:	10800017 	ldw	r2,0(r2)
  80d714:	10800617 	ldw	r2,24(r2)
  80d718:	10001426 	beq	r2,zero,80d76c <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
  80d71c:	e0bffb17 	ldw	r2,-20(fp)
  80d720:	10800017 	ldw	r2,0(r2)
  80d724:	10800617 	ldw	r2,24(r2)
  80d728:	e0ffff17 	ldw	r3,-4(fp)
  80d72c:	180d883a 	mov	r6,r3
  80d730:	e17ffe17 	ldw	r5,-8(fp)
  80d734:	e13ffb17 	ldw	r4,-20(fp)
  80d738:	103ee83a 	callr	r2
  80d73c:	e0bffc15 	stw	r2,-16(fp)
  80d740:	e0bffc17 	ldw	r2,-16(fp)
  80d744:	1000070e 	bge	r2,zero,80d764 <write+0xb4>
      {
        ALT_ERRNO = -rval;
  80d748:	080d6740 	call	80d674 <alt_get_errno>
  80d74c:	1007883a 	mov	r3,r2
  80d750:	e0bffc17 	ldw	r2,-16(fp)
  80d754:	0085c83a 	sub	r2,zero,r2
  80d758:	18800015 	stw	r2,0(r3)
        return -1;
  80d75c:	00bfffc4 	movi	r2,-1
  80d760:	00000c06 	br	80d794 <write+0xe4>
      }
      return rval;
  80d764:	e0bffc17 	ldw	r2,-16(fp)
  80d768:	00000a06 	br	80d794 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
  80d76c:	080d6740 	call	80d674 <alt_get_errno>
  80d770:	1007883a 	mov	r3,r2
  80d774:	00800344 	movi	r2,13
  80d778:	18800015 	stw	r2,0(r3)
  80d77c:	00000406 	br	80d790 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  80d780:	080d6740 	call	80d674 <alt_get_errno>
  80d784:	1007883a 	mov	r3,r2
  80d788:	00801444 	movi	r2,81
  80d78c:	18800015 	stw	r2,0(r3)
  }
  return -1;
  80d790:	00bfffc4 	movi	r2,-1
}
  80d794:	e037883a 	mov	sp,fp
  80d798:	dfc00117 	ldw	ra,4(sp)
  80d79c:	df000017 	ldw	fp,0(sp)
  80d7a0:	dec00204 	addi	sp,sp,8
  80d7a4:	f800283a 	ret

0080d7a8 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  80d7a8:	defffd04 	addi	sp,sp,-12
  80d7ac:	dfc00215 	stw	ra,8(sp)
  80d7b0:	df000115 	stw	fp,4(sp)
  80d7b4:	df000104 	addi	fp,sp,4
  80d7b8:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  80d7bc:	d1600904 	addi	r5,gp,-32732
  80d7c0:	e13fff17 	ldw	r4,-4(fp)
  80d7c4:	080f5440 	call	80f544 <alt_dev_llist_insert>
}
  80d7c8:	e037883a 	mov	sp,fp
  80d7cc:	dfc00117 	ldw	ra,4(sp)
  80d7d0:	df000017 	ldw	fp,0(sp)
  80d7d4:	dec00204 	addi	sp,sp,8
  80d7d8:	f800283a 	ret

0080d7dc <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  80d7dc:	defffd04 	addi	sp,sp,-12
  80d7e0:	dfc00215 	stw	ra,8(sp)
  80d7e4:	df000115 	stw	fp,4(sp)
  80d7e8:	df000104 	addi	fp,sp,4
  80d7ec:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
  80d7f0:	080fc440 	call	80fc44 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  80d7f4:	00800044 	movi	r2,1
  80d7f8:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  80d7fc:	0001883a 	nop
  80d800:	e037883a 	mov	sp,fp
  80d804:	dfc00117 	ldw	ra,4(sp)
  80d808:	df000017 	ldw	fp,0(sp)
  80d80c:	dec00204 	addi	sp,sp,8
  80d810:	f800283a 	ret

0080d814 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  80d814:	defffe04 	addi	sp,sp,-8
  80d818:	dfc00115 	stw	ra,4(sp)
  80d81c:	df000015 	stw	fp,0(sp)
  80d820:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( SYSTEM_TIMER, system_timer);
  80d824:	01c0fa04 	movi	r7,1000
  80d828:	01800104 	movi	r6,4
  80d82c:	000b883a 	mov	r5,zero
  80d830:	01004034 	movhi	r4,256
  80d834:	21042004 	addi	r4,r4,4224
  80d838:	080ea4c0 	call	80ea4c <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
  80d83c:	01002074 	movhi	r4,129
  80d840:	21053704 	addi	r4,r4,5340
  80d844:	080d7a80 	call	80d7a8 <alt_dev_reg>
    ALTERA_AVALON_LCD_16207_INIT ( LCD_DISPLAY, lcd_display);
  80d848:	01002074 	movhi	r4,129
  80d84c:	21054c04 	addi	r4,r4,5424
  80d850:	080e83c0 	call	80e83c <altera_avalon_lcd_16207_init>
  80d854:	01002074 	movhi	r4,129
  80d858:	21054204 	addi	r4,r4,5384
  80d85c:	080d7a80 	call	80d7a8 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
  80d860:	0001883a 	nop
    ALTERA_AVALON_UART_INIT ( UART, uart);
  80d864:	01800084 	movi	r6,2
  80d868:	000b883a 	mov	r5,zero
  80d86c:	01002074 	movhi	r4,129
  80d870:	21059404 	addi	r4,r4,5712
  80d874:	080ebd00 	call	80ebd0 <altera_avalon_uart_init>
  80d878:	01002074 	movhi	r4,129
  80d87c:	21058a04 	addi	r4,r4,5672
  80d880:	080d7a80 	call	80d7a8 <alt_dev_reg>
    ALTERA_UP_AVALON_AUDIO_AND_VIDEO_CONFIG_INIT ( AUDIO_I2C_CONFIG, audio_i2c_config);
  80d884:	01002074 	movhi	r4,129
  80d888:	2105bb04 	addi	r4,r4,5868
  80d88c:	080d7a80 	call	80d7a8 <alt_dev_reg>
    ALTERA_UP_AVALON_AUDIO_INIT ( AUDIO, Audio);
  80d890:	01002074 	movhi	r4,129
  80d894:	2105c704 	addi	r4,r4,5916
  80d898:	080d7a80 	call	80d7a8 <alt_dev_reg>
}
  80d89c:	0001883a 	nop
  80d8a0:	e037883a 	mov	sp,fp
  80d8a4:	dfc00117 	ldw	ra,4(sp)
  80d8a8:	df000017 	ldw	fp,0(sp)
  80d8ac:	dec00204 	addi	sp,sp,8
  80d8b0:	f800283a 	ret

0080d8b4 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  80d8b4:	defffa04 	addi	sp,sp,-24
  80d8b8:	dfc00515 	stw	ra,20(sp)
  80d8bc:	df000415 	stw	fp,16(sp)
  80d8c0:	df000404 	addi	fp,sp,16
  80d8c4:	e13ffd15 	stw	r4,-12(fp)
  80d8c8:	e17ffe15 	stw	r5,-8(fp)
  80d8cc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  80d8d0:	e0bffd17 	ldw	r2,-12(fp)
  80d8d4:	10800017 	ldw	r2,0(r2)
  80d8d8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  80d8dc:	e0bffc17 	ldw	r2,-16(fp)
  80d8e0:	10c00a04 	addi	r3,r2,40
  80d8e4:	e0bffd17 	ldw	r2,-12(fp)
  80d8e8:	10800217 	ldw	r2,8(r2)
  80d8ec:	100f883a 	mov	r7,r2
  80d8f0:	e1bfff17 	ldw	r6,-4(fp)
  80d8f4:	e17ffe17 	ldw	r5,-8(fp)
  80d8f8:	1809883a 	mov	r4,r3
  80d8fc:	080d9740 	call	80d974 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
  80d900:	e037883a 	mov	sp,fp
  80d904:	dfc00117 	ldw	ra,4(sp)
  80d908:	df000017 	ldw	fp,0(sp)
  80d90c:	dec00204 	addi	sp,sp,8
  80d910:	f800283a 	ret

0080d914 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  80d914:	defffa04 	addi	sp,sp,-24
  80d918:	dfc00515 	stw	ra,20(sp)
  80d91c:	df000415 	stw	fp,16(sp)
  80d920:	df000404 	addi	fp,sp,16
  80d924:	e13ffd15 	stw	r4,-12(fp)
  80d928:	e17ffe15 	stw	r5,-8(fp)
  80d92c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  80d930:	e0bffd17 	ldw	r2,-12(fp)
  80d934:	10800017 	ldw	r2,0(r2)
  80d938:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  80d93c:	e0bffc17 	ldw	r2,-16(fp)
  80d940:	10c00a04 	addi	r3,r2,40
  80d944:	e0bffd17 	ldw	r2,-12(fp)
  80d948:	10800217 	ldw	r2,8(r2)
  80d94c:	100f883a 	mov	r7,r2
  80d950:	e1bfff17 	ldw	r6,-4(fp)
  80d954:	e17ffe17 	ldw	r5,-8(fp)
  80d958:	1809883a 	mov	r4,r3
  80d95c:	080da600 	call	80da60 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
  80d960:	e037883a 	mov	sp,fp
  80d964:	dfc00117 	ldw	ra,4(sp)
  80d968:	df000017 	ldw	fp,0(sp)
  80d96c:	dec00204 	addi	sp,sp,8
  80d970:	f800283a 	ret

0080d974 <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
  80d974:	defff704 	addi	sp,sp,-36
  80d978:	df000815 	stw	fp,32(sp)
  80d97c:	df000804 	addi	fp,sp,32
  80d980:	e13ffc15 	stw	r4,-16(fp)
  80d984:	e17ffd15 	stw	r5,-12(fp)
  80d988:	e1bffe15 	stw	r6,-8(fp)
  80d98c:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
  80d990:	e0bffc17 	ldw	r2,-16(fp)
  80d994:	10800017 	ldw	r2,0(r2)
  80d998:	e0bff915 	stw	r2,-28(fp)

  char * ptr = buffer;
  80d99c:	e0bffd17 	ldw	r2,-12(fp)
  80d9a0:	e0bff815 	stw	r2,-32(fp)
  char * end = buffer + space;
  80d9a4:	e0bffe17 	ldw	r2,-8(fp)
  80d9a8:	e0fffd17 	ldw	r3,-12(fp)
  80d9ac:	1885883a 	add	r2,r3,r2
  80d9b0:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
  80d9b4:	00001206 	br	80da00 <altera_avalon_jtag_uart_read+0x8c>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  80d9b8:	e0bff917 	ldw	r2,-28(fp)
  80d9bc:	10800037 	ldwio	r2,0(r2)
  80d9c0:	e0bffb15 	stw	r2,-20(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
  80d9c4:	e0bffb17 	ldw	r2,-20(fp)
  80d9c8:	10a0000c 	andi	r2,r2,32768
  80d9cc:	10000626 	beq	r2,zero,80d9e8 <altera_avalon_jtag_uart_read+0x74>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  80d9d0:	e0bff817 	ldw	r2,-32(fp)
  80d9d4:	10c00044 	addi	r3,r2,1
  80d9d8:	e0fff815 	stw	r3,-32(fp)
  80d9dc:	e0fffb17 	ldw	r3,-20(fp)
  80d9e0:	10c00005 	stb	r3,0(r2)
  80d9e4:	00000606 	br	80da00 <altera_avalon_jtag_uart_read+0x8c>
    else if (ptr != buffer)
  80d9e8:	e0fff817 	ldw	r3,-32(fp)
  80d9ec:	e0bffd17 	ldw	r2,-12(fp)
  80d9f0:	1880071e 	bne	r3,r2,80da10 <altera_avalon_jtag_uart_read+0x9c>
      break;
    else if(flags & O_NONBLOCK)
  80d9f4:	e0bfff17 	ldw	r2,-4(fp)
  80d9f8:	1090000c 	andi	r2,r2,16384
  80d9fc:	1000061e 	bne	r2,zero,80da18 <altera_avalon_jtag_uart_read+0xa4>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
  80da00:	e0fff817 	ldw	r3,-32(fp)
  80da04:	e0bffa17 	ldw	r2,-24(fp)
  80da08:	18bfeb36 	bltu	r3,r2,80d9b8 <__alt_data_end+0xff80d9b8>
  80da0c:	00000306 	br	80da1c <altera_avalon_jtag_uart_read+0xa8>
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
  80da10:	0001883a 	nop
  80da14:	00000106 	br	80da1c <altera_avalon_jtag_uart_read+0xa8>
    else if(flags & O_NONBLOCK)
      break;   
  80da18:	0001883a 	nop
    
  }

  if (ptr != buffer)
  80da1c:	e0fff817 	ldw	r3,-32(fp)
  80da20:	e0bffd17 	ldw	r2,-12(fp)
  80da24:	18800426 	beq	r3,r2,80da38 <altera_avalon_jtag_uart_read+0xc4>
    return ptr - buffer;
  80da28:	e0fff817 	ldw	r3,-32(fp)
  80da2c:	e0bffd17 	ldw	r2,-12(fp)
  80da30:	1885c83a 	sub	r2,r3,r2
  80da34:	00000606 	br	80da50 <altera_avalon_jtag_uart_read+0xdc>
  else if (flags & O_NONBLOCK)
  80da38:	e0bfff17 	ldw	r2,-4(fp)
  80da3c:	1090000c 	andi	r2,r2,16384
  80da40:	10000226 	beq	r2,zero,80da4c <altera_avalon_jtag_uart_read+0xd8>
    return -EWOULDBLOCK;
  80da44:	00bffd44 	movi	r2,-11
  80da48:	00000106 	br	80da50 <altera_avalon_jtag_uart_read+0xdc>
  else
    return -EIO;
  80da4c:	00bffec4 	movi	r2,-5
}
  80da50:	e037883a 	mov	sp,fp
  80da54:	df000017 	ldw	fp,0(sp)
  80da58:	dec00104 	addi	sp,sp,4
  80da5c:	f800283a 	ret

0080da60 <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  80da60:	defff904 	addi	sp,sp,-28
  80da64:	df000615 	stw	fp,24(sp)
  80da68:	df000604 	addi	fp,sp,24
  80da6c:	e13ffc15 	stw	r4,-16(fp)
  80da70:	e17ffd15 	stw	r5,-12(fp)
  80da74:	e1bffe15 	stw	r6,-8(fp)
  80da78:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
  80da7c:	e0bffc17 	ldw	r2,-16(fp)
  80da80:	10800017 	ldw	r2,0(r2)
  80da84:	e0bffa15 	stw	r2,-24(fp)

  const char * end = ptr + count;
  80da88:	e0bffe17 	ldw	r2,-8(fp)
  80da8c:	e0fffd17 	ldw	r3,-12(fp)
  80da90:	1885883a 	add	r2,r3,r2
  80da94:	e0bffb15 	stw	r2,-20(fp)

  while (ptr < end)
  80da98:	00000e06 	br	80dad4 <altera_avalon_jtag_uart_write+0x74>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
  80da9c:	e0bffa17 	ldw	r2,-24(fp)
  80daa0:	10800104 	addi	r2,r2,4
  80daa4:	10800037 	ldwio	r2,0(r2)
  80daa8:	10bfffec 	andhi	r2,r2,65535
  80daac:	10000926 	beq	r2,zero,80dad4 <altera_avalon_jtag_uart_write+0x74>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
  80dab0:	e0fffa17 	ldw	r3,-24(fp)
  80dab4:	e0bffd17 	ldw	r2,-12(fp)
  80dab8:	11000044 	addi	r4,r2,1
  80dabc:	e13ffd15 	stw	r4,-12(fp)
  80dac0:	10800003 	ldbu	r2,0(r2)
  80dac4:	10803fcc 	andi	r2,r2,255
  80dac8:	1080201c 	xori	r2,r2,128
  80dacc:	10bfe004 	addi	r2,r2,-128
  80dad0:	18800035 	stwio	r2,0(r3)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
  80dad4:	e0fffd17 	ldw	r3,-12(fp)
  80dad8:	e0bffb17 	ldw	r2,-20(fp)
  80dadc:	18bfef36 	bltu	r3,r2,80da9c <__alt_data_end+0xff80da9c>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
  80dae0:	e0bffe17 	ldw	r2,-8(fp)
}
  80dae4:	e037883a 	mov	sp,fp
  80dae8:	df000017 	ldw	fp,0(sp)
  80daec:	dec00104 	addi	sp,sp,4
  80daf0:	f800283a 	ret

0080daf4 <lcd_write_command>:

/* --------------------------------------------------------------------- */

static void lcd_write_command(altera_avalon_lcd_16207_state* sp, 
  unsigned char command)
{
  80daf4:	defffa04 	addi	sp,sp,-24
  80daf8:	dfc00515 	stw	ra,20(sp)
  80dafc:	df000415 	stw	fp,16(sp)
  80db00:	df000404 	addi	fp,sp,16
  80db04:	e13ffe15 	stw	r4,-8(fp)
  80db08:	2805883a 	mov	r2,r5
  80db0c:	e0bfff05 	stb	r2,-4(fp)
  unsigned int base = sp->base;
  80db10:	e0bffe17 	ldw	r2,-8(fp)
  80db14:	10800017 	ldw	r2,0(r2)
  80db18:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
  80db1c:	008003f4 	movhi	r2,15
  80db20:	10909004 	addi	r2,r2,16960
  80db24:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
  80db28:	e0bffe17 	ldw	r2,-8(fp)
  80db2c:	10800803 	ldbu	r2,32(r2)
  80db30:	10803fcc 	andi	r2,r2,255
  80db34:	1080201c 	xori	r2,r2,128
  80db38:	10bfe004 	addi	r2,r2,-128
  80db3c:	1000151e 	bne	r2,zero,80db94 <lcd_write_command+0xa0>
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  80db40:	00000906 	br	80db68 <lcd_write_command+0x74>
    if (--i == 0)
  80db44:	e0bffc17 	ldw	r2,-16(fp)
  80db48:	10bfffc4 	addi	r2,r2,-1
  80db4c:	e0bffc15 	stw	r2,-16(fp)
  80db50:	e0bffc17 	ldw	r2,-16(fp)
  80db54:	1000041e 	bne	r2,zero,80db68 <lcd_write_command+0x74>
    {
      sp->broken = 1;
  80db58:	e0bffe17 	ldw	r2,-8(fp)
  80db5c:	00c00044 	movi	r3,1
  80db60:	10c00805 	stb	r3,32(r2)
      return;
  80db64:	00000c06 	br	80db98 <lcd_write_command+0xa4>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  80db68:	e0bffd17 	ldw	r2,-12(fp)
  80db6c:	10800104 	addi	r2,r2,4
  80db70:	10800037 	ldwio	r2,0(r2)
  80db74:	1080200c 	andi	r2,r2,128
  80db78:	103ff21e 	bne	r2,zero,80db44 <__alt_data_end+0xff80db44>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
  80db7c:	01001904 	movi	r4,100
  80db80:	080fc140 	call	80fc14 <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, command);
  80db84:	e0bffd17 	ldw	r2,-12(fp)
  80db88:	e0ffff03 	ldbu	r3,-4(fp)
  80db8c:	10c00035 	stwio	r3,0(r2)
  80db90:	00000106 	br	80db98 <lcd_write_command+0xa4>
   */
  int i = 1000000;

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;
  80db94:	0001883a 	nop
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);

  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, command);
}
  80db98:	e037883a 	mov	sp,fp
  80db9c:	dfc00117 	ldw	ra,4(sp)
  80dba0:	df000017 	ldw	fp,0(sp)
  80dba4:	dec00204 	addi	sp,sp,8
  80dba8:	f800283a 	ret

0080dbac <lcd_write_data>:

/* --------------------------------------------------------------------- */

static void lcd_write_data(altera_avalon_lcd_16207_state* sp, 
  unsigned char data)
{
  80dbac:	defffa04 	addi	sp,sp,-24
  80dbb0:	dfc00515 	stw	ra,20(sp)
  80dbb4:	df000415 	stw	fp,16(sp)
  80dbb8:	df000404 	addi	fp,sp,16
  80dbbc:	e13ffe15 	stw	r4,-8(fp)
  80dbc0:	2805883a 	mov	r2,r5
  80dbc4:	e0bfff05 	stb	r2,-4(fp)
  unsigned int base = sp->base;
  80dbc8:	e0bffe17 	ldw	r2,-8(fp)
  80dbcc:	10800017 	ldw	r2,0(r2)
  80dbd0:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
  80dbd4:	008003f4 	movhi	r2,15
  80dbd8:	10909004 	addi	r2,r2,16960
  80dbdc:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
  80dbe0:	e0bffe17 	ldw	r2,-8(fp)
  80dbe4:	10800803 	ldbu	r2,32(r2)
  80dbe8:	10803fcc 	andi	r2,r2,255
  80dbec:	1080201c 	xori	r2,r2,128
  80dbf0:	10bfe004 	addi	r2,r2,-128
  80dbf4:	10001d1e 	bne	r2,zero,80dc6c <lcd_write_data+0xc0>
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  80dbf8:	00000906 	br	80dc20 <lcd_write_data+0x74>
    if (--i == 0)
  80dbfc:	e0bffc17 	ldw	r2,-16(fp)
  80dc00:	10bfffc4 	addi	r2,r2,-1
  80dc04:	e0bffc15 	stw	r2,-16(fp)
  80dc08:	e0bffc17 	ldw	r2,-16(fp)
  80dc0c:	1000041e 	bne	r2,zero,80dc20 <lcd_write_data+0x74>
    {
      sp->broken = 1;
  80dc10:	e0bffe17 	ldw	r2,-8(fp)
  80dc14:	00c00044 	movi	r3,1
  80dc18:	10c00805 	stb	r3,32(r2)
      return;
  80dc1c:	00001406 	br	80dc70 <lcd_write_data+0xc4>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
  80dc20:	e0bffd17 	ldw	r2,-12(fp)
  80dc24:	10800104 	addi	r2,r2,4
  80dc28:	10800037 	ldwio	r2,0(r2)
  80dc2c:	1080200c 	andi	r2,r2,128
  80dc30:	103ff21e 	bne	r2,zero,80dbfc <__alt_data_end+0xff80dbfc>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
  80dc34:	01001904 	movi	r4,100
  80dc38:	080fc140 	call	80fc14 <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_DATA(base, data);
  80dc3c:	e0bffd17 	ldw	r2,-12(fp)
  80dc40:	10800204 	addi	r2,r2,8
  80dc44:	1007883a 	mov	r3,r2
  80dc48:	e0bfff03 	ldbu	r2,-4(fp)
  80dc4c:	18800035 	stwio	r2,0(r3)

  sp->address++;
  80dc50:	e0bffe17 	ldw	r2,-8(fp)
  80dc54:	108008c3 	ldbu	r2,35(r2)
  80dc58:	10800044 	addi	r2,r2,1
  80dc5c:	1007883a 	mov	r3,r2
  80dc60:	e0bffe17 	ldw	r2,-8(fp)
  80dc64:	10c008c5 	stb	r3,35(r2)
  80dc68:	00000106 	br	80dc70 <lcd_write_data+0xc4>
   */
  int i = 1000000;

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;
  80dc6c:	0001883a 	nop
  usleep(100);

  IOWR_ALTERA_AVALON_LCD_16207_DATA(base, data);

  sp->address++;
}
  80dc70:	e037883a 	mov	sp,fp
  80dc74:	dfc00117 	ldw	ra,4(sp)
  80dc78:	df000017 	ldw	fp,0(sp)
  80dc7c:	dec00204 	addi	sp,sp,8
  80dc80:	f800283a 	ret

0080dc84 <lcd_clear_screen>:

/* --------------------------------------------------------------------- */

static void lcd_clear_screen(altera_avalon_lcd_16207_state* sp)
{
  80dc84:	defffc04 	addi	sp,sp,-16
  80dc88:	dfc00315 	stw	ra,12(sp)
  80dc8c:	df000215 	stw	fp,8(sp)
  80dc90:	df000204 	addi	fp,sp,8
  80dc94:	e13fff15 	stw	r4,-4(fp)
  int y;

  lcd_write_command(sp, LCD_CMD_CLEAR);
  80dc98:	01400044 	movi	r5,1
  80dc9c:	e13fff17 	ldw	r4,-4(fp)
  80dca0:	080daf40 	call	80daf4 <lcd_write_command>

  sp->x = 0;
  80dca4:	e0bfff17 	ldw	r2,-4(fp)
  80dca8:	10000845 	stb	zero,33(r2)
  sp->y = 0;
  80dcac:	e0bfff17 	ldw	r2,-4(fp)
  80dcb0:	10000885 	stb	zero,34(r2)
  sp->address = 0;
  80dcb4:	e0bfff17 	ldw	r2,-4(fp)
  80dcb8:	100008c5 	stb	zero,35(r2)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80dcbc:	e03ffe15 	stw	zero,-8(fp)
  80dcc0:	00001b06 	br	80dd30 <lcd_clear_screen+0xac>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
  80dcc4:	e0bffe17 	ldw	r2,-8(fp)
  80dcc8:	108018e4 	muli	r2,r2,99
  80dccc:	10801004 	addi	r2,r2,64
  80dcd0:	e0ffff17 	ldw	r3,-4(fp)
  80dcd4:	1885883a 	add	r2,r3,r2
  80dcd8:	01801444 	movi	r6,81
  80dcdc:	01400804 	movi	r5,32
  80dce0:	1009883a 	mov	r4,r2
  80dce4:	0805a840 	call	805a84 <memset>
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
  80dce8:	e0bffe17 	ldw	r2,-8(fp)
  80dcec:	108018e4 	muli	r2,r2,99
  80dcf0:	10800c04 	addi	r2,r2,48
  80dcf4:	e0ffff17 	ldw	r3,-4(fp)
  80dcf8:	1885883a 	add	r2,r3,r2
  80dcfc:	01800404 	movi	r6,16
  80dd00:	01400804 	movi	r5,32
  80dd04:	1009883a 	mov	r4,r2
  80dd08:	0805a840 	call	805a84 <memset>
    sp->line[y].width = 0;
  80dd0c:	e0ffff17 	ldw	r3,-4(fp)
  80dd10:	e0bffe17 	ldw	r2,-8(fp)
  80dd14:	108018e4 	muli	r2,r2,99
  80dd18:	1885883a 	add	r2,r3,r2
  80dd1c:	10802444 	addi	r2,r2,145
  80dd20:	10000005 	stb	zero,0(r2)

  sp->x = 0;
  sp->y = 0;
  sp->address = 0;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80dd24:	e0bffe17 	ldw	r2,-8(fp)
  80dd28:	10800044 	addi	r2,r2,1
  80dd2c:	e0bffe15 	stw	r2,-8(fp)
  80dd30:	e0bffe17 	ldw	r2,-8(fp)
  80dd34:	10800090 	cmplti	r2,r2,2
  80dd38:	103fe21e 	bne	r2,zero,80dcc4 <__alt_data_end+0xff80dcc4>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
    sp->line[y].width = 0;
  }
}
  80dd3c:	0001883a 	nop
  80dd40:	e037883a 	mov	sp,fp
  80dd44:	dfc00117 	ldw	ra,4(sp)
  80dd48:	df000017 	ldw	fp,0(sp)
  80dd4c:	dec00204 	addi	sp,sp,8
  80dd50:	f800283a 	ret

0080dd54 <lcd_repaint_screen>:

/* --------------------------------------------------------------------- */

static void lcd_repaint_screen(altera_avalon_lcd_16207_state* sp)
{
  80dd54:	defff704 	addi	sp,sp,-36
  80dd58:	dfc00815 	stw	ra,32(sp)
  80dd5c:	df000715 	stw	fp,28(sp)
  80dd60:	df000704 	addi	fp,sp,28
  80dd64:	e13fff15 	stw	r4,-4(fp)
  /* scrollpos controls how much the lines have scrolled round.  The speed
   * each line scrolls at is controlled by its speed variable - while
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;
  80dd68:	e0bfff17 	ldw	r2,-4(fp)
  80dd6c:	10800943 	ldbu	r2,37(r2)
  80dd70:	10803fcc 	andi	r2,r2,255
  80dd74:	e0bffc15 	stw	r2,-16(fp)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80dd78:	e03ff915 	stw	zero,-28(fp)
  80dd7c:	00006706 	br	80df1c <lcd_repaint_screen+0x1c8>
  {
    int width  = sp->line[y].width;
  80dd80:	e0ffff17 	ldw	r3,-4(fp)
  80dd84:	e0bff917 	ldw	r2,-28(fp)
  80dd88:	108018e4 	muli	r2,r2,99
  80dd8c:	1885883a 	add	r2,r3,r2
  80dd90:	10802444 	addi	r2,r2,145
  80dd94:	10800003 	ldbu	r2,0(r2)
  80dd98:	10803fcc 	andi	r2,r2,255
  80dd9c:	1080201c 	xori	r2,r2,128
  80dda0:	10bfe004 	addi	r2,r2,-128
  80dda4:	e0bffd15 	stw	r2,-12(fp)
    int offset = (scrollpos * sp->line[y].speed) >> 8;
  80dda8:	e0ffff17 	ldw	r3,-4(fp)
  80ddac:	e0bff917 	ldw	r2,-28(fp)
  80ddb0:	108018e4 	muli	r2,r2,99
  80ddb4:	1885883a 	add	r2,r3,r2
  80ddb8:	10802484 	addi	r2,r2,146
  80ddbc:	10800003 	ldbu	r2,0(r2)
  80ddc0:	10c03fcc 	andi	r3,r2,255
  80ddc4:	e0bffc17 	ldw	r2,-16(fp)
  80ddc8:	1885383a 	mul	r2,r3,r2
  80ddcc:	1005d23a 	srai	r2,r2,8
  80ddd0:	e0bffb15 	stw	r2,-20(fp)
    if (offset >= width)
  80ddd4:	e0fffb17 	ldw	r3,-20(fp)
  80ddd8:	e0bffd17 	ldw	r2,-12(fp)
  80dddc:	18800116 	blt	r3,r2,80dde4 <lcd_repaint_screen+0x90>
      offset = 0;
  80dde0:	e03ffb15 	stw	zero,-20(fp)

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
  80dde4:	e03ffa15 	stw	zero,-24(fp)
  80dde8:	00004606 	br	80df04 <lcd_repaint_screen+0x1b0>
    {
      char c = sp->line[y].data[(x + offset) % width];
  80ddec:	e0fffa17 	ldw	r3,-24(fp)
  80ddf0:	e0bffb17 	ldw	r2,-20(fp)
  80ddf4:	1885883a 	add	r2,r3,r2
  80ddf8:	e17ffd17 	ldw	r5,-12(fp)
  80ddfc:	1009883a 	mov	r4,r2
  80de00:	080a54c0 	call	80a54c <__modsi3>
  80de04:	1009883a 	mov	r4,r2
  80de08:	e0ffff17 	ldw	r3,-4(fp)
  80de0c:	e0bff917 	ldw	r2,-28(fp)
  80de10:	108018e4 	muli	r2,r2,99
  80de14:	1885883a 	add	r2,r3,r2
  80de18:	1105883a 	add	r2,r2,r4
  80de1c:	10801004 	addi	r2,r2,64
  80de20:	10800003 	ldbu	r2,0(r2)
  80de24:	e0bffe05 	stb	r2,-8(fp)

      /* Writing data takes 40us, so don't do it unless required */
      if (sp->line[y].visible[x] != c)
  80de28:	e0ffff17 	ldw	r3,-4(fp)
  80de2c:	e0bff917 	ldw	r2,-28(fp)
  80de30:	108018e4 	muli	r2,r2,99
  80de34:	1887883a 	add	r3,r3,r2
  80de38:	e0bffa17 	ldw	r2,-24(fp)
  80de3c:	1885883a 	add	r2,r3,r2
  80de40:	10800c04 	addi	r2,r2,48
  80de44:	10800003 	ldbu	r2,0(r2)
  80de48:	10c03fcc 	andi	r3,r2,255
  80de4c:	18c0201c 	xori	r3,r3,128
  80de50:	18ffe004 	addi	r3,r3,-128
  80de54:	e0bffe07 	ldb	r2,-8(fp)
  80de58:	18802726 	beq	r3,r2,80def8 <lcd_repaint_screen+0x1a4>
      {
        unsigned char address = x + colstart[y];
  80de5c:	e0fff917 	ldw	r3,-28(fp)
  80de60:	d0a00f04 	addi	r2,gp,-32708
  80de64:	1885883a 	add	r2,r3,r2
  80de68:	10800003 	ldbu	r2,0(r2)
  80de6c:	1007883a 	mov	r3,r2
  80de70:	e0bffa17 	ldw	r2,-24(fp)
  80de74:	1885883a 	add	r2,r3,r2
  80de78:	e0bffe45 	stb	r2,-7(fp)

        if (address != sp->address)
  80de7c:	e0fffe43 	ldbu	r3,-7(fp)
  80de80:	e0bfff17 	ldw	r2,-4(fp)
  80de84:	108008c3 	ldbu	r2,35(r2)
  80de88:	10803fcc 	andi	r2,r2,255
  80de8c:	1080201c 	xori	r2,r2,128
  80de90:	10bfe004 	addi	r2,r2,-128
  80de94:	18800a26 	beq	r3,r2,80dec0 <lcd_repaint_screen+0x16c>
        {
          lcd_write_command(sp, LCD_CMD_WRITE_DATA | address);
  80de98:	e0fffe43 	ldbu	r3,-7(fp)
  80de9c:	00bfe004 	movi	r2,-128
  80dea0:	1884b03a 	or	r2,r3,r2
  80dea4:	10803fcc 	andi	r2,r2,255
  80dea8:	100b883a 	mov	r5,r2
  80deac:	e13fff17 	ldw	r4,-4(fp)
  80deb0:	080daf40 	call	80daf4 <lcd_write_command>
          sp->address = address;
  80deb4:	e0fffe43 	ldbu	r3,-7(fp)
  80deb8:	e0bfff17 	ldw	r2,-4(fp)
  80debc:	10c008c5 	stb	r3,35(r2)
        }

        lcd_write_data(sp, c);
  80dec0:	e0bffe03 	ldbu	r2,-8(fp)
  80dec4:	10803fcc 	andi	r2,r2,255
  80dec8:	100b883a 	mov	r5,r2
  80decc:	e13fff17 	ldw	r4,-4(fp)
  80ded0:	080dbac0 	call	80dbac <lcd_write_data>
        sp->line[y].visible[x] = c;
  80ded4:	e0ffff17 	ldw	r3,-4(fp)
  80ded8:	e0bff917 	ldw	r2,-28(fp)
  80dedc:	108018e4 	muli	r2,r2,99
  80dee0:	1887883a 	add	r3,r3,r2
  80dee4:	e0bffa17 	ldw	r2,-24(fp)
  80dee8:	1885883a 	add	r2,r3,r2
  80deec:	10800c04 	addi	r2,r2,48
  80def0:	e0fffe03 	ldbu	r3,-8(fp)
  80def4:	10c00005 	stb	r3,0(r2)
    int width  = sp->line[y].width;
    int offset = (scrollpos * sp->line[y].speed) >> 8;
    if (offset >= width)
      offset = 0;

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
  80def8:	e0bffa17 	ldw	r2,-24(fp)
  80defc:	10800044 	addi	r2,r2,1
  80df00:	e0bffa15 	stw	r2,-24(fp)
  80df04:	e0bffa17 	ldw	r2,-24(fp)
  80df08:	10800410 	cmplti	r2,r2,16
  80df0c:	103fb71e 	bne	r2,zero,80ddec <__alt_data_end+0xff80ddec>
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80df10:	e0bff917 	ldw	r2,-28(fp)
  80df14:	10800044 	addi	r2,r2,1
  80df18:	e0bff915 	stw	r2,-28(fp)
  80df1c:	e0bff917 	ldw	r2,-28(fp)
  80df20:	10800090 	cmplti	r2,r2,2
  80df24:	103f961e 	bne	r2,zero,80dd80 <__alt_data_end+0xff80dd80>
        lcd_write_data(sp, c);
        sp->line[y].visible[x] = c;
      }
    }
  }
}
  80df28:	0001883a 	nop
  80df2c:	e037883a 	mov	sp,fp
  80df30:	dfc00117 	ldw	ra,4(sp)
  80df34:	df000017 	ldw	fp,0(sp)
  80df38:	dec00204 	addi	sp,sp,8
  80df3c:	f800283a 	ret

0080df40 <lcd_scroll_up>:

/* --------------------------------------------------------------------- */

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
  80df40:	defffc04 	addi	sp,sp,-16
  80df44:	dfc00315 	stw	ra,12(sp)
  80df48:	df000215 	stw	fp,8(sp)
  80df4c:	df000204 	addi	fp,sp,8
  80df50:	e13fff15 	stw	r4,-4(fp)
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80df54:	e03ffe15 	stw	zero,-8(fp)
  80df58:	00001d06 	br	80dfd0 <lcd_scroll_up+0x90>
  {
    if (y < ALT_LCD_HEIGHT-1)
  80df5c:	e0bffe17 	ldw	r2,-8(fp)
  80df60:	00800f16 	blt	zero,r2,80dfa0 <lcd_scroll_up+0x60>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
  80df64:	e0bffe17 	ldw	r2,-8(fp)
  80df68:	108018e4 	muli	r2,r2,99
  80df6c:	10801004 	addi	r2,r2,64
  80df70:	e0ffff17 	ldw	r3,-4(fp)
  80df74:	1889883a 	add	r4,r3,r2
  80df78:	e0bffe17 	ldw	r2,-8(fp)
  80df7c:	10800044 	addi	r2,r2,1
  80df80:	108018e4 	muli	r2,r2,99
  80df84:	10801004 	addi	r2,r2,64
  80df88:	e0ffff17 	ldw	r3,-4(fp)
  80df8c:	1885883a 	add	r2,r3,r2
  80df90:	01801404 	movi	r6,80
  80df94:	100b883a 	mov	r5,r2
  80df98:	080593c0 	call	80593c <memcpy>
  80df9c:	00000906 	br	80dfc4 <lcd_scroll_up+0x84>
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
  80dfa0:	e0bffe17 	ldw	r2,-8(fp)
  80dfa4:	108018e4 	muli	r2,r2,99
  80dfa8:	10801004 	addi	r2,r2,64
  80dfac:	e0ffff17 	ldw	r3,-4(fp)
  80dfb0:	1885883a 	add	r2,r3,r2
  80dfb4:	01801404 	movi	r6,80
  80dfb8:	01400804 	movi	r5,32
  80dfbc:	1009883a 	mov	r4,r2
  80dfc0:	0805a840 	call	805a84 <memset>

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80dfc4:	e0bffe17 	ldw	r2,-8(fp)
  80dfc8:	10800044 	addi	r2,r2,1
  80dfcc:	e0bffe15 	stw	r2,-8(fp)
  80dfd0:	e0bffe17 	ldw	r2,-8(fp)
  80dfd4:	10800090 	cmplti	r2,r2,2
  80dfd8:	103fe01e 	bne	r2,zero,80df5c <__alt_data_end+0xff80df5c>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
  }

  sp->y--;
  80dfdc:	e0bfff17 	ldw	r2,-4(fp)
  80dfe0:	10800883 	ldbu	r2,34(r2)
  80dfe4:	10bfffc4 	addi	r2,r2,-1
  80dfe8:	1007883a 	mov	r3,r2
  80dfec:	e0bfff17 	ldw	r2,-4(fp)
  80dff0:	10c00885 	stb	r3,34(r2)
}
  80dff4:	0001883a 	nop
  80dff8:	e037883a 	mov	sp,fp
  80dffc:	dfc00117 	ldw	ra,4(sp)
  80e000:	df000017 	ldw	fp,0(sp)
  80e004:	dec00204 	addi	sp,sp,8
  80e008:	f800283a 	ret

0080e00c <lcd_handle_escape>:

/* --------------------------------------------------------------------- */

static void lcd_handle_escape(altera_avalon_lcd_16207_state* sp, char c)
{
  80e00c:	defff904 	addi	sp,sp,-28
  80e010:	dfc00615 	stw	ra,24(sp)
  80e014:	df000515 	stw	fp,20(sp)
  80e018:	df000504 	addi	fp,sp,20
  80e01c:	e13ffe15 	stw	r4,-8(fp)
  80e020:	2805883a 	mov	r2,r5
  80e024:	e0bfff05 	stb	r2,-4(fp)
  int parm1 = 0, parm2 = 0;
  80e028:	e03ffb15 	stw	zero,-20(fp)
  80e02c:	e03ffc15 	stw	zero,-16(fp)

  if (sp->escape[0] == '[')
  80e030:	e0bffe17 	ldw	r2,-8(fp)
  80e034:	10800a03 	ldbu	r2,40(r2)
  80e038:	10803fcc 	andi	r2,r2,255
  80e03c:	1080201c 	xori	r2,r2,128
  80e040:	10bfe004 	addi	r2,r2,-128
  80e044:	108016d8 	cmpnei	r2,r2,91
  80e048:	1000411e 	bne	r2,zero,80e150 <lcd_handle_escape+0x144>
  {
    char * ptr = sp->escape+1;
  80e04c:	e0bffe17 	ldw	r2,-8(fp)
  80e050:	10800a04 	addi	r2,r2,40
  80e054:	10800044 	addi	r2,r2,1
  80e058:	e0bffd15 	stw	r2,-12(fp)
    while (isdigit(*ptr))
  80e05c:	00000c06 	br	80e090 <lcd_handle_escape+0x84>
      parm1 = (parm1 * 10) + (*ptr++ - '0');
  80e060:	e0bffb17 	ldw	r2,-20(fp)
  80e064:	10c002a4 	muli	r3,r2,10
  80e068:	e0bffd17 	ldw	r2,-12(fp)
  80e06c:	11000044 	addi	r4,r2,1
  80e070:	e13ffd15 	stw	r4,-12(fp)
  80e074:	10800003 	ldbu	r2,0(r2)
  80e078:	10803fcc 	andi	r2,r2,255
  80e07c:	1080201c 	xori	r2,r2,128
  80e080:	10bfe004 	addi	r2,r2,-128
  80e084:	10bff404 	addi	r2,r2,-48
  80e088:	1885883a 	add	r2,r3,r2
  80e08c:	e0bffb15 	stw	r2,-20(fp)
  int parm1 = 0, parm2 = 0;

  if (sp->escape[0] == '[')
  {
    char * ptr = sp->escape+1;
    while (isdigit(*ptr))
  80e090:	d0e01217 	ldw	r3,-32696(gp)
  80e094:	e0bffd17 	ldw	r2,-12(fp)
  80e098:	10800003 	ldbu	r2,0(r2)
  80e09c:	10803fcc 	andi	r2,r2,255
  80e0a0:	1080201c 	xori	r2,r2,128
  80e0a4:	10bfe004 	addi	r2,r2,-128
  80e0a8:	10800044 	addi	r2,r2,1
  80e0ac:	1885883a 	add	r2,r3,r2
  80e0b0:	10800003 	ldbu	r2,0(r2)
  80e0b4:	10803fcc 	andi	r2,r2,255
  80e0b8:	1080010c 	andi	r2,r2,4
  80e0bc:	103fe81e 	bne	r2,zero,80e060 <__alt_data_end+0xff80e060>
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
  80e0c0:	e0bffd17 	ldw	r2,-12(fp)
  80e0c4:	10800003 	ldbu	r2,0(r2)
  80e0c8:	10803fcc 	andi	r2,r2,255
  80e0cc:	1080201c 	xori	r2,r2,128
  80e0d0:	10bfe004 	addi	r2,r2,-128
  80e0d4:	10800ed8 	cmpnei	r2,r2,59
  80e0d8:	10001f1e 	bne	r2,zero,80e158 <lcd_handle_escape+0x14c>
    {
      ptr++;
  80e0dc:	e0bffd17 	ldw	r2,-12(fp)
  80e0e0:	10800044 	addi	r2,r2,1
  80e0e4:	e0bffd15 	stw	r2,-12(fp)
      while (isdigit(*ptr))
  80e0e8:	00000c06 	br	80e11c <lcd_handle_escape+0x110>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
  80e0ec:	e0bffc17 	ldw	r2,-16(fp)
  80e0f0:	10c002a4 	muli	r3,r2,10
  80e0f4:	e0bffd17 	ldw	r2,-12(fp)
  80e0f8:	11000044 	addi	r4,r2,1
  80e0fc:	e13ffd15 	stw	r4,-12(fp)
  80e100:	10800003 	ldbu	r2,0(r2)
  80e104:	10803fcc 	andi	r2,r2,255
  80e108:	1080201c 	xori	r2,r2,128
  80e10c:	10bfe004 	addi	r2,r2,-128
  80e110:	10bff404 	addi	r2,r2,-48
  80e114:	1885883a 	add	r2,r3,r2
  80e118:	e0bffc15 	stw	r2,-16(fp)
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
    {
      ptr++;
      while (isdigit(*ptr))
  80e11c:	d0e01217 	ldw	r3,-32696(gp)
  80e120:	e0bffd17 	ldw	r2,-12(fp)
  80e124:	10800003 	ldbu	r2,0(r2)
  80e128:	10803fcc 	andi	r2,r2,255
  80e12c:	1080201c 	xori	r2,r2,128
  80e130:	10bfe004 	addi	r2,r2,-128
  80e134:	10800044 	addi	r2,r2,1
  80e138:	1885883a 	add	r2,r3,r2
  80e13c:	10800003 	ldbu	r2,0(r2)
  80e140:	10803fcc 	andi	r2,r2,255
  80e144:	1080010c 	andi	r2,r2,4
  80e148:	103fe81e 	bne	r2,zero,80e0ec <__alt_data_end+0xff80e0ec>
  80e14c:	00000206 	br	80e158 <lcd_handle_escape+0x14c>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
    }
  }
  else
    parm1 = -1;
  80e150:	00bfffc4 	movi	r2,-1
  80e154:	e0bffb15 	stw	r2,-20(fp)

  switch (c)
  80e158:	e0bfff07 	ldb	r2,-4(fp)
  80e15c:	10c012a0 	cmpeqi	r3,r2,74
  80e160:	1800291e 	bne	r3,zero,80e208 <lcd_handle_escape+0x1fc>
  80e164:	10c012c8 	cmpgei	r3,r2,75
  80e168:	1800031e 	bne	r3,zero,80e178 <lcd_handle_escape+0x16c>
  80e16c:	10801220 	cmpeqi	r2,r2,72
  80e170:	1000061e 	bne	r2,zero,80e18c <lcd_handle_escape+0x180>
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
    }
    break;
  }
}
  80e174:	00004a06 	br	80e2a0 <lcd_handle_escape+0x294>
    }
  }
  else
    parm1 = -1;

  switch (c)
  80e178:	10c012e0 	cmpeqi	r3,r2,75
  80e17c:	1800281e 	bne	r3,zero,80e220 <lcd_handle_escape+0x214>
  80e180:	108019a0 	cmpeqi	r2,r2,102
  80e184:	1000011e 	bne	r2,zero,80e18c <lcd_handle_escape+0x180>
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
    }
    break;
  }
}
  80e188:	00004506 	br	80e2a0 <lcd_handle_escape+0x294>

  switch (c)
  {
  case 'H': /* ESC '[' <y> ';' <x> 'H'  : Move cursor to location */
  case 'f': /* Same as above */
    if (parm2 > 0)
  80e18c:	e0bffc17 	ldw	r2,-16(fp)
  80e190:	0080050e 	bge	zero,r2,80e1a8 <lcd_handle_escape+0x19c>
      sp->x = parm2 - 1;
  80e194:	e0bffc17 	ldw	r2,-16(fp)
  80e198:	10bfffc4 	addi	r2,r2,-1
  80e19c:	1007883a 	mov	r3,r2
  80e1a0:	e0bffe17 	ldw	r2,-8(fp)
  80e1a4:	10c00845 	stb	r3,33(r2)
    if (parm1 > 0)
  80e1a8:	e0bffb17 	ldw	r2,-20(fp)
  80e1ac:	0080370e 	bge	zero,r2,80e28c <lcd_handle_escape+0x280>
    {
      sp->y = parm1 - 1;
  80e1b0:	e0bffb17 	ldw	r2,-20(fp)
  80e1b4:	10bfffc4 	addi	r2,r2,-1
  80e1b8:	1007883a 	mov	r3,r2
  80e1bc:	e0bffe17 	ldw	r2,-8(fp)
  80e1c0:	10c00885 	stb	r3,34(r2)
      if (sp->y > ALT_LCD_HEIGHT * 2)
  80e1c4:	e0bffe17 	ldw	r2,-8(fp)
  80e1c8:	10800883 	ldbu	r2,34(r2)
  80e1cc:	10803fcc 	andi	r2,r2,255
  80e1d0:	10800170 	cmpltui	r2,r2,5
  80e1d4:	1000061e 	bne	r2,zero,80e1f0 <lcd_handle_escape+0x1e4>
        sp->y = ALT_LCD_HEIGHT * 2;
  80e1d8:	e0bffe17 	ldw	r2,-8(fp)
  80e1dc:	00c00104 	movi	r3,4
  80e1e0:	10c00885 	stb	r3,34(r2)
      while (sp->y > ALT_LCD_HEIGHT)
  80e1e4:	00000206 	br	80e1f0 <lcd_handle_escape+0x1e4>
        lcd_scroll_up(sp);
  80e1e8:	e13ffe17 	ldw	r4,-8(fp)
  80e1ec:	080df400 	call	80df40 <lcd_scroll_up>
    if (parm1 > 0)
    {
      sp->y = parm1 - 1;
      if (sp->y > ALT_LCD_HEIGHT * 2)
        sp->y = ALT_LCD_HEIGHT * 2;
      while (sp->y > ALT_LCD_HEIGHT)
  80e1f0:	e0bffe17 	ldw	r2,-8(fp)
  80e1f4:	10800883 	ldbu	r2,34(r2)
  80e1f8:	10803fcc 	andi	r2,r2,255
  80e1fc:	108000e8 	cmpgeui	r2,r2,3
  80e200:	103ff91e 	bne	r2,zero,80e1e8 <__alt_data_end+0xff80e1e8>
        lcd_scroll_up(sp);
    }
    break;
  80e204:	00002106 	br	80e28c <lcd_handle_escape+0x280>
    /*   ESC J      is clear to beginning of line    [unimplemented]
     *   ESC [ 0 J  is clear to bottom of screen     [unimplemented]
     *   ESC [ 1 J  is clear to beginning of screen  [unimplemented]
     *   ESC [ 2 J  is clear screen
     */
    if (parm1 == 2)
  80e208:	e0bffb17 	ldw	r2,-20(fp)
  80e20c:	10800098 	cmpnei	r2,r2,2
  80e210:	1000201e 	bne	r2,zero,80e294 <lcd_handle_escape+0x288>
      lcd_clear_screen(sp);
  80e214:	e13ffe17 	ldw	r4,-8(fp)
  80e218:	080dc840 	call	80dc84 <lcd_clear_screen>
    break;
  80e21c:	00001d06 	br	80e294 <lcd_handle_escape+0x288>
    /*   ESC K      is clear to end of line
     *   ESC [ 0 K  is clear to end of line
     *   ESC [ 1 K  is clear to beginning of line    [unimplemented]
     *   ESC [ 2 K  is clear line                    [unimplemented]
     */
    if (parm1 < 1)
  80e220:	e0bffb17 	ldw	r2,-20(fp)
  80e224:	00801d16 	blt	zero,r2,80e29c <lcd_handle_escape+0x290>
    {
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
  80e228:	e0bffe17 	ldw	r2,-8(fp)
  80e22c:	10800843 	ldbu	r2,33(r2)
  80e230:	10803fcc 	andi	r2,r2,255
  80e234:	10801428 	cmpgeui	r2,r2,80
  80e238:	1000181e 	bne	r2,zero,80e29c <lcd_handle_escape+0x290>
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
  80e23c:	e0bffe17 	ldw	r2,-8(fp)
  80e240:	10800883 	ldbu	r2,34(r2)
  80e244:	10803fcc 	andi	r2,r2,255
  80e248:	108018e4 	muli	r2,r2,99
  80e24c:	10801004 	addi	r2,r2,64
  80e250:	e0fffe17 	ldw	r3,-8(fp)
  80e254:	1887883a 	add	r3,r3,r2
  80e258:	e0bffe17 	ldw	r2,-8(fp)
  80e25c:	10800843 	ldbu	r2,33(r2)
  80e260:	10803fcc 	andi	r2,r2,255
  80e264:	1889883a 	add	r4,r3,r2
  80e268:	e0bffe17 	ldw	r2,-8(fp)
  80e26c:	10800843 	ldbu	r2,33(r2)
  80e270:	10803fcc 	andi	r2,r2,255
  80e274:	00c01404 	movi	r3,80
  80e278:	1885c83a 	sub	r2,r3,r2
  80e27c:	100d883a 	mov	r6,r2
  80e280:	01400804 	movi	r5,32
  80e284:	0805a840 	call	805a84 <memset>
    }
    break;
  80e288:	00000406 	br	80e29c <lcd_handle_escape+0x290>
      if (sp->y > ALT_LCD_HEIGHT * 2)
        sp->y = ALT_LCD_HEIGHT * 2;
      while (sp->y > ALT_LCD_HEIGHT)
        lcd_scroll_up(sp);
    }
    break;
  80e28c:	0001883a 	nop
  80e290:	00000306 	br	80e2a0 <lcd_handle_escape+0x294>
     *   ESC [ 1 J  is clear to beginning of screen  [unimplemented]
     *   ESC [ 2 J  is clear screen
     */
    if (parm1 == 2)
      lcd_clear_screen(sp);
    break;
  80e294:	0001883a 	nop
  80e298:	00000106 	br	80e2a0 <lcd_handle_escape+0x294>
    if (parm1 < 1)
    {
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
    }
    break;
  80e29c:	0001883a 	nop
  }
}
  80e2a0:	0001883a 	nop
  80e2a4:	e037883a 	mov	sp,fp
  80e2a8:	dfc00117 	ldw	ra,4(sp)
  80e2ac:	df000017 	ldw	fp,0(sp)
  80e2b0:	dec00204 	addi	sp,sp,8
  80e2b4:	f800283a 	ret

0080e2b8 <altera_avalon_lcd_16207_write>:

/* --------------------------------------------------------------------- */

int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp, 
  const char* ptr, int len, int flags)
{
  80e2b8:	defff304 	addi	sp,sp,-52
  80e2bc:	dfc00c15 	stw	ra,48(sp)
  80e2c0:	df000b15 	stw	fp,44(sp)
  80e2c4:	df000b04 	addi	fp,sp,44
  80e2c8:	e13ffc15 	stw	r4,-16(fp)
  80e2cc:	e17ffd15 	stw	r5,-12(fp)
  80e2d0:	e1bffe15 	stw	r6,-8(fp)
  80e2d4:	e1ffff15 	stw	r7,-4(fp)
  const char* end = ptr + len;
  80e2d8:	e0bffe17 	ldw	r2,-8(fp)
  80e2dc:	e0fffd17 	ldw	r3,-12(fp)
  80e2e0:	1885883a 	add	r2,r3,r2
  80e2e4:	e0bff815 	stw	r2,-32(fp)

  ALT_SEM_PEND (sp->write_lock, 0);

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;
  80e2e8:	e0bffc17 	ldw	r2,-16(fp)
  80e2ec:	00c00044 	movi	r3,1
  80e2f0:	10c009c5 	stb	r3,39(r2)

  for ( ; ptr < end ; ptr++)
  80e2f4:	00009906 	br	80e55c <altera_avalon_lcd_16207_write+0x2a4>
  {
    char c = *ptr;
  80e2f8:	e0bffd17 	ldw	r2,-12(fp)
  80e2fc:	10800003 	ldbu	r2,0(r2)
  80e300:	e0bff905 	stb	r2,-28(fp)

    if (sp->esccount >= 0)
  80e304:	e0bffc17 	ldw	r2,-16(fp)
  80e308:	10800903 	ldbu	r2,36(r2)
  80e30c:	10803fcc 	andi	r2,r2,255
  80e310:	1080201c 	xori	r2,r2,128
  80e314:	10bfe004 	addi	r2,r2,-128
  80e318:	10003716 	blt	r2,zero,80e3f8 <altera_avalon_lcd_16207_write+0x140>
    {
      unsigned int esccount = sp->esccount;
  80e31c:	e0bffc17 	ldw	r2,-16(fp)
  80e320:	10800903 	ldbu	r2,36(r2)
  80e324:	10803fcc 	andi	r2,r2,255
  80e328:	1080201c 	xori	r2,r2,128
  80e32c:	10bfe004 	addi	r2,r2,-128
  80e330:	e0bffa15 	stw	r2,-24(fp)

      /* Single character escape sequences can end with any character
       * Multi character escape sequences start with '[' and contain
       * digits and semicolons before terminating
       */
      if ((esccount == 0 && c != '[') ||
  80e334:	e0bffa17 	ldw	r2,-24(fp)
  80e338:	1000031e 	bne	r2,zero,80e348 <altera_avalon_lcd_16207_write+0x90>
  80e33c:	e0bff907 	ldb	r2,-28(fp)
  80e340:	108016d8 	cmpnei	r2,r2,91
  80e344:	10000d1e 	bne	r2,zero,80e37c <altera_avalon_lcd_16207_write+0xc4>
  80e348:	e0bffa17 	ldw	r2,-24(fp)
  80e34c:	10001826 	beq	r2,zero,80e3b0 <altera_avalon_lcd_16207_write+0xf8>
          (esccount > 0 && !isdigit(c) && c != ';'))
  80e350:	d0e01217 	ldw	r3,-32696(gp)
  80e354:	e0bff907 	ldb	r2,-28(fp)
  80e358:	10800044 	addi	r2,r2,1
  80e35c:	1885883a 	add	r2,r3,r2
  80e360:	10800003 	ldbu	r2,0(r2)
  80e364:	10803fcc 	andi	r2,r2,255
  80e368:	1080010c 	andi	r2,r2,4
  80e36c:	1000101e 	bne	r2,zero,80e3b0 <altera_avalon_lcd_16207_write+0xf8>
  80e370:	e0bff907 	ldb	r2,-28(fp)
  80e374:	10800ee0 	cmpeqi	r2,r2,59
  80e378:	10000d1e 	bne	r2,zero,80e3b0 <altera_avalon_lcd_16207_write+0xf8>
      {
        sp->escape[esccount] = 0;
  80e37c:	e0fffc17 	ldw	r3,-16(fp)
  80e380:	e0bffa17 	ldw	r2,-24(fp)
  80e384:	1885883a 	add	r2,r3,r2
  80e388:	10800a04 	addi	r2,r2,40
  80e38c:	10000005 	stb	zero,0(r2)

        lcd_handle_escape(sp, c);
  80e390:	e0bff907 	ldb	r2,-28(fp)
  80e394:	100b883a 	mov	r5,r2
  80e398:	e13ffc17 	ldw	r4,-16(fp)
  80e39c:	080e00c0 	call	80e00c <lcd_handle_escape>

        sp->esccount = -1;
  80e3a0:	e0bffc17 	ldw	r2,-16(fp)
  80e3a4:	00ffffc4 	movi	r3,-1
  80e3a8:	10c00905 	stb	r3,36(r2)
  80e3ac:	00006806 	br	80e550 <altera_avalon_lcd_16207_write+0x298>
      }
      else if (sp->esccount < sizeof(sp->escape)-1)
  80e3b0:	e0bffc17 	ldw	r2,-16(fp)
  80e3b4:	10800903 	ldbu	r2,36(r2)
  80e3b8:	10803fcc 	andi	r2,r2,255
  80e3bc:	108001e8 	cmpgeui	r2,r2,7
  80e3c0:	1000631e 	bne	r2,zero,80e550 <altera_avalon_lcd_16207_write+0x298>
      {
        sp->escape[esccount] = c;
  80e3c4:	e0fffc17 	ldw	r3,-16(fp)
  80e3c8:	e0bffa17 	ldw	r2,-24(fp)
  80e3cc:	1885883a 	add	r2,r3,r2
  80e3d0:	10800a04 	addi	r2,r2,40
  80e3d4:	e0fff903 	ldbu	r3,-28(fp)
  80e3d8:	10c00005 	stb	r3,0(r2)
        sp->esccount++;
  80e3dc:	e0bffc17 	ldw	r2,-16(fp)
  80e3e0:	10800903 	ldbu	r2,36(r2)
  80e3e4:	10800044 	addi	r2,r2,1
  80e3e8:	1007883a 	mov	r3,r2
  80e3ec:	e0bffc17 	ldw	r2,-16(fp)
  80e3f0:	10c00905 	stb	r3,36(r2)
  80e3f4:	00005606 	br	80e550 <altera_avalon_lcd_16207_write+0x298>
      }
    }
    else if (c == 27) /* ESC */
  80e3f8:	e0bff907 	ldb	r2,-28(fp)
  80e3fc:	108006d8 	cmpnei	r2,r2,27
  80e400:	1000031e 	bne	r2,zero,80e410 <altera_avalon_lcd_16207_write+0x158>
    {
      sp->esccount = 0;
  80e404:	e0bffc17 	ldw	r2,-16(fp)
  80e408:	10000905 	stb	zero,36(r2)
  80e40c:	00005006 	br	80e550 <altera_avalon_lcd_16207_write+0x298>
    }
    else if (c == '\r')
  80e410:	e0bff907 	ldb	r2,-28(fp)
  80e414:	10800358 	cmpnei	r2,r2,13
  80e418:	1000031e 	bne	r2,zero,80e428 <altera_avalon_lcd_16207_write+0x170>
    {
      sp->x = 0;
  80e41c:	e0bffc17 	ldw	r2,-16(fp)
  80e420:	10000845 	stb	zero,33(r2)
  80e424:	00004a06 	br	80e550 <altera_avalon_lcd_16207_write+0x298>
    }
    else if (c == '\n')
  80e428:	e0bff907 	ldb	r2,-28(fp)
  80e42c:	10800298 	cmpnei	r2,r2,10
  80e430:	1000101e 	bne	r2,zero,80e474 <altera_avalon_lcd_16207_write+0x1bc>
    {
      sp->x = 0;
  80e434:	e0bffc17 	ldw	r2,-16(fp)
  80e438:	10000845 	stb	zero,33(r2)
      sp->y++;
  80e43c:	e0bffc17 	ldw	r2,-16(fp)
  80e440:	10800883 	ldbu	r2,34(r2)
  80e444:	10800044 	addi	r2,r2,1
  80e448:	1007883a 	mov	r3,r2
  80e44c:	e0bffc17 	ldw	r2,-16(fp)
  80e450:	10c00885 	stb	r3,34(r2)

      /* Let the cursor sit at X=0, Y=HEIGHT without scrolling so the user
       * can print two lines of data without losing one.
       */
      if (sp->y > ALT_LCD_HEIGHT)
  80e454:	e0bffc17 	ldw	r2,-16(fp)
  80e458:	10800883 	ldbu	r2,34(r2)
  80e45c:	10803fcc 	andi	r2,r2,255
  80e460:	108000f0 	cmpltui	r2,r2,3
  80e464:	10003a1e 	bne	r2,zero,80e550 <altera_avalon_lcd_16207_write+0x298>
        lcd_scroll_up(sp);
  80e468:	e13ffc17 	ldw	r4,-16(fp)
  80e46c:	080df400 	call	80df40 <lcd_scroll_up>
  80e470:	00003706 	br	80e550 <altera_avalon_lcd_16207_write+0x298>
    }
    else if (c == '\b')
  80e474:	e0bff907 	ldb	r2,-28(fp)
  80e478:	10800218 	cmpnei	r2,r2,8
  80e47c:	10000b1e 	bne	r2,zero,80e4ac <altera_avalon_lcd_16207_write+0x1f4>
    {
      if (sp->x > 0)
  80e480:	e0bffc17 	ldw	r2,-16(fp)
  80e484:	10800843 	ldbu	r2,33(r2)
  80e488:	10803fcc 	andi	r2,r2,255
  80e48c:	10003026 	beq	r2,zero,80e550 <altera_avalon_lcd_16207_write+0x298>
        sp->x--;
  80e490:	e0bffc17 	ldw	r2,-16(fp)
  80e494:	10800843 	ldbu	r2,33(r2)
  80e498:	10bfffc4 	addi	r2,r2,-1
  80e49c:	1007883a 	mov	r3,r2
  80e4a0:	e0bffc17 	ldw	r2,-16(fp)
  80e4a4:	10c00845 	stb	r3,33(r2)
  80e4a8:	00002906 	br	80e550 <altera_avalon_lcd_16207_write+0x298>
    }
    else if (isprint(c))
  80e4ac:	d0e01217 	ldw	r3,-32696(gp)
  80e4b0:	e0bff907 	ldb	r2,-28(fp)
  80e4b4:	10800044 	addi	r2,r2,1
  80e4b8:	1885883a 	add	r2,r3,r2
  80e4bc:	10800003 	ldbu	r2,0(r2)
  80e4c0:	10803fcc 	andi	r2,r2,255
  80e4c4:	1080201c 	xori	r2,r2,128
  80e4c8:	10bfe004 	addi	r2,r2,-128
  80e4cc:	108025cc 	andi	r2,r2,151
  80e4d0:	10001f26 	beq	r2,zero,80e550 <altera_avalon_lcd_16207_write+0x298>
    {
      /* If we didn't scroll on the last linefeed then we might need to do
       * it now. */
      if (sp->y >= ALT_LCD_HEIGHT)
  80e4d4:	e0bffc17 	ldw	r2,-16(fp)
  80e4d8:	10800883 	ldbu	r2,34(r2)
  80e4dc:	10803fcc 	andi	r2,r2,255
  80e4e0:	108000b0 	cmpltui	r2,r2,2
  80e4e4:	1000021e 	bne	r2,zero,80e4f0 <altera_avalon_lcd_16207_write+0x238>
        lcd_scroll_up(sp);
  80e4e8:	e13ffc17 	ldw	r4,-16(fp)
  80e4ec:	080df400 	call	80df40 <lcd_scroll_up>

      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
  80e4f0:	e0bffc17 	ldw	r2,-16(fp)
  80e4f4:	10800843 	ldbu	r2,33(r2)
  80e4f8:	10803fcc 	andi	r2,r2,255
  80e4fc:	10801428 	cmpgeui	r2,r2,80
  80e500:	10000d1e 	bne	r2,zero,80e538 <altera_avalon_lcd_16207_write+0x280>
        sp->line[sp->y].data[sp->x] = c;
  80e504:	e0bffc17 	ldw	r2,-16(fp)
  80e508:	10800883 	ldbu	r2,34(r2)
  80e50c:	10c03fcc 	andi	r3,r2,255
  80e510:	e0bffc17 	ldw	r2,-16(fp)
  80e514:	10800843 	ldbu	r2,33(r2)
  80e518:	10803fcc 	andi	r2,r2,255
  80e51c:	e13ffc17 	ldw	r4,-16(fp)
  80e520:	18c018e4 	muli	r3,r3,99
  80e524:	20c7883a 	add	r3,r4,r3
  80e528:	1885883a 	add	r2,r3,r2
  80e52c:	10801004 	addi	r2,r2,64
  80e530:	e0fff903 	ldbu	r3,-28(fp)
  80e534:	10c00005 	stb	r3,0(r2)

      sp->x++;
  80e538:	e0bffc17 	ldw	r2,-16(fp)
  80e53c:	10800843 	ldbu	r2,33(r2)
  80e540:	10800044 	addi	r2,r2,1
  80e544:	1007883a 	mov	r3,r2
  80e548:	e0bffc17 	ldw	r2,-16(fp)
  80e54c:	10c00845 	stb	r3,33(r2)

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;

  for ( ; ptr < end ; ptr++)
  80e550:	e0bffd17 	ldw	r2,-12(fp)
  80e554:	10800044 	addi	r2,r2,1
  80e558:	e0bffd15 	stw	r2,-12(fp)
  80e55c:	e0fffd17 	ldw	r3,-12(fp)
  80e560:	e0bff817 	ldw	r2,-32(fp)
  80e564:	18bf6436 	bltu	r3,r2,80e2f8 <__alt_data_end+0xff80e2f8>
      sp->x++;
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  80e568:	00800404 	movi	r2,16
  80e56c:	e0bff615 	stw	r2,-40(fp)
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80e570:	e03ff515 	stw	zero,-44(fp)
  80e574:	00003706 	br	80e654 <altera_avalon_lcd_16207_write+0x39c>
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
  80e578:	00801404 	movi	r2,80
  80e57c:	e0bff715 	stw	r2,-36(fp)
  80e580:	00001106 	br	80e5c8 <altera_avalon_lcd_16207_write+0x310>
      if (sp->line[y].data[width-1] != ' ')
  80e584:	e0bff717 	ldw	r2,-36(fp)
  80e588:	10bfffc4 	addi	r2,r2,-1
  80e58c:	e13ffc17 	ldw	r4,-16(fp)
  80e590:	e0fff517 	ldw	r3,-44(fp)
  80e594:	18c018e4 	muli	r3,r3,99
  80e598:	20c7883a 	add	r3,r4,r3
  80e59c:	1885883a 	add	r2,r3,r2
  80e5a0:	10801004 	addi	r2,r2,64
  80e5a4:	10800003 	ldbu	r2,0(r2)
  80e5a8:	10803fcc 	andi	r2,r2,255
  80e5ac:	1080201c 	xori	r2,r2,128
  80e5b0:	10bfe004 	addi	r2,r2,-128
  80e5b4:	10800820 	cmpeqi	r2,r2,32
  80e5b8:	10000626 	beq	r2,zero,80e5d4 <altera_avalon_lcd_16207_write+0x31c>
  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
  80e5bc:	e0bff717 	ldw	r2,-36(fp)
  80e5c0:	10bfffc4 	addi	r2,r2,-1
  80e5c4:	e0bff715 	stw	r2,-36(fp)
  80e5c8:	e0bff717 	ldw	r2,-36(fp)
  80e5cc:	00bfed16 	blt	zero,r2,80e584 <__alt_data_end+0xff80e584>
  80e5d0:	00000106 	br	80e5d8 <altera_avalon_lcd_16207_write+0x320>
      if (sp->line[y].data[width-1] != ' ')
        break;
  80e5d4:	0001883a 	nop

    /* The minimum width is the size of the LCD panel.  If the real width
     * is long enough to require scrolling then add an extra space so the
     * end of the message doesn't run into the beginning of it.
     */
    if (width <= ALT_LCD_WIDTH)
  80e5d8:	e0bff717 	ldw	r2,-36(fp)
  80e5dc:	10800448 	cmpgei	r2,r2,17
  80e5e0:	1000031e 	bne	r2,zero,80e5f0 <altera_avalon_lcd_16207_write+0x338>
      width = ALT_LCD_WIDTH;
  80e5e4:	00800404 	movi	r2,16
  80e5e8:	e0bff715 	stw	r2,-36(fp)
  80e5ec:	00000306 	br	80e5fc <altera_avalon_lcd_16207_write+0x344>
    else
      width++;
  80e5f0:	e0bff717 	ldw	r2,-36(fp)
  80e5f4:	10800044 	addi	r2,r2,1
  80e5f8:	e0bff715 	stw	r2,-36(fp)

    sp->line[y].width = width;
  80e5fc:	e0bff717 	ldw	r2,-36(fp)
  80e600:	1009883a 	mov	r4,r2
  80e604:	e0fffc17 	ldw	r3,-16(fp)
  80e608:	e0bff517 	ldw	r2,-44(fp)
  80e60c:	108018e4 	muli	r2,r2,99
  80e610:	1885883a 	add	r2,r3,r2
  80e614:	10802444 	addi	r2,r2,145
  80e618:	11000005 	stb	r4,0(r2)
    if (widthmax < width)
  80e61c:	e0fff617 	ldw	r3,-40(fp)
  80e620:	e0bff717 	ldw	r2,-36(fp)
  80e624:	1880020e 	bge	r3,r2,80e630 <altera_avalon_lcd_16207_write+0x378>
      widthmax = width;
  80e628:	e0bff717 	ldw	r2,-36(fp)
  80e62c:	e0bff615 	stw	r2,-40(fp)
    sp->line[y].speed = 0; /* By default lines don't scroll */
  80e630:	e0fffc17 	ldw	r3,-16(fp)
  80e634:	e0bff517 	ldw	r2,-44(fp)
  80e638:	108018e4 	muli	r2,r2,99
  80e63c:	1885883a 	add	r2,r3,r2
  80e640:	10802484 	addi	r2,r2,146
  80e644:	10000005 	stb	zero,0(r2)
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80e648:	e0bff517 	ldw	r2,-44(fp)
  80e64c:	10800044 	addi	r2,r2,1
  80e650:	e0bff515 	stw	r2,-44(fp)
  80e654:	e0bff517 	ldw	r2,-44(fp)
  80e658:	10800090 	cmplti	r2,r2,2
  80e65c:	103fc61e 	bne	r2,zero,80e578 <__alt_data_end+0xff80e578>
    if (widthmax < width)
      widthmax = width;
    sp->line[y].speed = 0; /* By default lines don't scroll */
  }

  if (widthmax <= ALT_LCD_WIDTH)
  80e660:	e0bff617 	ldw	r2,-40(fp)
  80e664:	10800448 	cmpgei	r2,r2,17
  80e668:	1000031e 	bne	r2,zero,80e678 <altera_avalon_lcd_16207_write+0x3c0>
    sp->scrollmax = 0;
  80e66c:	e0bffc17 	ldw	r2,-16(fp)
  80e670:	10000985 	stb	zero,38(r2)
  80e674:	00002e06 	br	80e730 <altera_avalon_lcd_16207_write+0x478>
  else
  {
    widthmax *= 2;
  80e678:	e0bff617 	ldw	r2,-40(fp)
  80e67c:	1085883a 	add	r2,r2,r2
  80e680:	e0bff615 	stw	r2,-40(fp)
    sp->scrollmax = widthmax;
  80e684:	e0bff617 	ldw	r2,-40(fp)
  80e688:	1007883a 	mov	r3,r2
  80e68c:	e0bffc17 	ldw	r2,-16(fp)
  80e690:	10c00985 	stb	r3,38(r2)

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80e694:	e03ff515 	stw	zero,-44(fp)
  80e698:	00002206 	br	80e724 <altera_avalon_lcd_16207_write+0x46c>
      if (sp->line[y].width > ALT_LCD_WIDTH)
  80e69c:	e0fffc17 	ldw	r3,-16(fp)
  80e6a0:	e0bff517 	ldw	r2,-44(fp)
  80e6a4:	108018e4 	muli	r2,r2,99
  80e6a8:	1885883a 	add	r2,r3,r2
  80e6ac:	10802444 	addi	r2,r2,145
  80e6b0:	10800003 	ldbu	r2,0(r2)
  80e6b4:	10803fcc 	andi	r2,r2,255
  80e6b8:	1080201c 	xori	r2,r2,128
  80e6bc:	10bfe004 	addi	r2,r2,-128
  80e6c0:	10800450 	cmplti	r2,r2,17
  80e6c4:	1000141e 	bne	r2,zero,80e718 <altera_avalon_lcd_16207_write+0x460>
         */
#if 1
        /* This option makes all the lines scroll round at different speeds
         * which are chosen so that all the scrolls finish at the same time.
         */
        sp->line[y].speed = 256 * sp->line[y].width / widthmax;
  80e6c8:	e0fffc17 	ldw	r3,-16(fp)
  80e6cc:	e0bff517 	ldw	r2,-44(fp)
  80e6d0:	108018e4 	muli	r2,r2,99
  80e6d4:	1885883a 	add	r2,r3,r2
  80e6d8:	10802444 	addi	r2,r2,145
  80e6dc:	10800003 	ldbu	r2,0(r2)
  80e6e0:	10803fcc 	andi	r2,r2,255
  80e6e4:	1080201c 	xori	r2,r2,128
  80e6e8:	10bfe004 	addi	r2,r2,-128
  80e6ec:	1004923a 	slli	r2,r2,8
  80e6f0:	e17ff617 	ldw	r5,-40(fp)
  80e6f4:	1009883a 	mov	r4,r2
  80e6f8:	080a4c80 	call	80a4c8 <__divsi3>
  80e6fc:	1009883a 	mov	r4,r2
  80e700:	e0fffc17 	ldw	r3,-16(fp)
  80e704:	e0bff517 	ldw	r2,-44(fp)
  80e708:	108018e4 	muli	r2,r2,99
  80e70c:	1885883a 	add	r2,r3,r2
  80e710:	10802484 	addi	r2,r2,146
  80e714:	11000005 	stb	r4,0(r2)
  {
    widthmax *= 2;
    sp->scrollmax = widthmax;

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  80e718:	e0bff517 	ldw	r2,-44(fp)
  80e71c:	10800044 	addi	r2,r2,1
  80e720:	e0bff515 	stw	r2,-44(fp)
  80e724:	e0bff517 	ldw	r2,-44(fp)
  80e728:	10800090 	cmplti	r2,r2,2
  80e72c:	103fdb1e 	bne	r2,zero,80e69c <__alt_data_end+0xff80e69c>
   * (because active was set when the timer interrupt occurred).  If there
   * has been a missed repaint then paint again.  And again.  etc.
   */
  for ( ; ; )
  {
    int old_scrollpos = sp->scrollpos;
  80e730:	e0bffc17 	ldw	r2,-16(fp)
  80e734:	10800943 	ldbu	r2,37(r2)
  80e738:	10803fcc 	andi	r2,r2,255
  80e73c:	e0bffb15 	stw	r2,-20(fp)

    lcd_repaint_screen(sp);
  80e740:	e13ffc17 	ldw	r4,-16(fp)
  80e744:	080dd540 	call	80dd54 <lcd_repaint_screen>

    /* Let the timer routines repaint the display again */
    sp->active = 0;
  80e748:	e0bffc17 	ldw	r2,-16(fp)
  80e74c:	100009c5 	stb	zero,39(r2)

    /* Have the timer routines tried to scroll while we were painting?
     * If not then we can exit */
    if (sp->scrollpos == old_scrollpos)
  80e750:	e0bffc17 	ldw	r2,-16(fp)
  80e754:	10800943 	ldbu	r2,37(r2)
  80e758:	10c03fcc 	andi	r3,r2,255
  80e75c:	e0bffb17 	ldw	r2,-20(fp)
  80e760:	18800426 	beq	r3,r2,80e774 <altera_avalon_lcd_16207_write+0x4bc>
      break;

    /* We need to repaint again since the display scrolled while we were
     * painting last time */
    sp->active = 1;
  80e764:	e0bffc17 	ldw	r2,-16(fp)
  80e768:	00c00044 	movi	r3,1
  80e76c:	10c009c5 	stb	r3,39(r2)
  }
  80e770:	003fef06 	br	80e730 <__alt_data_end+0xff80e730>
    sp->active = 0;

    /* Have the timer routines tried to scroll while we were painting?
     * If not then we can exit */
    if (sp->scrollpos == old_scrollpos)
      break;
  80e774:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->write_lock);

  return len;
  80e778:	e0bffe17 	ldw	r2,-8(fp)
}
  80e77c:	e037883a 	mov	sp,fp
  80e780:	dfc00117 	ldw	ra,4(sp)
  80e784:	df000017 	ldw	fp,0(sp)
  80e788:	dec00204 	addi	sp,sp,8
  80e78c:	f800283a 	ret

0080e790 <alt_lcd_16207_timeout>:
/*
 * Timeout routine is called every second
 */

static alt_u32 alt_lcd_16207_timeout(void* context) 
{
  80e790:	defffc04 	addi	sp,sp,-16
  80e794:	dfc00315 	stw	ra,12(sp)
  80e798:	df000215 	stw	fp,8(sp)
  80e79c:	df000204 	addi	fp,sp,8
  80e7a0:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_lcd_16207_state* sp = (altera_avalon_lcd_16207_state*)context;
  80e7a4:	e0bfff17 	ldw	r2,-4(fp)
  80e7a8:	e0bffe15 	stw	r2,-8(fp)

  /* Update the scrolling position */
  if (sp->scrollpos + 1 >= sp->scrollmax)
  80e7ac:	e0bffe17 	ldw	r2,-8(fp)
  80e7b0:	10800943 	ldbu	r2,37(r2)
  80e7b4:	10803fcc 	andi	r2,r2,255
  80e7b8:	10c00044 	addi	r3,r2,1
  80e7bc:	e0bffe17 	ldw	r2,-8(fp)
  80e7c0:	10800983 	ldbu	r2,38(r2)
  80e7c4:	10803fcc 	andi	r2,r2,255
  80e7c8:	18800316 	blt	r3,r2,80e7d8 <alt_lcd_16207_timeout+0x48>
    sp->scrollpos = 0;
  80e7cc:	e0bffe17 	ldw	r2,-8(fp)
  80e7d0:	10000945 	stb	zero,37(r2)
  80e7d4:	00000606 	br	80e7f0 <alt_lcd_16207_timeout+0x60>
  else
    sp->scrollpos = sp->scrollpos + 1;
  80e7d8:	e0bffe17 	ldw	r2,-8(fp)
  80e7dc:	10800943 	ldbu	r2,37(r2)
  80e7e0:	10800044 	addi	r2,r2,1
  80e7e4:	1007883a 	mov	r3,r2
  80e7e8:	e0bffe17 	ldw	r2,-8(fp)
  80e7ec:	10c00945 	stb	r3,37(r2)

  /* Repaint the panel unless the foreground will do it again soon */
  if (sp->scrollmax > 0 && !sp->active)
  80e7f0:	e0bffe17 	ldw	r2,-8(fp)
  80e7f4:	10800983 	ldbu	r2,38(r2)
  80e7f8:	10803fcc 	andi	r2,r2,255
  80e7fc:	10000826 	beq	r2,zero,80e820 <alt_lcd_16207_timeout+0x90>
  80e800:	e0bffe17 	ldw	r2,-8(fp)
  80e804:	108009c3 	ldbu	r2,39(r2)
  80e808:	10803fcc 	andi	r2,r2,255
  80e80c:	1080201c 	xori	r2,r2,128
  80e810:	10bfe004 	addi	r2,r2,-128
  80e814:	1000021e 	bne	r2,zero,80e820 <alt_lcd_16207_timeout+0x90>
    lcd_repaint_screen(sp);
  80e818:	e13ffe17 	ldw	r4,-8(fp)
  80e81c:	080dd540 	call	80dd54 <lcd_repaint_screen>

  return sp->period;
  80e820:	e0bffe17 	ldw	r2,-8(fp)
  80e824:	10800717 	ldw	r2,28(r2)
}
  80e828:	e037883a 	mov	sp,fp
  80e82c:	dfc00117 	ldw	ra,4(sp)
  80e830:	df000017 	ldw	fp,0(sp)
  80e834:	dec00204 	addi	sp,sp,8
  80e838:	f800283a 	ret

0080e83c <altera_avalon_lcd_16207_init>:

/*
 * Called at boot time to initialise the LCD driver
 */
void altera_avalon_lcd_16207_init(altera_avalon_lcd_16207_state* sp)
{
  80e83c:	defffc04 	addi	sp,sp,-16
  80e840:	dfc00315 	stw	ra,12(sp)
  80e844:	df000215 	stw	fp,8(sp)
  80e848:	df000204 	addi	fp,sp,8
  80e84c:	e13fff15 	stw	r4,-4(fp)
  unsigned int base = sp->base;
  80e850:	e0bfff17 	ldw	r2,-4(fp)
  80e854:	10800017 	ldw	r2,0(r2)
  80e858:	e0bffe15 	stw	r2,-8(fp)

  /* Mark the device as functional */
  sp->broken = 0;
  80e85c:	e0bfff17 	ldw	r2,-4(fp)
  80e860:	10000805 	stb	zero,32(r2)
   * the BUSY bit in the status register doesn't work until the display
   * has been reset three times.
   */

  /* Wait for 15 ms then reset */
  usleep(15000);
  80e864:	010ea604 	movi	r4,15000
  80e868:	080fc140 	call	80fc14 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  80e86c:	e0bffe17 	ldw	r2,-8(fp)
  80e870:	00c00c04 	movi	r3,48
  80e874:	10c00035 	stwio	r3,0(r2)

  /* Wait for another 4.1ms and reset again */
  usleep(4100);  
  80e878:	01040104 	movi	r4,4100
  80e87c:	080fc140 	call	80fc14 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  80e880:	e0bffe17 	ldw	r2,-8(fp)
  80e884:	00c00c04 	movi	r3,48
  80e888:	10c00035 	stwio	r3,0(r2)

  /* Wait a further 1 ms and reset a third time */
  usleep(1000);
  80e88c:	0100fa04 	movi	r4,1000
  80e890:	080fc140 	call	80fc14 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
  80e894:	e0bffe17 	ldw	r2,-8(fp)
  80e898:	00c00c04 	movi	r3,48
  80e89c:	10c00035 	stwio	r3,0(r2)

  /* Setup interface parameters: 8 bit bus, 2 rows, 5x7 font */
  lcd_write_command(sp, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT | LCD_CMD_TWO_LINE);
  80e8a0:	01400e04 	movi	r5,56
  80e8a4:	e13fff17 	ldw	r4,-4(fp)
  80e8a8:	080daf40 	call	80daf4 <lcd_write_command>
  
  /* Turn display off */
  lcd_write_command(sp, LCD_CMD_ONOFF);
  80e8ac:	01400204 	movi	r5,8
  80e8b0:	e13fff17 	ldw	r4,-4(fp)
  80e8b4:	080daf40 	call	80daf4 <lcd_write_command>

  /* Clear display */
  lcd_clear_screen(sp);
  80e8b8:	e13fff17 	ldw	r4,-4(fp)
  80e8bc:	080dc840 	call	80dc84 <lcd_clear_screen>
  
  /* Set mode: increment after writing, don't shift display */
  lcd_write_command(sp, LCD_CMD_MODES | LCD_CMD_MODE_INC);
  80e8c0:	01400184 	movi	r5,6
  80e8c4:	e13fff17 	ldw	r4,-4(fp)
  80e8c8:	080daf40 	call	80daf4 <lcd_write_command>

  /* Turn display on */
  lcd_write_command(sp, LCD_CMD_ONOFF | LCD_CMD_ENABLE_DISP);
  80e8cc:	01400304 	movi	r5,12
  80e8d0:	e13fff17 	ldw	r4,-4(fp)
  80e8d4:	080daf40 	call	80daf4 <lcd_write_command>

  sp->esccount = -1;
  80e8d8:	e0bfff17 	ldw	r2,-4(fp)
  80e8dc:	00ffffc4 	movi	r3,-1
  80e8e0:	10c00905 	stb	r3,36(r2)
  memset(sp->escape, 0, sizeof(sp->escape));
  80e8e4:	e0bfff17 	ldw	r2,-4(fp)
  80e8e8:	10800a04 	addi	r2,r2,40
  80e8ec:	01800204 	movi	r6,8
  80e8f0:	000b883a 	mov	r5,zero
  80e8f4:	1009883a 	mov	r4,r2
  80e8f8:	0805a840 	call	805a84 <memset>

  sp->scrollpos = 0;
  80e8fc:	e0bfff17 	ldw	r2,-4(fp)
  80e900:	10000945 	stb	zero,37(r2)
  sp->scrollmax = 0;
  80e904:	e0bfff17 	ldw	r2,-4(fp)
  80e908:	10000985 	stb	zero,38(r2)
  sp->active = 0;
  80e90c:	e0bfff17 	ldw	r2,-4(fp)
  80e910:	100009c5 	stb	zero,39(r2)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  80e914:	d0a36217 	ldw	r2,-29304(gp)

  sp->period = alt_ticks_per_second() / 10; /* Call every 100ms */
  80e918:	01400284 	movi	r5,10
  80e91c:	1009883a 	mov	r4,r2
  80e920:	080a5c00 	call	80a5c0 <__udivsi3>
  80e924:	1007883a 	mov	r3,r2
  80e928:	e0bfff17 	ldw	r2,-4(fp)
  80e92c:	10c00715 	stw	r3,28(r2)

  alt_alarm_start(&sp->alarm, sp->period, &alt_lcd_16207_timeout, sp);
  80e930:	e0bfff17 	ldw	r2,-4(fp)
  80e934:	10c00104 	addi	r3,r2,4
  80e938:	e0bfff17 	ldw	r2,-4(fp)
  80e93c:	10800717 	ldw	r2,28(r2)
  80e940:	e1ffff17 	ldw	r7,-4(fp)
  80e944:	01802074 	movhi	r6,129
  80e948:	31b9e404 	addi	r6,r6,-6256
  80e94c:	100b883a 	mov	r5,r2
  80e950:	1809883a 	mov	r4,r3
  80e954:	080f3940 	call	80f394 <alt_alarm_start>
}
  80e958:	0001883a 	nop
  80e95c:	e037883a 	mov	sp,fp
  80e960:	dfc00117 	ldw	ra,4(sp)
  80e964:	df000017 	ldw	fp,0(sp)
  80e968:	dec00204 	addi	sp,sp,8
  80e96c:	f800283a 	ret

0080e970 <altera_avalon_lcd_16207_write_fd>:
extern int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp,
  const char* ptr, int count, int flags);

int 
altera_avalon_lcd_16207_write_fd(alt_fd* fd, const char* buffer, int space)
{
  80e970:	defffa04 	addi	sp,sp,-24
  80e974:	dfc00515 	stw	ra,20(sp)
  80e978:	df000415 	stw	fp,16(sp)
  80e97c:	df000404 	addi	fp,sp,16
  80e980:	e13ffd15 	stw	r4,-12(fp)
  80e984:	e17ffe15 	stw	r5,-8(fp)
  80e988:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_lcd_16207_dev* dev = (altera_avalon_lcd_16207_dev*) fd->dev; 
  80e98c:	e0bffd17 	ldw	r2,-12(fp)
  80e990:	10800017 	ldw	r2,0(r2)
  80e994:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_lcd_16207_write(&dev->state, buffer, space,
  80e998:	e0bffc17 	ldw	r2,-16(fp)
  80e99c:	10c00a04 	addi	r3,r2,40
  80e9a0:	e0bffd17 	ldw	r2,-12(fp)
  80e9a4:	10800217 	ldw	r2,8(r2)
  80e9a8:	100f883a 	mov	r7,r2
  80e9ac:	e1bfff17 	ldw	r6,-4(fp)
  80e9b0:	e17ffe17 	ldw	r5,-8(fp)
  80e9b4:	1809883a 	mov	r4,r3
  80e9b8:	080e2b80 	call	80e2b8 <altera_avalon_lcd_16207_write>
      fd->fd_flags);
}
  80e9bc:	e037883a 	mov	sp,fp
  80e9c0:	dfc00117 	ldw	ra,4(sp)
  80e9c4:	df000017 	ldw	fp,0(sp)
  80e9c8:	dec00204 	addi	sp,sp,8
  80e9cc:	f800283a 	ret

0080e9d0 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
  80e9d0:	defff904 	addi	sp,sp,-28
  80e9d4:	dfc00615 	stw	ra,24(sp)
  80e9d8:	df000515 	stw	fp,20(sp)
  80e9dc:	df000504 	addi	fp,sp,20
  80e9e0:	e13ffe15 	stw	r4,-8(fp)
  80e9e4:	e17fff15 	stw	r5,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
  80e9e8:	0007883a 	mov	r3,zero
  80e9ec:	e0bffe17 	ldw	r2,-8(fp)
  80e9f0:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
  80e9f4:	e0bffe17 	ldw	r2,-8(fp)
  80e9f8:	10800104 	addi	r2,r2,4
  80e9fc:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80ea00:	0005303a 	rdctl	r2,status
  80ea04:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80ea08:	e0fffc17 	ldw	r3,-16(fp)
  80ea0c:	00bfff84 	movi	r2,-2
  80ea10:	1884703a 	and	r2,r3,r2
  80ea14:	1001703a 	wrctl	status,r2
  
  return context;
  80ea18:	e0bffc17 	ldw	r2,-16(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  80ea1c:	e0bffb15 	stw	r2,-20(fp)
  alt_tick ();
  80ea20:	080fb0c0 	call	80fb0c <alt_tick>
  80ea24:	e0bffb17 	ldw	r2,-20(fp)
  80ea28:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80ea2c:	e0bffd17 	ldw	r2,-12(fp)
  80ea30:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
  80ea34:	0001883a 	nop
  80ea38:	e037883a 	mov	sp,fp
  80ea3c:	dfc00117 	ldw	ra,4(sp)
  80ea40:	df000017 	ldw	fp,0(sp)
  80ea44:	dec00204 	addi	sp,sp,8
  80ea48:	f800283a 	ret

0080ea4c <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
  80ea4c:	defff904 	addi	sp,sp,-28
  80ea50:	dfc00615 	stw	ra,24(sp)
  80ea54:	df000515 	stw	fp,20(sp)
  80ea58:	df000504 	addi	fp,sp,20
  80ea5c:	e13ffc15 	stw	r4,-16(fp)
  80ea60:	e17ffd15 	stw	r5,-12(fp)
  80ea64:	e1bffe15 	stw	r6,-8(fp)
  80ea68:	e1ffff15 	stw	r7,-4(fp)
  80ea6c:	e0bfff17 	ldw	r2,-4(fp)
  80ea70:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
  80ea74:	d0a36217 	ldw	r2,-29304(gp)
  80ea78:	1000021e 	bne	r2,zero,80ea84 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
  80ea7c:	e0bffb17 	ldw	r2,-20(fp)
  80ea80:	d0a36215 	stw	r2,-29304(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
  80ea84:	e0bffc17 	ldw	r2,-16(fp)
  80ea88:	10800104 	addi	r2,r2,4
  80ea8c:	00c001c4 	movi	r3,7
  80ea90:	10c00035 	stwio	r3,0(r2)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
  80ea94:	01802074 	movhi	r6,129
  80ea98:	31ba7404 	addi	r6,r6,-5680
  80ea9c:	e17ffc17 	ldw	r5,-16(fp)
  80eaa0:	e13ffe17 	ldw	r4,-8(fp)
  80eaa4:	080cf080 	call	80cf08 <alt_irq_register>
#endif  
}
  80eaa8:	0001883a 	nop
  80eaac:	e037883a 	mov	sp,fp
  80eab0:	dfc00117 	ldw	ra,4(sp)
  80eab4:	df000017 	ldw	fp,0(sp)
  80eab8:	dec00204 	addi	sp,sp,8
  80eabc:	f800283a 	ret

0080eac0 <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  80eac0:	defffa04 	addi	sp,sp,-24
  80eac4:	dfc00515 	stw	ra,20(sp)
  80eac8:	df000415 	stw	fp,16(sp)
  80eacc:	df000404 	addi	fp,sp,16
  80ead0:	e13ffd15 	stw	r4,-12(fp)
  80ead4:	e17ffe15 	stw	r5,-8(fp)
  80ead8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  80eadc:	e0bffd17 	ldw	r2,-12(fp)
  80eae0:	10800017 	ldw	r2,0(r2)
  80eae4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
  80eae8:	e0bffc17 	ldw	r2,-16(fp)
  80eaec:	10c00a04 	addi	r3,r2,40
  80eaf0:	e0bffd17 	ldw	r2,-12(fp)
  80eaf4:	10800217 	ldw	r2,8(r2)
  80eaf8:	100f883a 	mov	r7,r2
  80eafc:	e1bfff17 	ldw	r6,-4(fp)
  80eb00:	e17ffe17 	ldw	r5,-8(fp)
  80eb04:	1809883a 	mov	r4,r3
  80eb08:	080efd00 	call	80efd0 <altera_avalon_uart_read>
      fd->fd_flags);
}
  80eb0c:	e037883a 	mov	sp,fp
  80eb10:	dfc00117 	ldw	ra,4(sp)
  80eb14:	df000017 	ldw	fp,0(sp)
  80eb18:	dec00204 	addi	sp,sp,8
  80eb1c:	f800283a 	ret

0080eb20 <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  80eb20:	defffa04 	addi	sp,sp,-24
  80eb24:	dfc00515 	stw	ra,20(sp)
  80eb28:	df000415 	stw	fp,16(sp)
  80eb2c:	df000404 	addi	fp,sp,16
  80eb30:	e13ffd15 	stw	r4,-12(fp)
  80eb34:	e17ffe15 	stw	r5,-8(fp)
  80eb38:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  80eb3c:	e0bffd17 	ldw	r2,-12(fp)
  80eb40:	10800017 	ldw	r2,0(r2)
  80eb44:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
  80eb48:	e0bffc17 	ldw	r2,-16(fp)
  80eb4c:	10c00a04 	addi	r3,r2,40
  80eb50:	e0bffd17 	ldw	r2,-12(fp)
  80eb54:	10800217 	ldw	r2,8(r2)
  80eb58:	100f883a 	mov	r7,r2
  80eb5c:	e1bfff17 	ldw	r6,-4(fp)
  80eb60:	e17ffe17 	ldw	r5,-8(fp)
  80eb64:	1809883a 	mov	r4,r3
  80eb68:	080f1e80 	call	80f1e8 <altera_avalon_uart_write>
      fd->fd_flags);
}
  80eb6c:	e037883a 	mov	sp,fp
  80eb70:	dfc00117 	ldw	ra,4(sp)
  80eb74:	df000017 	ldw	fp,0(sp)
  80eb78:	dec00204 	addi	sp,sp,8
  80eb7c:	f800283a 	ret

0080eb80 <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
  80eb80:	defffc04 	addi	sp,sp,-16
  80eb84:	dfc00315 	stw	ra,12(sp)
  80eb88:	df000215 	stw	fp,8(sp)
  80eb8c:	df000204 	addi	fp,sp,8
  80eb90:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  80eb94:	e0bfff17 	ldw	r2,-4(fp)
  80eb98:	10800017 	ldw	r2,0(r2)
  80eb9c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
  80eba0:	e0bffe17 	ldw	r2,-8(fp)
  80eba4:	10c00a04 	addi	r3,r2,40
  80eba8:	e0bfff17 	ldw	r2,-4(fp)
  80ebac:	10800217 	ldw	r2,8(r2)
  80ebb0:	100b883a 	mov	r5,r2
  80ebb4:	1809883a 	mov	r4,r3
  80ebb8:	080ef400 	call	80ef40 <altera_avalon_uart_close>
}
  80ebbc:	e037883a 	mov	sp,fp
  80ebc0:	dfc00117 	ldw	ra,4(sp)
  80ebc4:	df000017 	ldw	fp,0(sp)
  80ebc8:	dec00204 	addi	sp,sp,8
  80ebcc:	f800283a 	ret

0080ebd0 <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
  80ebd0:	defff904 	addi	sp,sp,-28
  80ebd4:	dfc00615 	stw	ra,24(sp)
  80ebd8:	df000515 	stw	fp,20(sp)
  80ebdc:	df000504 	addi	fp,sp,20
  80ebe0:	e13ffd15 	stw	r4,-12(fp)
  80ebe4:	e17ffe15 	stw	r5,-8(fp)
  80ebe8:	e1bfff15 	stw	r6,-4(fp)
  void* base = sp->base;
  80ebec:	e0bffd17 	ldw	r2,-12(fp)
  80ebf0:	10800017 	ldw	r2,0(r2)
  80ebf4:	e0bffb15 	stw	r2,-20(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
  80ebf8:	0005883a 	mov	r2,zero
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
  80ebfc:	1000041e 	bne	r2,zero,80ec10 <altera_avalon_uart_init+0x40>
  80ec00:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
  80ec04:	1000021e 	bne	r2,zero,80ec10 <altera_avalon_uart_init+0x40>
  80ec08:	0005883a 	mov	r2,zero
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
  80ec0c:	10000226 	beq	r2,zero,80ec18 <altera_avalon_uart_init+0x48>
  80ec10:	00800044 	movi	r2,1
  80ec14:	00000106 	br	80ec1c <altera_avalon_uart_init+0x4c>
  80ec18:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
  80ec1c:	e0bffc15 	stw	r2,-16(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
  80ec20:	e0bffc17 	ldw	r2,-16(fp)
  80ec24:	10000d1e 	bne	r2,zero,80ec5c <altera_avalon_uart_init+0x8c>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
  80ec28:	e0bffd17 	ldw	r2,-12(fp)
  80ec2c:	00c32004 	movi	r3,3200
  80ec30:	10c00115 	stw	r3,4(r2)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
  80ec34:	e0bffb17 	ldw	r2,-20(fp)
  80ec38:	10800304 	addi	r2,r2,12
  80ec3c:	e0fffd17 	ldw	r3,-12(fp)
  80ec40:	18c00117 	ldw	r3,4(r3)
  80ec44:	10c00035 	stwio	r3,0(r2)
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
  80ec48:	01802074 	movhi	r6,129
  80ec4c:	31bb1d04 	addi	r6,r6,-5004
  80ec50:	e17ffd17 	ldw	r5,-12(fp)
  80ec54:	e13fff17 	ldw	r4,-4(fp)
  80ec58:	080cf080 	call	80cf08 <alt_irq_register>
#endif  
  }
}
  80ec5c:	0001883a 	nop
  80ec60:	e037883a 	mov	sp,fp
  80ec64:	dfc00117 	ldw	ra,4(sp)
  80ec68:	df000017 	ldw	fp,0(sp)
  80ec6c:	dec00204 	addi	sp,sp,8
  80ec70:	f800283a 	ret

0080ec74 <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
  80ec74:	defff904 	addi	sp,sp,-28
  80ec78:	dfc00615 	stw	ra,24(sp)
  80ec7c:	df000515 	stw	fp,20(sp)
  80ec80:	df000504 	addi	fp,sp,20
  80ec84:	e13ffe15 	stw	r4,-8(fp)
  80ec88:	e17fff15 	stw	r5,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
  80ec8c:	e0bffe17 	ldw	r2,-8(fp)
  80ec90:	e0bffb15 	stw	r2,-20(fp)
  void* base               = sp->base;
  80ec94:	e0bffb17 	ldw	r2,-20(fp)
  80ec98:	10800017 	ldw	r2,0(r2)
  80ec9c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
  80eca0:	e0bffc17 	ldw	r2,-16(fp)
  80eca4:	10800204 	addi	r2,r2,8
  80eca8:	10800037 	ldwio	r2,0(r2)
  80ecac:	e0bffd15 	stw	r2,-12(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
  80ecb0:	e0bffc17 	ldw	r2,-16(fp)
  80ecb4:	10800204 	addi	r2,r2,8
  80ecb8:	0007883a 	mov	r3,zero
  80ecbc:	10c00035 	stwio	r3,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
  80ecc0:	e0bffc17 	ldw	r2,-16(fp)
  80ecc4:	10800204 	addi	r2,r2,8
  80ecc8:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
  80eccc:	e0bffd17 	ldw	r2,-12(fp)
  80ecd0:	1080200c 	andi	r2,r2,128
  80ecd4:	10000326 	beq	r2,zero,80ece4 <altera_avalon_uart_irq+0x70>
  {
    altera_avalon_uart_rxirq(sp, status);
  80ecd8:	e17ffd17 	ldw	r5,-12(fp)
  80ecdc:	e13ffb17 	ldw	r4,-20(fp)
  80ece0:	080ed140 	call	80ed14 <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
  80ece4:	e0bffd17 	ldw	r2,-12(fp)
  80ece8:	1081100c 	andi	r2,r2,1088
  80ecec:	10000326 	beq	r2,zero,80ecfc <altera_avalon_uart_irq+0x88>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
  80ecf0:	e17ffd17 	ldw	r5,-12(fp)
  80ecf4:	e13ffb17 	ldw	r4,-20(fp)
  80ecf8:	080edf80 	call	80edf8 <altera_avalon_uart_txirq>
  }
  

}
  80ecfc:	0001883a 	nop
  80ed00:	e037883a 	mov	sp,fp
  80ed04:	dfc00117 	ldw	ra,4(sp)
  80ed08:	df000017 	ldw	fp,0(sp)
  80ed0c:	dec00204 	addi	sp,sp,8
  80ed10:	f800283a 	ret

0080ed14 <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
  80ed14:	defffc04 	addi	sp,sp,-16
  80ed18:	df000315 	stw	fp,12(sp)
  80ed1c:	df000304 	addi	fp,sp,12
  80ed20:	e13ffe15 	stw	r4,-8(fp)
  80ed24:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
  80ed28:	e0bfff17 	ldw	r2,-4(fp)
  80ed2c:	108000cc 	andi	r2,r2,3
  80ed30:	10002c1e 	bne	r2,zero,80ede4 <altera_avalon_uart_rxirq+0xd0>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
  80ed34:	e0bffe17 	ldw	r2,-8(fp)
  80ed38:	10800317 	ldw	r2,12(r2)
  80ed3c:	e0bffe17 	ldw	r2,-8(fp)
  80ed40:	10800217 	ldw	r2,8(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  80ed44:	e0bffe17 	ldw	r2,-8(fp)
  80ed48:	10800317 	ldw	r2,12(r2)
  80ed4c:	10800044 	addi	r2,r2,1
  80ed50:	10800fcc 	andi	r2,r2,63
  80ed54:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
  80ed58:	e0bffe17 	ldw	r2,-8(fp)
  80ed5c:	10800317 	ldw	r2,12(r2)
  80ed60:	e0fffe17 	ldw	r3,-8(fp)
  80ed64:	18c00017 	ldw	r3,0(r3)
  80ed68:	18c00037 	ldwio	r3,0(r3)
  80ed6c:	1809883a 	mov	r4,r3
  80ed70:	e0fffe17 	ldw	r3,-8(fp)
  80ed74:	1885883a 	add	r2,r3,r2
  80ed78:	10800704 	addi	r2,r2,28
  80ed7c:	11000005 	stb	r4,0(r2)

  sp->rx_end = next;
  80ed80:	e0bffe17 	ldw	r2,-8(fp)
  80ed84:	e0fffd17 	ldw	r3,-12(fp)
  80ed88:	10c00315 	stw	r3,12(r2)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  80ed8c:	e0bffe17 	ldw	r2,-8(fp)
  80ed90:	10800317 	ldw	r2,12(r2)
  80ed94:	10800044 	addi	r2,r2,1
  80ed98:	10800fcc 	andi	r2,r2,63
  80ed9c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
  80eda0:	e0bffe17 	ldw	r2,-8(fp)
  80eda4:	10c00217 	ldw	r3,8(r2)
  80eda8:	e0bffd17 	ldw	r2,-12(fp)
  80edac:	18800e1e 	bne	r3,r2,80ede8 <altera_avalon_uart_rxirq+0xd4>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  80edb0:	e0bffe17 	ldw	r2,-8(fp)
  80edb4:	10c00117 	ldw	r3,4(r2)
  80edb8:	00bfdfc4 	movi	r2,-129
  80edbc:	1886703a 	and	r3,r3,r2
  80edc0:	e0bffe17 	ldw	r2,-8(fp)
  80edc4:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  80edc8:	e0bffe17 	ldw	r2,-8(fp)
  80edcc:	10800017 	ldw	r2,0(r2)
  80edd0:	10800304 	addi	r2,r2,12
  80edd4:	e0fffe17 	ldw	r3,-8(fp)
  80edd8:	18c00117 	ldw	r3,4(r3)
  80eddc:	10c00035 	stwio	r3,0(r2)
  80ede0:	00000106 	br	80ede8 <altera_avalon_uart_rxirq+0xd4>
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
                  ALTERA_AVALON_UART_STATUS_FE_MSK))
  {
    return;
  80ede4:	0001883a 	nop
  if (next == sp->rx_start)
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  }   
}
  80ede8:	e037883a 	mov	sp,fp
  80edec:	df000017 	ldw	fp,0(sp)
  80edf0:	dec00104 	addi	sp,sp,4
  80edf4:	f800283a 	ret

0080edf8 <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
  80edf8:	defffb04 	addi	sp,sp,-20
  80edfc:	df000415 	stw	fp,16(sp)
  80ee00:	df000404 	addi	fp,sp,16
  80ee04:	e13ffc15 	stw	r4,-16(fp)
  80ee08:	e17ffd15 	stw	r5,-12(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
  80ee0c:	e0bffc17 	ldw	r2,-16(fp)
  80ee10:	10c00417 	ldw	r3,16(r2)
  80ee14:	e0bffc17 	ldw	r2,-16(fp)
  80ee18:	10800517 	ldw	r2,20(r2)
  80ee1c:	18803226 	beq	r3,r2,80eee8 <altera_avalon_uart_txirq+0xf0>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
  80ee20:	e0bffc17 	ldw	r2,-16(fp)
  80ee24:	10800617 	ldw	r2,24(r2)
  80ee28:	1080008c 	andi	r2,r2,2
  80ee2c:	10000326 	beq	r2,zero,80ee3c <altera_avalon_uart_txirq+0x44>
      (status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
  80ee30:	e0bffd17 	ldw	r2,-12(fp)
  80ee34:	1082000c 	andi	r2,r2,2048
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
  80ee38:	10001d26 	beq	r2,zero,80eeb0 <altera_avalon_uart_txirq+0xb8>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
  80ee3c:	e0bffc17 	ldw	r2,-16(fp)
  80ee40:	10800417 	ldw	r2,16(r2)
  80ee44:	e0bffc17 	ldw	r2,-16(fp)
  80ee48:	10800517 	ldw	r2,20(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
  80ee4c:	e0bffc17 	ldw	r2,-16(fp)
  80ee50:	10800017 	ldw	r2,0(r2)
  80ee54:	10800104 	addi	r2,r2,4
  80ee58:	e0fffc17 	ldw	r3,-16(fp)
  80ee5c:	18c00417 	ldw	r3,16(r3)
  80ee60:	e13ffc17 	ldw	r4,-16(fp)
  80ee64:	20c7883a 	add	r3,r4,r3
  80ee68:	18c01704 	addi	r3,r3,92
  80ee6c:	18c00003 	ldbu	r3,0(r3)
  80ee70:	18c03fcc 	andi	r3,r3,255
  80ee74:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
  80ee78:	e0bffc17 	ldw	r2,-16(fp)
  80ee7c:	10800417 	ldw	r2,16(r2)
  80ee80:	10800044 	addi	r2,r2,1
  80ee84:	e0fffc17 	ldw	r3,-16(fp)
  80ee88:	18800415 	stw	r2,16(r3)
  80ee8c:	10c00fcc 	andi	r3,r2,63
  80ee90:	e0bffc17 	ldw	r2,-16(fp)
  80ee94:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
  80ee98:	e0bffc17 	ldw	r2,-16(fp)
  80ee9c:	10800117 	ldw	r2,4(r2)
  80eea0:	10c01014 	ori	r3,r2,64
  80eea4:	e0bffc17 	ldw	r2,-16(fp)
  80eea8:	10c00115 	stw	r3,4(r2)
  80eeac:	00000e06 	br	80eee8 <altera_avalon_uart_txirq+0xf0>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
  80eeb0:	e0bffc17 	ldw	r2,-16(fp)
  80eeb4:	10800017 	ldw	r2,0(r2)
  80eeb8:	10800204 	addi	r2,r2,8
  80eebc:	10800037 	ldwio	r2,0(r2)
  80eec0:	e0bffd15 	stw	r2,-12(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
  80eec4:	e0bffd17 	ldw	r2,-12(fp)
  80eec8:	1082000c 	andi	r2,r2,2048
  80eecc:	1000061e 	bne	r2,zero,80eee8 <altera_avalon_uart_txirq+0xf0>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
  80eed0:	e0bffc17 	ldw	r2,-16(fp)
  80eed4:	10c00117 	ldw	r3,4(r2)
  80eed8:	00bfefc4 	movi	r2,-65
  80eedc:	1886703a 	and	r3,r3,r2
  80eee0:	e0bffc17 	ldw	r2,-16(fp)
  80eee4:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
  80eee8:	e0bffc17 	ldw	r2,-16(fp)
  80eeec:	10c00417 	ldw	r3,16(r2)
  80eef0:	e0bffc17 	ldw	r2,-16(fp)
  80eef4:	10800517 	ldw	r2,20(r2)
  80eef8:	1880061e 	bne	r3,r2,80ef14 <altera_avalon_uart_txirq+0x11c>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  80eefc:	e0bffc17 	ldw	r2,-16(fp)
  80ef00:	10c00117 	ldw	r3,4(r2)
  80ef04:	00beefc4 	movi	r2,-1089
  80ef08:	1886703a 	and	r3,r3,r2
  80ef0c:	e0bffc17 	ldw	r2,-16(fp)
  80ef10:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  80ef14:	e0bffc17 	ldw	r2,-16(fp)
  80ef18:	10800017 	ldw	r2,0(r2)
  80ef1c:	10800304 	addi	r2,r2,12
  80ef20:	e0fffc17 	ldw	r3,-16(fp)
  80ef24:	18c00117 	ldw	r3,4(r3)
  80ef28:	10c00035 	stwio	r3,0(r2)
}
  80ef2c:	0001883a 	nop
  80ef30:	e037883a 	mov	sp,fp
  80ef34:	df000017 	ldw	fp,0(sp)
  80ef38:	dec00104 	addi	sp,sp,4
  80ef3c:	f800283a 	ret

0080ef40 <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  80ef40:	defffd04 	addi	sp,sp,-12
  80ef44:	df000215 	stw	fp,8(sp)
  80ef48:	df000204 	addi	fp,sp,8
  80ef4c:	e13ffe15 	stw	r4,-8(fp)
  80ef50:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
  80ef54:	00000506 	br	80ef6c <altera_avalon_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
  80ef58:	e0bfff17 	ldw	r2,-4(fp)
  80ef5c:	1090000c 	andi	r2,r2,16384
  80ef60:	10000226 	beq	r2,zero,80ef6c <altera_avalon_uart_close+0x2c>
      return -EWOULDBLOCK; 
  80ef64:	00bffd44 	movi	r2,-11
  80ef68:	00000606 	br	80ef84 <altera_avalon_uart_close+0x44>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
  80ef6c:	e0bffe17 	ldw	r2,-8(fp)
  80ef70:	10c00417 	ldw	r3,16(r2)
  80ef74:	e0bffe17 	ldw	r2,-8(fp)
  80ef78:	10800517 	ldw	r2,20(r2)
  80ef7c:	18bff61e 	bne	r3,r2,80ef58 <__alt_data_end+0xff80ef58>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  80ef80:	0005883a 	mov	r2,zero
}
  80ef84:	e037883a 	mov	sp,fp
  80ef88:	df000017 	ldw	fp,0(sp)
  80ef8c:	dec00104 	addi	sp,sp,4
  80ef90:	f800283a 	ret

0080ef94 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80ef94:	defffe04 	addi	sp,sp,-8
  80ef98:	dfc00115 	stw	ra,4(sp)
  80ef9c:	df000015 	stw	fp,0(sp)
  80efa0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80efa4:	d0a00c17 	ldw	r2,-32720(gp)
  80efa8:	10000326 	beq	r2,zero,80efb8 <alt_get_errno+0x24>
  80efac:	d0a00c17 	ldw	r2,-32720(gp)
  80efb0:	103ee83a 	callr	r2
  80efb4:	00000106 	br	80efbc <alt_get_errno+0x28>
  80efb8:	d0a35d04 	addi	r2,gp,-29324
}
  80efbc:	e037883a 	mov	sp,fp
  80efc0:	dfc00117 	ldw	ra,4(sp)
  80efc4:	df000017 	ldw	fp,0(sp)
  80efc8:	dec00204 	addi	sp,sp,8
  80efcc:	f800283a 	ret

0080efd0 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
  80efd0:	defff204 	addi	sp,sp,-56
  80efd4:	dfc00d15 	stw	ra,52(sp)
  80efd8:	df000c15 	stw	fp,48(sp)
  80efdc:	df000c04 	addi	fp,sp,48
  80efe0:	e13ffc15 	stw	r4,-16(fp)
  80efe4:	e17ffd15 	stw	r5,-12(fp)
  80efe8:	e1bffe15 	stw	r6,-8(fp)
  80efec:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             block;
  alt_u8          read_would_block = 0;
  80eff0:	e03ff405 	stb	zero,-48(fp)
  int             count = 0;
  80eff4:	e03ff515 	stw	zero,-44(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
  80eff8:	e0bfff17 	ldw	r2,-4(fp)
  80effc:	1090000c 	andi	r2,r2,16384
  80f000:	1005003a 	cmpeq	r2,r2,zero
  80f004:	10803fcc 	andi	r2,r2,255
  80f008:	e0bff615 	stw	r2,-40(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
  80f00c:	00001306 	br	80f05c <altera_avalon_uart_read+0x8c>
    {
      count++;
  80f010:	e0bff517 	ldw	r2,-44(fp)
  80f014:	10800044 	addi	r2,r2,1
  80f018:	e0bff515 	stw	r2,-44(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
  80f01c:	e0bffd17 	ldw	r2,-12(fp)
  80f020:	10c00044 	addi	r3,r2,1
  80f024:	e0fffd15 	stw	r3,-12(fp)
  80f028:	e0fffc17 	ldw	r3,-16(fp)
  80f02c:	18c00217 	ldw	r3,8(r3)
  80f030:	e13ffc17 	ldw	r4,-16(fp)
  80f034:	20c7883a 	add	r3,r4,r3
  80f038:	18c00704 	addi	r3,r3,28
  80f03c:	18c00003 	ldbu	r3,0(r3)
  80f040:	10c00005 	stb	r3,0(r2)
      
      sp->rx_start = (sp->rx_start+1) & ALT_AVALON_UART_BUF_MSK;
  80f044:	e0bffc17 	ldw	r2,-16(fp)
  80f048:	10800217 	ldw	r2,8(r2)
  80f04c:	10800044 	addi	r2,r2,1
  80f050:	10c00fcc 	andi	r3,r2,63
  80f054:	e0bffc17 	ldw	r2,-16(fp)
  80f058:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
  80f05c:	e0fff517 	ldw	r3,-44(fp)
  80f060:	e0bffe17 	ldw	r2,-8(fp)
  80f064:	1880050e 	bge	r3,r2,80f07c <altera_avalon_uart_read+0xac>
  80f068:	e0bffc17 	ldw	r2,-16(fp)
  80f06c:	10c00217 	ldw	r3,8(r2)
  80f070:	e0bffc17 	ldw	r2,-16(fp)
  80f074:	10800317 	ldw	r2,12(r2)
  80f078:	18bfe51e 	bne	r3,r2,80f010 <__alt_data_end+0xff80f010>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
  80f07c:	e0bff517 	ldw	r2,-44(fp)
  80f080:	1000251e 	bne	r2,zero,80f118 <altera_avalon_uart_read+0x148>
  80f084:	e0bffc17 	ldw	r2,-16(fp)
  80f088:	10c00217 	ldw	r3,8(r2)
  80f08c:	e0bffc17 	ldw	r2,-16(fp)
  80f090:	10800317 	ldw	r2,12(r2)
  80f094:	1880201e 	bne	r3,r2,80f118 <altera_avalon_uart_read+0x148>
    {
      if (!block)
  80f098:	e0bff617 	ldw	r2,-40(fp)
  80f09c:	1000071e 	bne	r2,zero,80f0bc <altera_avalon_uart_read+0xec>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
  80f0a0:	080ef940 	call	80ef94 <alt_get_errno>
  80f0a4:	1007883a 	mov	r3,r2
  80f0a8:	008002c4 	movi	r2,11
  80f0ac:	18800015 	stw	r2,0(r3)
        read_would_block = 1;
  80f0b0:	00800044 	movi	r2,1
  80f0b4:	e0bff405 	stb	r2,-48(fp)
        break;
  80f0b8:	00001b06 	br	80f128 <altera_avalon_uart_read+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80f0bc:	0005303a 	rdctl	r2,status
  80f0c0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80f0c4:	e0fff917 	ldw	r3,-28(fp)
  80f0c8:	00bfff84 	movi	r2,-2
  80f0cc:	1884703a 	and	r2,r3,r2
  80f0d0:	1001703a 	wrctl	status,r2
  
  return context;
  80f0d4:	e0bff917 	ldw	r2,-28(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
  80f0d8:	e0bff815 	stw	r2,-32(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  80f0dc:	e0bffc17 	ldw	r2,-16(fp)
  80f0e0:	10800117 	ldw	r2,4(r2)
  80f0e4:	10c02014 	ori	r3,r2,128
  80f0e8:	e0bffc17 	ldw	r2,-16(fp)
  80f0ec:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  80f0f0:	e0bffc17 	ldw	r2,-16(fp)
  80f0f4:	10800017 	ldw	r2,0(r2)
  80f0f8:	10800304 	addi	r2,r2,12
  80f0fc:	e0fffc17 	ldw	r3,-16(fp)
  80f100:	18c00117 	ldw	r3,4(r3)
  80f104:	10c00035 	stwio	r3,0(r2)
  80f108:	e0bff817 	ldw	r2,-32(fp)
  80f10c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80f110:	e0bffa17 	ldw	r2,-24(fp)
  80f114:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
  80f118:	e0bff517 	ldw	r2,-44(fp)
  80f11c:	1000021e 	bne	r2,zero,80f128 <altera_avalon_uart_read+0x158>
  80f120:	e0bffe17 	ldw	r2,-8(fp)
  80f124:	103fcd1e 	bne	r2,zero,80f05c <__alt_data_end+0xff80f05c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80f128:	0005303a 	rdctl	r2,status
  80f12c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80f130:	e0fffb17 	ldw	r3,-20(fp)
  80f134:	00bfff84 	movi	r2,-2
  80f138:	1884703a 	and	r2,r3,r2
  80f13c:	1001703a 	wrctl	status,r2
  
  return context;
  80f140:	e0bffb17 	ldw	r2,-20(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
  80f144:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  80f148:	e0bffc17 	ldw	r2,-16(fp)
  80f14c:	10800117 	ldw	r2,4(r2)
  80f150:	10c02014 	ori	r3,r2,128
  80f154:	e0bffc17 	ldw	r2,-16(fp)
  80f158:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  80f15c:	e0bffc17 	ldw	r2,-16(fp)
  80f160:	10800017 	ldw	r2,0(r2)
  80f164:	10800304 	addi	r2,r2,12
  80f168:	e0fffc17 	ldw	r3,-16(fp)
  80f16c:	18c00117 	ldw	r3,4(r3)
  80f170:	10c00035 	stwio	r3,0(r2)
  80f174:	e0bff817 	ldw	r2,-32(fp)
  80f178:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80f17c:	e0bff717 	ldw	r2,-36(fp)
  80f180:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
  80f184:	e0bff403 	ldbu	r2,-48(fp)
  80f188:	10000226 	beq	r2,zero,80f194 <altera_avalon_uart_read+0x1c4>
    return -EWOULDBLOCK;
  80f18c:	00bffd44 	movi	r2,-11
  80f190:	00000106 	br	80f198 <altera_avalon_uart_read+0x1c8>
  }
  else {
    return count;
  80f194:	e0bff517 	ldw	r2,-44(fp)
  }
}
  80f198:	e037883a 	mov	sp,fp
  80f19c:	dfc00117 	ldw	ra,4(sp)
  80f1a0:	df000017 	ldw	fp,0(sp)
  80f1a4:	dec00204 	addi	sp,sp,8
  80f1a8:	f800283a 	ret

0080f1ac <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80f1ac:	defffe04 	addi	sp,sp,-8
  80f1b0:	dfc00115 	stw	ra,4(sp)
  80f1b4:	df000015 	stw	fp,0(sp)
  80f1b8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80f1bc:	d0a00c17 	ldw	r2,-32720(gp)
  80f1c0:	10000326 	beq	r2,zero,80f1d0 <alt_get_errno+0x24>
  80f1c4:	d0a00c17 	ldw	r2,-32720(gp)
  80f1c8:	103ee83a 	callr	r2
  80f1cc:	00000106 	br	80f1d4 <alt_get_errno+0x28>
  80f1d0:	d0a35d04 	addi	r2,gp,-29324
}
  80f1d4:	e037883a 	mov	sp,fp
  80f1d8:	dfc00117 	ldw	ra,4(sp)
  80f1dc:	df000017 	ldw	fp,0(sp)
  80f1e0:	dec00204 	addi	sp,sp,8
  80f1e4:	f800283a 	ret

0080f1e8 <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
  80f1e8:	defff204 	addi	sp,sp,-56
  80f1ec:	dfc00d15 	stw	ra,52(sp)
  80f1f0:	df000c15 	stw	fp,48(sp)
  80f1f4:	df000c04 	addi	fp,sp,48
  80f1f8:	e13ffc15 	stw	r4,-16(fp)
  80f1fc:	e17ffd15 	stw	r5,-12(fp)
  80f200:	e1bffe15 	stw	r6,-8(fp)
  80f204:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
  80f208:	e0bffe17 	ldw	r2,-8(fp)
  80f20c:	e0bff415 	stw	r2,-48(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
  80f210:	e0bfff17 	ldw	r2,-4(fp)
  80f214:	1090000c 	andi	r2,r2,16384
  80f218:	e0bff515 	stw	r2,-44(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
  80f21c:	00003c06 	br	80f310 <altera_avalon_uart_write+0x128>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  80f220:	e0bffc17 	ldw	r2,-16(fp)
  80f224:	10800517 	ldw	r2,20(r2)
  80f228:	10800044 	addi	r2,r2,1
  80f22c:	10800fcc 	andi	r2,r2,63
  80f230:	e0bff715 	stw	r2,-36(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
  80f234:	e0bffc17 	ldw	r2,-16(fp)
  80f238:	10c00417 	ldw	r3,16(r2)
  80f23c:	e0bff717 	ldw	r2,-36(fp)
  80f240:	1880221e 	bne	r3,r2,80f2cc <altera_avalon_uart_write+0xe4>
    {
      if (no_block)
  80f244:	e0bff517 	ldw	r2,-44(fp)
  80f248:	10000526 	beq	r2,zero,80f260 <altera_avalon_uart_write+0x78>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
  80f24c:	080f1ac0 	call	80f1ac <alt_get_errno>
  80f250:	1007883a 	mov	r3,r2
  80f254:	008002c4 	movi	r2,11
  80f258:	18800015 	stw	r2,0(r3)
        break;
  80f25c:	00002e06 	br	80f318 <altera_avalon_uart_write+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80f260:	0005303a 	rdctl	r2,status
  80f264:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80f268:	e0fff917 	ldw	r3,-28(fp)
  80f26c:	00bfff84 	movi	r2,-2
  80f270:	1884703a 	and	r2,r3,r2
  80f274:	1001703a 	wrctl	status,r2
  
  return context;
  80f278:	e0bff917 	ldw	r2,-28(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
  80f27c:	e0bff815 	stw	r2,-32(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  80f280:	e0bffc17 	ldw	r2,-16(fp)
  80f284:	10800117 	ldw	r2,4(r2)
  80f288:	10c11014 	ori	r3,r2,1088
  80f28c:	e0bffc17 	ldw	r2,-16(fp)
  80f290:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  80f294:	e0bffc17 	ldw	r2,-16(fp)
  80f298:	10800017 	ldw	r2,0(r2)
  80f29c:	10800304 	addi	r2,r2,12
  80f2a0:	e0fffc17 	ldw	r3,-16(fp)
  80f2a4:	18c00117 	ldw	r3,4(r3)
  80f2a8:	10c00035 	stwio	r3,0(r2)
  80f2ac:	e0bff817 	ldw	r2,-32(fp)
  80f2b0:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80f2b4:	e0bff617 	ldw	r2,-40(fp)
  80f2b8:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
  80f2bc:	e0bffc17 	ldw	r2,-16(fp)
  80f2c0:	10c00417 	ldw	r3,16(r2)
  80f2c4:	e0bff717 	ldw	r2,-36(fp)
  80f2c8:	18bffc26 	beq	r3,r2,80f2bc <__alt_data_end+0xff80f2bc>
      }
    }

    count--;
  80f2cc:	e0bff417 	ldw	r2,-48(fp)
  80f2d0:	10bfffc4 	addi	r2,r2,-1
  80f2d4:	e0bff415 	stw	r2,-48(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
  80f2d8:	e0bffc17 	ldw	r2,-16(fp)
  80f2dc:	10c00517 	ldw	r3,20(r2)
  80f2e0:	e0bffd17 	ldw	r2,-12(fp)
  80f2e4:	11000044 	addi	r4,r2,1
  80f2e8:	e13ffd15 	stw	r4,-12(fp)
  80f2ec:	10800003 	ldbu	r2,0(r2)
  80f2f0:	1009883a 	mov	r4,r2
  80f2f4:	e0bffc17 	ldw	r2,-16(fp)
  80f2f8:	10c5883a 	add	r2,r2,r3
  80f2fc:	10801704 	addi	r2,r2,92
  80f300:	11000005 	stb	r4,0(r2)
    sp->tx_end = next;
  80f304:	e0bffc17 	ldw	r2,-16(fp)
  80f308:	e0fff717 	ldw	r3,-36(fp)
  80f30c:	10c00515 	stw	r3,20(r2)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
  80f310:	e0bff417 	ldw	r2,-48(fp)
  80f314:	103fc21e 	bne	r2,zero,80f220 <__alt_data_end+0xff80f220>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80f318:	0005303a 	rdctl	r2,status
  80f31c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80f320:	e0fffb17 	ldw	r3,-20(fp)
  80f324:	00bfff84 	movi	r2,-2
  80f328:	1884703a 	and	r2,r3,r2
  80f32c:	1001703a 	wrctl	status,r2
  
  return context;
  80f330:	e0bffb17 	ldw	r2,-20(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
  80f334:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  80f338:	e0bffc17 	ldw	r2,-16(fp)
  80f33c:	10800117 	ldw	r2,4(r2)
  80f340:	10c11014 	ori	r3,r2,1088
  80f344:	e0bffc17 	ldw	r2,-16(fp)
  80f348:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  80f34c:	e0bffc17 	ldw	r2,-16(fp)
  80f350:	10800017 	ldw	r2,0(r2)
  80f354:	10800304 	addi	r2,r2,12
  80f358:	e0fffc17 	ldw	r3,-16(fp)
  80f35c:	18c00117 	ldw	r3,4(r3)
  80f360:	10c00035 	stwio	r3,0(r2)
  80f364:	e0bff817 	ldw	r2,-32(fp)
  80f368:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80f36c:	e0bffa17 	ldw	r2,-24(fp)
  80f370:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
  80f374:	e0fffe17 	ldw	r3,-8(fp)
  80f378:	e0bff417 	ldw	r2,-48(fp)
  80f37c:	1885c83a 	sub	r2,r3,r2
}
  80f380:	e037883a 	mov	sp,fp
  80f384:	dfc00117 	ldw	ra,4(sp)
  80f388:	df000017 	ldw	fp,0(sp)
  80f38c:	dec00204 	addi	sp,sp,8
  80f390:	f800283a 	ret

0080f394 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
  80f394:	defff504 	addi	sp,sp,-44
  80f398:	df000a15 	stw	fp,40(sp)
  80f39c:	df000a04 	addi	fp,sp,40
  80f3a0:	e13ffc15 	stw	r4,-16(fp)
  80f3a4:	e17ffd15 	stw	r5,-12(fp)
  80f3a8:	e1bffe15 	stw	r6,-8(fp)
  80f3ac:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  80f3b0:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  80f3b4:	d0a36217 	ldw	r2,-29304(gp)
  
  if (alt_ticks_per_second ())
  80f3b8:	10003c26 	beq	r2,zero,80f4ac <alt_alarm_start+0x118>
  {
    if (alarm)
  80f3bc:	e0bffc17 	ldw	r2,-16(fp)
  80f3c0:	10003826 	beq	r2,zero,80f4a4 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
  80f3c4:	e0bffc17 	ldw	r2,-16(fp)
  80f3c8:	e0fffe17 	ldw	r3,-8(fp)
  80f3cc:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
  80f3d0:	e0bffc17 	ldw	r2,-16(fp)
  80f3d4:	e0ffff17 	ldw	r3,-4(fp)
  80f3d8:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80f3dc:	0005303a 	rdctl	r2,status
  80f3e0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80f3e4:	e0fff917 	ldw	r3,-28(fp)
  80f3e8:	00bfff84 	movi	r2,-2
  80f3ec:	1884703a 	and	r2,r3,r2
  80f3f0:	1001703a 	wrctl	status,r2
  
  return context;
  80f3f4:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
  80f3f8:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  80f3fc:	d0a36317 	ldw	r2,-29300(gp)
      
      current_nticks = alt_nticks();
  80f400:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
  80f404:	e0fffd17 	ldw	r3,-12(fp)
  80f408:	e0bff617 	ldw	r2,-40(fp)
  80f40c:	1885883a 	add	r2,r3,r2
  80f410:	10c00044 	addi	r3,r2,1
  80f414:	e0bffc17 	ldw	r2,-16(fp)
  80f418:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
  80f41c:	e0bffc17 	ldw	r2,-16(fp)
  80f420:	10c00217 	ldw	r3,8(r2)
  80f424:	e0bff617 	ldw	r2,-40(fp)
  80f428:	1880042e 	bgeu	r3,r2,80f43c <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
  80f42c:	e0bffc17 	ldw	r2,-16(fp)
  80f430:	00c00044 	movi	r3,1
  80f434:	10c00405 	stb	r3,16(r2)
  80f438:	00000206 	br	80f444 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
  80f43c:	e0bffc17 	ldw	r2,-16(fp)
  80f440:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
  80f444:	e0bffc17 	ldw	r2,-16(fp)
  80f448:	d0e01004 	addi	r3,gp,-32704
  80f44c:	e0fffa15 	stw	r3,-24(fp)
  80f450:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  80f454:	e0bffb17 	ldw	r2,-20(fp)
  80f458:	e0fffa17 	ldw	r3,-24(fp)
  80f45c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
  80f460:	e0bffa17 	ldw	r2,-24(fp)
  80f464:	10c00017 	ldw	r3,0(r2)
  80f468:	e0bffb17 	ldw	r2,-20(fp)
  80f46c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  80f470:	e0bffa17 	ldw	r2,-24(fp)
  80f474:	10800017 	ldw	r2,0(r2)
  80f478:	e0fffb17 	ldw	r3,-20(fp)
  80f47c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
  80f480:	e0bffa17 	ldw	r2,-24(fp)
  80f484:	e0fffb17 	ldw	r3,-20(fp)
  80f488:	10c00015 	stw	r3,0(r2)
  80f48c:	e0bff817 	ldw	r2,-32(fp)
  80f490:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80f494:	e0bff717 	ldw	r2,-36(fp)
  80f498:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
  80f49c:	0005883a 	mov	r2,zero
  80f4a0:	00000306 	br	80f4b0 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
  80f4a4:	00bffa84 	movi	r2,-22
  80f4a8:	00000106 	br	80f4b0 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
  80f4ac:	00bfde84 	movi	r2,-134
  }
}
  80f4b0:	e037883a 	mov	sp,fp
  80f4b4:	df000017 	ldw	fp,0(sp)
  80f4b8:	dec00104 	addi	sp,sp,4
  80f4bc:	f800283a 	ret

0080f4c0 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
  80f4c0:	defffe04 	addi	sp,sp,-8
  80f4c4:	df000115 	stw	fp,4(sp)
  80f4c8:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  80f4cc:	e03fff15 	stw	zero,-4(fp)
  80f4d0:	00000506 	br	80f4e8 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  80f4d4:	e0bfff17 	ldw	r2,-4(fp)
  80f4d8:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  80f4dc:	e0bfff17 	ldw	r2,-4(fp)
  80f4e0:	10800804 	addi	r2,r2,32
  80f4e4:	e0bfff15 	stw	r2,-4(fp)
  80f4e8:	e0bfff17 	ldw	r2,-4(fp)
  80f4ec:	10820030 	cmpltui	r2,r2,2048
  80f4f0:	103ff81e 	bne	r2,zero,80f4d4 <__alt_data_end+0xff80f4d4>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
  80f4f4:	0001883a 	nop
  80f4f8:	e037883a 	mov	sp,fp
  80f4fc:	df000017 	ldw	fp,0(sp)
  80f500:	dec00104 	addi	sp,sp,4
  80f504:	f800283a 	ret

0080f508 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80f508:	defffe04 	addi	sp,sp,-8
  80f50c:	dfc00115 	stw	ra,4(sp)
  80f510:	df000015 	stw	fp,0(sp)
  80f514:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80f518:	d0a00c17 	ldw	r2,-32720(gp)
  80f51c:	10000326 	beq	r2,zero,80f52c <alt_get_errno+0x24>
  80f520:	d0a00c17 	ldw	r2,-32720(gp)
  80f524:	103ee83a 	callr	r2
  80f528:	00000106 	br	80f530 <alt_get_errno+0x28>
  80f52c:	d0a35d04 	addi	r2,gp,-29324
}
  80f530:	e037883a 	mov	sp,fp
  80f534:	dfc00117 	ldw	ra,4(sp)
  80f538:	df000017 	ldw	fp,0(sp)
  80f53c:	dec00204 	addi	sp,sp,8
  80f540:	f800283a 	ret

0080f544 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  80f544:	defffa04 	addi	sp,sp,-24
  80f548:	dfc00515 	stw	ra,20(sp)
  80f54c:	df000415 	stw	fp,16(sp)
  80f550:	df000404 	addi	fp,sp,16
  80f554:	e13ffe15 	stw	r4,-8(fp)
  80f558:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  80f55c:	e0bffe17 	ldw	r2,-8(fp)
  80f560:	10000326 	beq	r2,zero,80f570 <alt_dev_llist_insert+0x2c>
  80f564:	e0bffe17 	ldw	r2,-8(fp)
  80f568:	10800217 	ldw	r2,8(r2)
  80f56c:	1000061e 	bne	r2,zero,80f588 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
  80f570:	080f5080 	call	80f508 <alt_get_errno>
  80f574:	1007883a 	mov	r3,r2
  80f578:	00800584 	movi	r2,22
  80f57c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
  80f580:	00bffa84 	movi	r2,-22
  80f584:	00001306 	br	80f5d4 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
  80f588:	e0bffe17 	ldw	r2,-8(fp)
  80f58c:	e0ffff17 	ldw	r3,-4(fp)
  80f590:	e0fffc15 	stw	r3,-16(fp)
  80f594:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  80f598:	e0bffd17 	ldw	r2,-12(fp)
  80f59c:	e0fffc17 	ldw	r3,-16(fp)
  80f5a0:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
  80f5a4:	e0bffc17 	ldw	r2,-16(fp)
  80f5a8:	10c00017 	ldw	r3,0(r2)
  80f5ac:	e0bffd17 	ldw	r2,-12(fp)
  80f5b0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  80f5b4:	e0bffc17 	ldw	r2,-16(fp)
  80f5b8:	10800017 	ldw	r2,0(r2)
  80f5bc:	e0fffd17 	ldw	r3,-12(fp)
  80f5c0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
  80f5c4:	e0bffc17 	ldw	r2,-16(fp)
  80f5c8:	e0fffd17 	ldw	r3,-12(fp)
  80f5cc:	10c00015 	stw	r3,0(r2)

  return 0;  
  80f5d0:	0005883a 	mov	r2,zero
}
  80f5d4:	e037883a 	mov	sp,fp
  80f5d8:	dfc00117 	ldw	ra,4(sp)
  80f5dc:	df000017 	ldw	fp,0(sp)
  80f5e0:	dec00204 	addi	sp,sp,8
  80f5e4:	f800283a 	ret

0080f5e8 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
  80f5e8:	defffd04 	addi	sp,sp,-12
  80f5ec:	dfc00215 	stw	ra,8(sp)
  80f5f0:	df000115 	stw	fp,4(sp)
  80f5f4:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  80f5f8:	00802074 	movhi	r2,129
  80f5fc:	10812e04 	addi	r2,r2,1208
  80f600:	e0bfff15 	stw	r2,-4(fp)
  80f604:	00000606 	br	80f620 <_do_ctors+0x38>
        (*ctor) (); 
  80f608:	e0bfff17 	ldw	r2,-4(fp)
  80f60c:	10800017 	ldw	r2,0(r2)
  80f610:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  80f614:	e0bfff17 	ldw	r2,-4(fp)
  80f618:	10bfff04 	addi	r2,r2,-4
  80f61c:	e0bfff15 	stw	r2,-4(fp)
  80f620:	e0ffff17 	ldw	r3,-4(fp)
  80f624:	00802074 	movhi	r2,129
  80f628:	10812f04 	addi	r2,r2,1212
  80f62c:	18bff62e 	bgeu	r3,r2,80f608 <__alt_data_end+0xff80f608>
        (*ctor) (); 
}
  80f630:	0001883a 	nop
  80f634:	e037883a 	mov	sp,fp
  80f638:	dfc00117 	ldw	ra,4(sp)
  80f63c:	df000017 	ldw	fp,0(sp)
  80f640:	dec00204 	addi	sp,sp,8
  80f644:	f800283a 	ret

0080f648 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
  80f648:	defffd04 	addi	sp,sp,-12
  80f64c:	dfc00215 	stw	ra,8(sp)
  80f650:	df000115 	stw	fp,4(sp)
  80f654:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  80f658:	00802074 	movhi	r2,129
  80f65c:	10812e04 	addi	r2,r2,1208
  80f660:	e0bfff15 	stw	r2,-4(fp)
  80f664:	00000606 	br	80f680 <_do_dtors+0x38>
        (*dtor) (); 
  80f668:	e0bfff17 	ldw	r2,-4(fp)
  80f66c:	10800017 	ldw	r2,0(r2)
  80f670:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  80f674:	e0bfff17 	ldw	r2,-4(fp)
  80f678:	10bfff04 	addi	r2,r2,-4
  80f67c:	e0bfff15 	stw	r2,-4(fp)
  80f680:	e0ffff17 	ldw	r3,-4(fp)
  80f684:	00802074 	movhi	r2,129
  80f688:	10812f04 	addi	r2,r2,1212
  80f68c:	18bff62e 	bgeu	r3,r2,80f668 <__alt_data_end+0xff80f668>
        (*dtor) (); 
}
  80f690:	0001883a 	nop
  80f694:	e037883a 	mov	sp,fp
  80f698:	dfc00117 	ldw	ra,4(sp)
  80f69c:	df000017 	ldw	fp,0(sp)
  80f6a0:	dec00204 	addi	sp,sp,8
  80f6a4:	f800283a 	ret

0080f6a8 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
  80f6a8:	defffe04 	addi	sp,sp,-8
  80f6ac:	dfc00115 	stw	ra,4(sp)
  80f6b0:	df000015 	stw	fp,0(sp)
  80f6b4:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
  80f6b8:	01440004 	movi	r5,4096
  80f6bc:	0009883a 	mov	r4,zero
  80f6c0:	080fffc0 	call	80fffc <alt_icache_flush>
#endif
}
  80f6c4:	0001883a 	nop
  80f6c8:	e037883a 	mov	sp,fp
  80f6cc:	dfc00117 	ldw	ra,4(sp)
  80f6d0:	df000017 	ldw	fp,0(sp)
  80f6d4:	dec00204 	addi	sp,sp,8
  80f6d8:	f800283a 	ret

0080f6dc <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  80f6dc:	defff904 	addi	sp,sp,-28
  80f6e0:	dfc00615 	stw	ra,24(sp)
  80f6e4:	df000515 	stw	fp,20(sp)
  80f6e8:	df000504 	addi	fp,sp,20
  80f6ec:	e13ffc15 	stw	r4,-16(fp)
  80f6f0:	e17ffd15 	stw	r5,-12(fp)
  80f6f4:	e1bffe15 	stw	r6,-8(fp)
  80f6f8:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
  80f6fc:	e1bfff17 	ldw	r6,-4(fp)
  80f700:	e17ffe17 	ldw	r5,-8(fp)
  80f704:	e13ffd17 	ldw	r4,-12(fp)
  80f708:	080f91c0 	call	80f91c <open>
  80f70c:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
  80f710:	e0bffb17 	ldw	r2,-20(fp)
  80f714:	10001c16 	blt	r2,zero,80f788 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
  80f718:	00802074 	movhi	r2,129
  80f71c:	1084d704 	addi	r2,r2,4956
  80f720:	e0fffb17 	ldw	r3,-20(fp)
  80f724:	18c00324 	muli	r3,r3,12
  80f728:	10c5883a 	add	r2,r2,r3
  80f72c:	10c00017 	ldw	r3,0(r2)
  80f730:	e0bffc17 	ldw	r2,-16(fp)
  80f734:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
  80f738:	00802074 	movhi	r2,129
  80f73c:	1084d704 	addi	r2,r2,4956
  80f740:	e0fffb17 	ldw	r3,-20(fp)
  80f744:	18c00324 	muli	r3,r3,12
  80f748:	10c5883a 	add	r2,r2,r3
  80f74c:	10800104 	addi	r2,r2,4
  80f750:	10c00017 	ldw	r3,0(r2)
  80f754:	e0bffc17 	ldw	r2,-16(fp)
  80f758:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  80f75c:	00802074 	movhi	r2,129
  80f760:	1084d704 	addi	r2,r2,4956
  80f764:	e0fffb17 	ldw	r3,-20(fp)
  80f768:	18c00324 	muli	r3,r3,12
  80f76c:	10c5883a 	add	r2,r2,r3
  80f770:	10800204 	addi	r2,r2,8
  80f774:	10c00017 	ldw	r3,0(r2)
  80f778:	e0bffc17 	ldw	r2,-16(fp)
  80f77c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
  80f780:	e13ffb17 	ldw	r4,-20(fp)
  80f784:	080d5600 	call	80d560 <alt_release_fd>
  }
} 
  80f788:	0001883a 	nop
  80f78c:	e037883a 	mov	sp,fp
  80f790:	dfc00117 	ldw	ra,4(sp)
  80f794:	df000017 	ldw	fp,0(sp)
  80f798:	dec00204 	addi	sp,sp,8
  80f79c:	f800283a 	ret

0080f7a0 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  80f7a0:	defffb04 	addi	sp,sp,-20
  80f7a4:	dfc00415 	stw	ra,16(sp)
  80f7a8:	df000315 	stw	fp,12(sp)
  80f7ac:	df000304 	addi	fp,sp,12
  80f7b0:	e13ffd15 	stw	r4,-12(fp)
  80f7b4:	e17ffe15 	stw	r5,-8(fp)
  80f7b8:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  80f7bc:	01c07fc4 	movi	r7,511
  80f7c0:	01800044 	movi	r6,1
  80f7c4:	e17ffd17 	ldw	r5,-12(fp)
  80f7c8:	01002074 	movhi	r4,129
  80f7cc:	2104da04 	addi	r4,r4,4968
  80f7d0:	080f6dc0 	call	80f6dc <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  80f7d4:	01c07fc4 	movi	r7,511
  80f7d8:	000d883a 	mov	r6,zero
  80f7dc:	e17ffe17 	ldw	r5,-8(fp)
  80f7e0:	01002074 	movhi	r4,129
  80f7e4:	2104d704 	addi	r4,r4,4956
  80f7e8:	080f6dc0 	call	80f6dc <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
  80f7ec:	01c07fc4 	movi	r7,511
  80f7f0:	01800044 	movi	r6,1
  80f7f4:	e17fff17 	ldw	r5,-4(fp)
  80f7f8:	01002074 	movhi	r4,129
  80f7fc:	2104dd04 	addi	r4,r4,4980
  80f800:	080f6dc0 	call	80f6dc <alt_open_fd>
}  
  80f804:	0001883a 	nop
  80f808:	e037883a 	mov	sp,fp
  80f80c:	dfc00117 	ldw	ra,4(sp)
  80f810:	df000017 	ldw	fp,0(sp)
  80f814:	dec00204 	addi	sp,sp,8
  80f818:	f800283a 	ret

0080f81c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80f81c:	defffe04 	addi	sp,sp,-8
  80f820:	dfc00115 	stw	ra,4(sp)
  80f824:	df000015 	stw	fp,0(sp)
  80f828:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80f82c:	d0a00c17 	ldw	r2,-32720(gp)
  80f830:	10000326 	beq	r2,zero,80f840 <alt_get_errno+0x24>
  80f834:	d0a00c17 	ldw	r2,-32720(gp)
  80f838:	103ee83a 	callr	r2
  80f83c:	00000106 	br	80f844 <alt_get_errno+0x28>
  80f840:	d0a35d04 	addi	r2,gp,-29324
}
  80f844:	e037883a 	mov	sp,fp
  80f848:	dfc00117 	ldw	ra,4(sp)
  80f84c:	df000017 	ldw	fp,0(sp)
  80f850:	dec00204 	addi	sp,sp,8
  80f854:	f800283a 	ret

0080f858 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
  80f858:	defffd04 	addi	sp,sp,-12
  80f85c:	df000215 	stw	fp,8(sp)
  80f860:	df000204 	addi	fp,sp,8
  80f864:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  80f868:	e0bfff17 	ldw	r2,-4(fp)
  80f86c:	10800217 	ldw	r2,8(r2)
  80f870:	10d00034 	orhi	r3,r2,16384
  80f874:	e0bfff17 	ldw	r2,-4(fp)
  80f878:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  80f87c:	e03ffe15 	stw	zero,-8(fp)
  80f880:	00001d06 	br	80f8f8 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  80f884:	00802074 	movhi	r2,129
  80f888:	1084d704 	addi	r2,r2,4956
  80f88c:	e0fffe17 	ldw	r3,-8(fp)
  80f890:	18c00324 	muli	r3,r3,12
  80f894:	10c5883a 	add	r2,r2,r3
  80f898:	10c00017 	ldw	r3,0(r2)
  80f89c:	e0bfff17 	ldw	r2,-4(fp)
  80f8a0:	10800017 	ldw	r2,0(r2)
  80f8a4:	1880111e 	bne	r3,r2,80f8ec <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  80f8a8:	00802074 	movhi	r2,129
  80f8ac:	1084d704 	addi	r2,r2,4956
  80f8b0:	e0fffe17 	ldw	r3,-8(fp)
  80f8b4:	18c00324 	muli	r3,r3,12
  80f8b8:	10c5883a 	add	r2,r2,r3
  80f8bc:	10800204 	addi	r2,r2,8
  80f8c0:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  80f8c4:	1000090e 	bge	r2,zero,80f8ec <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
  80f8c8:	e0bffe17 	ldw	r2,-8(fp)
  80f8cc:	10c00324 	muli	r3,r2,12
  80f8d0:	00802074 	movhi	r2,129
  80f8d4:	1084d704 	addi	r2,r2,4956
  80f8d8:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  80f8dc:	e0bfff17 	ldw	r2,-4(fp)
  80f8e0:	18800226 	beq	r3,r2,80f8ec <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
  80f8e4:	00bffcc4 	movi	r2,-13
  80f8e8:	00000806 	br	80f90c <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  80f8ec:	e0bffe17 	ldw	r2,-8(fp)
  80f8f0:	10800044 	addi	r2,r2,1
  80f8f4:	e0bffe15 	stw	r2,-8(fp)
  80f8f8:	d0a00b17 	ldw	r2,-32724(gp)
  80f8fc:	1007883a 	mov	r3,r2
  80f900:	e0bffe17 	ldw	r2,-8(fp)
  80f904:	18bfdf2e 	bgeu	r3,r2,80f884 <__alt_data_end+0xff80f884>
    }
  }
  
  /* The device is not locked */
 
  return 0;
  80f908:	0005883a 	mov	r2,zero
}
  80f90c:	e037883a 	mov	sp,fp
  80f910:	df000017 	ldw	fp,0(sp)
  80f914:	dec00104 	addi	sp,sp,4
  80f918:	f800283a 	ret

0080f91c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  80f91c:	defff604 	addi	sp,sp,-40
  80f920:	dfc00915 	stw	ra,36(sp)
  80f924:	df000815 	stw	fp,32(sp)
  80f928:	df000804 	addi	fp,sp,32
  80f92c:	e13ffd15 	stw	r4,-12(fp)
  80f930:	e17ffe15 	stw	r5,-8(fp)
  80f934:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
  80f938:	00bfffc4 	movi	r2,-1
  80f93c:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
  80f940:	00bffb44 	movi	r2,-19
  80f944:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
  80f948:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  80f94c:	d1600904 	addi	r5,gp,-32732
  80f950:	e13ffd17 	ldw	r4,-12(fp)
  80f954:	080fdc00 	call	80fdc0 <alt_find_dev>
  80f958:	e0bff815 	stw	r2,-32(fp)
  80f95c:	e0bff817 	ldw	r2,-32(fp)
  80f960:	1000051e 	bne	r2,zero,80f978 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  80f964:	e13ffd17 	ldw	r4,-12(fp)
  80f968:	080fe500 	call	80fe50 <alt_find_file>
  80f96c:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
  80f970:	00800044 	movi	r2,1
  80f974:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  80f978:	e0bff817 	ldw	r2,-32(fp)
  80f97c:	10002926 	beq	r2,zero,80fa24 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
  80f980:	e13ff817 	ldw	r4,-32(fp)
  80f984:	080ff580 	call	80ff58 <alt_get_fd>
  80f988:	e0bff915 	stw	r2,-28(fp)
  80f98c:	e0bff917 	ldw	r2,-28(fp)
  80f990:	1000030e 	bge	r2,zero,80f9a0 <open+0x84>
    {
      status = index;
  80f994:	e0bff917 	ldw	r2,-28(fp)
  80f998:	e0bffa15 	stw	r2,-24(fp)
  80f99c:	00002306 	br	80fa2c <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
  80f9a0:	e0bff917 	ldw	r2,-28(fp)
  80f9a4:	10c00324 	muli	r3,r2,12
  80f9a8:	00802074 	movhi	r2,129
  80f9ac:	1084d704 	addi	r2,r2,4956
  80f9b0:	1885883a 	add	r2,r3,r2
  80f9b4:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  80f9b8:	e0fffe17 	ldw	r3,-8(fp)
  80f9bc:	00900034 	movhi	r2,16384
  80f9c0:	10bfffc4 	addi	r2,r2,-1
  80f9c4:	1886703a 	and	r3,r3,r2
  80f9c8:	e0bffc17 	ldw	r2,-16(fp)
  80f9cc:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  80f9d0:	e0bffb17 	ldw	r2,-20(fp)
  80f9d4:	1000051e 	bne	r2,zero,80f9ec <open+0xd0>
  80f9d8:	e13ffc17 	ldw	r4,-16(fp)
  80f9dc:	080f8580 	call	80f858 <alt_file_locked>
  80f9e0:	e0bffa15 	stw	r2,-24(fp)
  80f9e4:	e0bffa17 	ldw	r2,-24(fp)
  80f9e8:	10001016 	blt	r2,zero,80fa2c <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  80f9ec:	e0bff817 	ldw	r2,-32(fp)
  80f9f0:	10800317 	ldw	r2,12(r2)
  80f9f4:	10000826 	beq	r2,zero,80fa18 <open+0xfc>
  80f9f8:	e0bff817 	ldw	r2,-32(fp)
  80f9fc:	10800317 	ldw	r2,12(r2)
  80fa00:	e1ffff17 	ldw	r7,-4(fp)
  80fa04:	e1bffe17 	ldw	r6,-8(fp)
  80fa08:	e17ffd17 	ldw	r5,-12(fp)
  80fa0c:	e13ffc17 	ldw	r4,-16(fp)
  80fa10:	103ee83a 	callr	r2
  80fa14:	00000106 	br	80fa1c <open+0x100>
  80fa18:	0005883a 	mov	r2,zero
  80fa1c:	e0bffa15 	stw	r2,-24(fp)
  80fa20:	00000206 	br	80fa2c <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
  80fa24:	00bffb44 	movi	r2,-19
  80fa28:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  80fa2c:	e0bffa17 	ldw	r2,-24(fp)
  80fa30:	1000090e 	bge	r2,zero,80fa58 <open+0x13c>
  {
    alt_release_fd (index);  
  80fa34:	e13ff917 	ldw	r4,-28(fp)
  80fa38:	080d5600 	call	80d560 <alt_release_fd>
    ALT_ERRNO = -status;
  80fa3c:	080f81c0 	call	80f81c <alt_get_errno>
  80fa40:	1007883a 	mov	r3,r2
  80fa44:	e0bffa17 	ldw	r2,-24(fp)
  80fa48:	0085c83a 	sub	r2,zero,r2
  80fa4c:	18800015 	stw	r2,0(r3)
    return -1;
  80fa50:	00bfffc4 	movi	r2,-1
  80fa54:	00000106 	br	80fa5c <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
  80fa58:	e0bff917 	ldw	r2,-28(fp)
}
  80fa5c:	e037883a 	mov	sp,fp
  80fa60:	dfc00117 	ldw	ra,4(sp)
  80fa64:	df000017 	ldw	fp,0(sp)
  80fa68:	dec00204 	addi	sp,sp,8
  80fa6c:	f800283a 	ret

0080fa70 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
  80fa70:	defffa04 	addi	sp,sp,-24
  80fa74:	df000515 	stw	fp,20(sp)
  80fa78:	df000504 	addi	fp,sp,20
  80fa7c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80fa80:	0005303a 	rdctl	r2,status
  80fa84:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80fa88:	e0fffc17 	ldw	r3,-16(fp)
  80fa8c:	00bfff84 	movi	r2,-2
  80fa90:	1884703a 	and	r2,r3,r2
  80fa94:	1001703a 	wrctl	status,r2
  
  return context;
  80fa98:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  80fa9c:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
  80faa0:	e0bfff17 	ldw	r2,-4(fp)
  80faa4:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  80faa8:	e0bffd17 	ldw	r2,-12(fp)
  80faac:	10800017 	ldw	r2,0(r2)
  80fab0:	e0fffd17 	ldw	r3,-12(fp)
  80fab4:	18c00117 	ldw	r3,4(r3)
  80fab8:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
  80fabc:	e0bffd17 	ldw	r2,-12(fp)
  80fac0:	10800117 	ldw	r2,4(r2)
  80fac4:	e0fffd17 	ldw	r3,-12(fp)
  80fac8:	18c00017 	ldw	r3,0(r3)
  80facc:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  80fad0:	e0bffd17 	ldw	r2,-12(fp)
  80fad4:	e0fffd17 	ldw	r3,-12(fp)
  80fad8:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
  80fadc:	e0bffd17 	ldw	r2,-12(fp)
  80fae0:	e0fffd17 	ldw	r3,-12(fp)
  80fae4:	10c00015 	stw	r3,0(r2)
  80fae8:	e0bffb17 	ldw	r2,-20(fp)
  80faec:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80faf0:	e0bffe17 	ldw	r2,-8(fp)
  80faf4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
  80faf8:	0001883a 	nop
  80fafc:	e037883a 	mov	sp,fp
  80fb00:	df000017 	ldw	fp,0(sp)
  80fb04:	dec00104 	addi	sp,sp,4
  80fb08:	f800283a 	ret

0080fb0c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  80fb0c:	defffb04 	addi	sp,sp,-20
  80fb10:	dfc00415 	stw	ra,16(sp)
  80fb14:	df000315 	stw	fp,12(sp)
  80fb18:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
  80fb1c:	d0a01017 	ldw	r2,-32704(gp)
  80fb20:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  80fb24:	d0a36317 	ldw	r2,-29300(gp)
  80fb28:	10800044 	addi	r2,r2,1
  80fb2c:	d0a36315 	stw	r2,-29300(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  80fb30:	00002e06 	br	80fbec <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
  80fb34:	e0bffd17 	ldw	r2,-12(fp)
  80fb38:	10800017 	ldw	r2,0(r2)
  80fb3c:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  80fb40:	e0bffd17 	ldw	r2,-12(fp)
  80fb44:	10800403 	ldbu	r2,16(r2)
  80fb48:	10803fcc 	andi	r2,r2,255
  80fb4c:	10000426 	beq	r2,zero,80fb60 <alt_tick+0x54>
  80fb50:	d0a36317 	ldw	r2,-29300(gp)
  80fb54:	1000021e 	bne	r2,zero,80fb60 <alt_tick+0x54>
    {
      alarm->rollover = 0;
  80fb58:	e0bffd17 	ldw	r2,-12(fp)
  80fb5c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
  80fb60:	e0bffd17 	ldw	r2,-12(fp)
  80fb64:	10800217 	ldw	r2,8(r2)
  80fb68:	d0e36317 	ldw	r3,-29300(gp)
  80fb6c:	18801d36 	bltu	r3,r2,80fbe4 <alt_tick+0xd8>
  80fb70:	e0bffd17 	ldw	r2,-12(fp)
  80fb74:	10800403 	ldbu	r2,16(r2)
  80fb78:	10803fcc 	andi	r2,r2,255
  80fb7c:	1000191e 	bne	r2,zero,80fbe4 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
  80fb80:	e0bffd17 	ldw	r2,-12(fp)
  80fb84:	10800317 	ldw	r2,12(r2)
  80fb88:	e0fffd17 	ldw	r3,-12(fp)
  80fb8c:	18c00517 	ldw	r3,20(r3)
  80fb90:	1809883a 	mov	r4,r3
  80fb94:	103ee83a 	callr	r2
  80fb98:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
  80fb9c:	e0bfff17 	ldw	r2,-4(fp)
  80fba0:	1000031e 	bne	r2,zero,80fbb0 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
  80fba4:	e13ffd17 	ldw	r4,-12(fp)
  80fba8:	080fa700 	call	80fa70 <alt_alarm_stop>
  80fbac:	00000d06 	br	80fbe4 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
  80fbb0:	e0bffd17 	ldw	r2,-12(fp)
  80fbb4:	10c00217 	ldw	r3,8(r2)
  80fbb8:	e0bfff17 	ldw	r2,-4(fp)
  80fbbc:	1887883a 	add	r3,r3,r2
  80fbc0:	e0bffd17 	ldw	r2,-12(fp)
  80fbc4:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  80fbc8:	e0bffd17 	ldw	r2,-12(fp)
  80fbcc:	10c00217 	ldw	r3,8(r2)
  80fbd0:	d0a36317 	ldw	r2,-29300(gp)
  80fbd4:	1880032e 	bgeu	r3,r2,80fbe4 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
  80fbd8:	e0bffd17 	ldw	r2,-12(fp)
  80fbdc:	00c00044 	movi	r3,1
  80fbe0:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
  80fbe4:	e0bffe17 	ldw	r2,-8(fp)
  80fbe8:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  80fbec:	e0fffd17 	ldw	r3,-12(fp)
  80fbf0:	d0a01004 	addi	r2,gp,-32704
  80fbf4:	18bfcf1e 	bne	r3,r2,80fb34 <__alt_data_end+0xff80fb34>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
  80fbf8:	0001883a 	nop
}
  80fbfc:	0001883a 	nop
  80fc00:	e037883a 	mov	sp,fp
  80fc04:	dfc00117 	ldw	ra,4(sp)
  80fc08:	df000017 	ldw	fp,0(sp)
  80fc0c:	dec00204 	addi	sp,sp,8
  80fc10:	f800283a 	ret

0080fc14 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  80fc14:	defffd04 	addi	sp,sp,-12
  80fc18:	dfc00215 	stw	ra,8(sp)
  80fc1c:	df000115 	stw	fp,4(sp)
  80fc20:	df000104 	addi	fp,sp,4
  80fc24:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
  80fc28:	e13fff17 	ldw	r4,-4(fp)
  80fc2c:	080fc680 	call	80fc68 <alt_busy_sleep>
}
  80fc30:	e037883a 	mov	sp,fp
  80fc34:	dfc00117 	ldw	ra,4(sp)
  80fc38:	df000017 	ldw	fp,0(sp)
  80fc3c:	dec00204 	addi	sp,sp,8
  80fc40:	f800283a 	ret

0080fc44 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
  80fc44:	deffff04 	addi	sp,sp,-4
  80fc48:	df000015 	stw	fp,0(sp)
  80fc4c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
  80fc50:	000170fa 	wrctl	ienable,zero
}
  80fc54:	0001883a 	nop
  80fc58:	e037883a 	mov	sp,fp
  80fc5c:	df000017 	ldw	fp,0(sp)
  80fc60:	dec00104 	addi	sp,sp,4
  80fc64:	f800283a 	ret

0080fc68 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
  80fc68:	defffa04 	addi	sp,sp,-24
  80fc6c:	dfc00515 	stw	ra,20(sp)
  80fc70:	df000415 	stw	fp,16(sp)
  80fc74:	df000404 	addi	fp,sp,16
  80fc78:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
  80fc7c:	008000c4 	movi	r2,3
  80fc80:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
  80fc84:	e0fffd17 	ldw	r3,-12(fp)
  80fc88:	008003f4 	movhi	r2,15
  80fc8c:	10909004 	addi	r2,r2,16960
  80fc90:	1885383a 	mul	r2,r3,r2
  80fc94:	100b883a 	mov	r5,r2
  80fc98:	0100bef4 	movhi	r4,763
  80fc9c:	213c2004 	addi	r4,r4,-3968
  80fca0:	080a5c00 	call	80a5c0 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  80fca4:	100b883a 	mov	r5,r2
  80fca8:	01200034 	movhi	r4,32768
  80fcac:	213fffc4 	addi	r4,r4,-1
  80fcb0:	080a5c00 	call	80a5c0 <__udivsi3>
  80fcb4:	100b883a 	mov	r5,r2
  80fcb8:	e13fff17 	ldw	r4,-4(fp)
  80fcbc:	080a5c00 	call	80a5c0 <__udivsi3>
  80fcc0:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  80fcc4:	e0bffe17 	ldw	r2,-8(fp)
  80fcc8:	10002a26 	beq	r2,zero,80fd74 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
  80fccc:	e03ffc15 	stw	zero,-16(fp)
  80fcd0:	00001706 	br	80fd30 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
  80fcd4:	00a00034 	movhi	r2,32768
  80fcd8:	10bfffc4 	addi	r2,r2,-1
  80fcdc:	10bfffc4 	addi	r2,r2,-1
  80fce0:	103ffe1e 	bne	r2,zero,80fcdc <__alt_data_end+0xff80fcdc>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
  80fce4:	e0fffd17 	ldw	r3,-12(fp)
  80fce8:	008003f4 	movhi	r2,15
  80fcec:	10909004 	addi	r2,r2,16960
  80fcf0:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
  80fcf4:	100b883a 	mov	r5,r2
  80fcf8:	0100bef4 	movhi	r4,763
  80fcfc:	213c2004 	addi	r4,r4,-3968
  80fd00:	080a5c00 	call	80a5c0 <__udivsi3>
  80fd04:	100b883a 	mov	r5,r2
  80fd08:	01200034 	movhi	r4,32768
  80fd0c:	213fffc4 	addi	r4,r4,-1
  80fd10:	080a5c00 	call	80a5c0 <__udivsi3>
  80fd14:	1007883a 	mov	r3,r2
  80fd18:	e0bfff17 	ldw	r2,-4(fp)
  80fd1c:	10c5c83a 	sub	r2,r2,r3
  80fd20:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
  80fd24:	e0bffc17 	ldw	r2,-16(fp)
  80fd28:	10800044 	addi	r2,r2,1
  80fd2c:	e0bffc15 	stw	r2,-16(fp)
  80fd30:	e0fffc17 	ldw	r3,-16(fp)
  80fd34:	e0bffe17 	ldw	r2,-8(fp)
  80fd38:	18bfe616 	blt	r3,r2,80fcd4 <__alt_data_end+0xff80fcd4>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  80fd3c:	e0fffd17 	ldw	r3,-12(fp)
  80fd40:	008003f4 	movhi	r2,15
  80fd44:	10909004 	addi	r2,r2,16960
  80fd48:	1885383a 	mul	r2,r3,r2
  80fd4c:	100b883a 	mov	r5,r2
  80fd50:	0100bef4 	movhi	r4,763
  80fd54:	213c2004 	addi	r4,r4,-3968
  80fd58:	080a5c00 	call	80a5c0 <__udivsi3>
  80fd5c:	1007883a 	mov	r3,r2
  80fd60:	e0bfff17 	ldw	r2,-4(fp)
  80fd64:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  80fd68:	10bfffc4 	addi	r2,r2,-1
  80fd6c:	103ffe1e 	bne	r2,zero,80fd68 <__alt_data_end+0xff80fd68>
  80fd70:	00000d06 	br	80fda8 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  80fd74:	e0fffd17 	ldw	r3,-12(fp)
  80fd78:	008003f4 	movhi	r2,15
  80fd7c:	10909004 	addi	r2,r2,16960
  80fd80:	1885383a 	mul	r2,r3,r2
  80fd84:	100b883a 	mov	r5,r2
  80fd88:	0100bef4 	movhi	r4,763
  80fd8c:	213c2004 	addi	r4,r4,-3968
  80fd90:	080a5c00 	call	80a5c0 <__udivsi3>
  80fd94:	1007883a 	mov	r3,r2
  80fd98:	e0bfff17 	ldw	r2,-4(fp)
  80fd9c:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  80fda0:	10bfffc4 	addi	r2,r2,-1
  80fda4:	00bffe16 	blt	zero,r2,80fda0 <__alt_data_end+0xff80fda0>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
  80fda8:	0005883a 	mov	r2,zero
}
  80fdac:	e037883a 	mov	sp,fp
  80fdb0:	dfc00117 	ldw	ra,4(sp)
  80fdb4:	df000017 	ldw	fp,0(sp)
  80fdb8:	dec00204 	addi	sp,sp,8
  80fdbc:	f800283a 	ret

0080fdc0 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  80fdc0:	defffa04 	addi	sp,sp,-24
  80fdc4:	dfc00515 	stw	ra,20(sp)
  80fdc8:	df000415 	stw	fp,16(sp)
  80fdcc:	df000404 	addi	fp,sp,16
  80fdd0:	e13ffe15 	stw	r4,-8(fp)
  80fdd4:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
  80fdd8:	e0bfff17 	ldw	r2,-4(fp)
  80fddc:	10800017 	ldw	r2,0(r2)
  80fde0:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
  80fde4:	e13ffe17 	ldw	r4,-8(fp)
  80fde8:	0806e880 	call	806e88 <strlen>
  80fdec:	10800044 	addi	r2,r2,1
  80fdf0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  80fdf4:	00000d06 	br	80fe2c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  80fdf8:	e0bffc17 	ldw	r2,-16(fp)
  80fdfc:	10800217 	ldw	r2,8(r2)
  80fe00:	e0fffd17 	ldw	r3,-12(fp)
  80fe04:	180d883a 	mov	r6,r3
  80fe08:	e17ffe17 	ldw	r5,-8(fp)
  80fe0c:	1009883a 	mov	r4,r2
  80fe10:	08101740 	call	810174 <memcmp>
  80fe14:	1000021e 	bne	r2,zero,80fe20 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
  80fe18:	e0bffc17 	ldw	r2,-16(fp)
  80fe1c:	00000706 	br	80fe3c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
  80fe20:	e0bffc17 	ldw	r2,-16(fp)
  80fe24:	10800017 	ldw	r2,0(r2)
  80fe28:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  80fe2c:	e0fffc17 	ldw	r3,-16(fp)
  80fe30:	e0bfff17 	ldw	r2,-4(fp)
  80fe34:	18bff01e 	bne	r3,r2,80fdf8 <__alt_data_end+0xff80fdf8>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
  80fe38:	0005883a 	mov	r2,zero
}
  80fe3c:	e037883a 	mov	sp,fp
  80fe40:	dfc00117 	ldw	ra,4(sp)
  80fe44:	df000017 	ldw	fp,0(sp)
  80fe48:	dec00204 	addi	sp,sp,8
  80fe4c:	f800283a 	ret

0080fe50 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  80fe50:	defffb04 	addi	sp,sp,-20
  80fe54:	dfc00415 	stw	ra,16(sp)
  80fe58:	df000315 	stw	fp,12(sp)
  80fe5c:	df000304 	addi	fp,sp,12
  80fe60:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  80fe64:	d0a00717 	ldw	r2,-32740(gp)
  80fe68:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  80fe6c:	00003106 	br	80ff34 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
  80fe70:	e0bffd17 	ldw	r2,-12(fp)
  80fe74:	10800217 	ldw	r2,8(r2)
  80fe78:	1009883a 	mov	r4,r2
  80fe7c:	0806e880 	call	806e88 <strlen>
  80fe80:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
  80fe84:	e0bffd17 	ldw	r2,-12(fp)
  80fe88:	10c00217 	ldw	r3,8(r2)
  80fe8c:	e0bffe17 	ldw	r2,-8(fp)
  80fe90:	10bfffc4 	addi	r2,r2,-1
  80fe94:	1885883a 	add	r2,r3,r2
  80fe98:	10800003 	ldbu	r2,0(r2)
  80fe9c:	10803fcc 	andi	r2,r2,255
  80fea0:	1080201c 	xori	r2,r2,128
  80fea4:	10bfe004 	addi	r2,r2,-128
  80fea8:	10800bd8 	cmpnei	r2,r2,47
  80feac:	1000031e 	bne	r2,zero,80febc <alt_find_file+0x6c>
    {
      len -= 1;
  80feb0:	e0bffe17 	ldw	r2,-8(fp)
  80feb4:	10bfffc4 	addi	r2,r2,-1
  80feb8:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  80febc:	e0bffe17 	ldw	r2,-8(fp)
  80fec0:	e0ffff17 	ldw	r3,-4(fp)
  80fec4:	1885883a 	add	r2,r3,r2
  80fec8:	10800003 	ldbu	r2,0(r2)
  80fecc:	10803fcc 	andi	r2,r2,255
  80fed0:	1080201c 	xori	r2,r2,128
  80fed4:	10bfe004 	addi	r2,r2,-128
  80fed8:	10800be0 	cmpeqi	r2,r2,47
  80fedc:	1000081e 	bne	r2,zero,80ff00 <alt_find_file+0xb0>
  80fee0:	e0bffe17 	ldw	r2,-8(fp)
  80fee4:	e0ffff17 	ldw	r3,-4(fp)
  80fee8:	1885883a 	add	r2,r3,r2
  80feec:	10800003 	ldbu	r2,0(r2)
  80fef0:	10803fcc 	andi	r2,r2,255
  80fef4:	1080201c 	xori	r2,r2,128
  80fef8:	10bfe004 	addi	r2,r2,-128
  80fefc:	10000a1e 	bne	r2,zero,80ff28 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
  80ff00:	e0bffd17 	ldw	r2,-12(fp)
  80ff04:	10800217 	ldw	r2,8(r2)
  80ff08:	e0fffe17 	ldw	r3,-8(fp)
  80ff0c:	180d883a 	mov	r6,r3
  80ff10:	e17fff17 	ldw	r5,-4(fp)
  80ff14:	1009883a 	mov	r4,r2
  80ff18:	08101740 	call	810174 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  80ff1c:	1000021e 	bne	r2,zero,80ff28 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
  80ff20:	e0bffd17 	ldw	r2,-12(fp)
  80ff24:	00000706 	br	80ff44 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
  80ff28:	e0bffd17 	ldw	r2,-12(fp)
  80ff2c:	10800017 	ldw	r2,0(r2)
  80ff30:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  80ff34:	e0fffd17 	ldw	r3,-12(fp)
  80ff38:	d0a00704 	addi	r2,gp,-32740
  80ff3c:	18bfcc1e 	bne	r3,r2,80fe70 <__alt_data_end+0xff80fe70>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
  80ff40:	0005883a 	mov	r2,zero
}
  80ff44:	e037883a 	mov	sp,fp
  80ff48:	dfc00117 	ldw	ra,4(sp)
  80ff4c:	df000017 	ldw	fp,0(sp)
  80ff50:	dec00204 	addi	sp,sp,8
  80ff54:	f800283a 	ret

0080ff58 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  80ff58:	defffc04 	addi	sp,sp,-16
  80ff5c:	df000315 	stw	fp,12(sp)
  80ff60:	df000304 	addi	fp,sp,12
  80ff64:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
  80ff68:	00bffa04 	movi	r2,-24
  80ff6c:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  80ff70:	e03ffd15 	stw	zero,-12(fp)
  80ff74:	00001906 	br	80ffdc <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
  80ff78:	00802074 	movhi	r2,129
  80ff7c:	1084d704 	addi	r2,r2,4956
  80ff80:	e0fffd17 	ldw	r3,-12(fp)
  80ff84:	18c00324 	muli	r3,r3,12
  80ff88:	10c5883a 	add	r2,r2,r3
  80ff8c:	10800017 	ldw	r2,0(r2)
  80ff90:	10000f1e 	bne	r2,zero,80ffd0 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
  80ff94:	00802074 	movhi	r2,129
  80ff98:	1084d704 	addi	r2,r2,4956
  80ff9c:	e0fffd17 	ldw	r3,-12(fp)
  80ffa0:	18c00324 	muli	r3,r3,12
  80ffa4:	10c5883a 	add	r2,r2,r3
  80ffa8:	e0ffff17 	ldw	r3,-4(fp)
  80ffac:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
  80ffb0:	d0e00b17 	ldw	r3,-32724(gp)
  80ffb4:	e0bffd17 	ldw	r2,-12(fp)
  80ffb8:	1880020e 	bge	r3,r2,80ffc4 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
  80ffbc:	e0bffd17 	ldw	r2,-12(fp)
  80ffc0:	d0a00b15 	stw	r2,-32724(gp)
      }
      rc = i;
  80ffc4:	e0bffd17 	ldw	r2,-12(fp)
  80ffc8:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
  80ffcc:	00000606 	br	80ffe8 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  80ffd0:	e0bffd17 	ldw	r2,-12(fp)
  80ffd4:	10800044 	addi	r2,r2,1
  80ffd8:	e0bffd15 	stw	r2,-12(fp)
  80ffdc:	e0bffd17 	ldw	r2,-12(fp)
  80ffe0:	10800810 	cmplti	r2,r2,32
  80ffe4:	103fe41e 	bne	r2,zero,80ff78 <__alt_data_end+0xff80ff78>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
  80ffe8:	e0bffe17 	ldw	r2,-8(fp)
}
  80ffec:	e037883a 	mov	sp,fp
  80fff0:	df000017 	ldw	fp,0(sp)
  80fff4:	dec00104 	addi	sp,sp,4
  80fff8:	f800283a 	ret

0080fffc <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
  80fffc:	defffb04 	addi	sp,sp,-20
  810000:	df000415 	stw	fp,16(sp)
  810004:	df000404 	addi	fp,sp,16
  810008:	e13ffe15 	stw	r4,-8(fp)
  81000c:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
  810010:	e0bfff17 	ldw	r2,-4(fp)
  810014:	10840070 	cmpltui	r2,r2,4097
  810018:	1000021e 	bne	r2,zero,810024 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
  81001c:	00840004 	movi	r2,4096
  810020:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
  810024:	e0fffe17 	ldw	r3,-8(fp)
  810028:	e0bfff17 	ldw	r2,-4(fp)
  81002c:	1885883a 	add	r2,r3,r2
  810030:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  810034:	e0bffe17 	ldw	r2,-8(fp)
  810038:	e0bffc15 	stw	r2,-16(fp)
  81003c:	00000506 	br	810054 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
  810040:	e0bffc17 	ldw	r2,-16(fp)
  810044:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  810048:	e0bffc17 	ldw	r2,-16(fp)
  81004c:	10800804 	addi	r2,r2,32
  810050:	e0bffc15 	stw	r2,-16(fp)
  810054:	e0fffc17 	ldw	r3,-16(fp)
  810058:	e0bffd17 	ldw	r2,-12(fp)
  81005c:	18bff836 	bltu	r3,r2,810040 <__alt_data_end+0xff810040>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
  810060:	e0bffe17 	ldw	r2,-8(fp)
  810064:	108007cc 	andi	r2,r2,31
  810068:	10000226 	beq	r2,zero,810074 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
  81006c:	e0bffc17 	ldw	r2,-16(fp)
  810070:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
  810074:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
  810078:	0001883a 	nop
  81007c:	e037883a 	mov	sp,fp
  810080:	df000017 	ldw	fp,0(sp)
  810084:	dec00104 	addi	sp,sp,4
  810088:	f800283a 	ret

0081008c <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  81008c:	defffe04 	addi	sp,sp,-8
  810090:	df000115 	stw	fp,4(sp)
  810094:	df000104 	addi	fp,sp,4
  810098:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
  81009c:	e0bfff17 	ldw	r2,-4(fp)
  8100a0:	10bffe84 	addi	r2,r2,-6
  8100a4:	10c00428 	cmpgeui	r3,r2,16
  8100a8:	18001a1e 	bne	r3,zero,810114 <alt_exception_cause_generated_bad_addr+0x88>
  8100ac:	100690ba 	slli	r3,r2,2
  8100b0:	00802074 	movhi	r2,129
  8100b4:	10803104 	addi	r2,r2,196
  8100b8:	1885883a 	add	r2,r3,r2
  8100bc:	10800017 	ldw	r2,0(r2)
  8100c0:	1000683a 	jmp	r2
  8100c4:	00810104 	movi	r2,1028
  8100c8:	00810104 	movi	r2,1028
  8100cc:	00810114 	movui	r2,1028
  8100d0:	00810114 	movui	r2,1028
  8100d4:	00810114 	movui	r2,1028
  8100d8:	00810104 	movi	r2,1028
  8100dc:	0081010c 	andi	r2,zero,1028
  8100e0:	00810114 	movui	r2,1028
  8100e4:	00810104 	movi	r2,1028
  8100e8:	00810104 	movi	r2,1028
  8100ec:	00810114 	movui	r2,1028
  8100f0:	00810104 	movi	r2,1028
  8100f4:	0081010c 	andi	r2,zero,1028
  8100f8:	00810114 	movui	r2,1028
  8100fc:	00810114 	movui	r2,1028
  810100:	00810104 	movi	r2,1028
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
  810104:	00800044 	movi	r2,1
  810108:	00000306 	br	810118 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
  81010c:	0005883a 	mov	r2,zero
  810110:	00000106 	br	810118 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
  810114:	0005883a 	mov	r2,zero
  }
}
  810118:	e037883a 	mov	sp,fp
  81011c:	df000017 	ldw	fp,0(sp)
  810120:	dec00104 	addi	sp,sp,4
  810124:	f800283a 	ret

00810128 <atexit>:
  810128:	200b883a 	mov	r5,r4
  81012c:	000f883a 	mov	r7,zero
  810130:	000d883a 	mov	r6,zero
  810134:	0009883a 	mov	r4,zero
  810138:	08101f01 	jmpi	8101f0 <__register_exitproc>

0081013c <exit>:
  81013c:	defffe04 	addi	sp,sp,-8
  810140:	000b883a 	mov	r5,zero
  810144:	dc000015 	stw	r16,0(sp)
  810148:	dfc00115 	stw	ra,4(sp)
  81014c:	2021883a 	mov	r16,r4
  810150:	08103080 	call	810308 <__call_exitprocs>
  810154:	00802074 	movhi	r2,129
  810158:	1085d404 	addi	r2,r2,5968
  81015c:	11000017 	ldw	r4,0(r2)
  810160:	20800f17 	ldw	r2,60(r4)
  810164:	10000126 	beq	r2,zero,81016c <exit+0x30>
  810168:	103ee83a 	callr	r2
  81016c:	8009883a 	mov	r4,r16
  810170:	08104880 	call	810488 <_exit>

00810174 <memcmp>:
  810174:	01c000c4 	movi	r7,3
  810178:	3980192e 	bgeu	r7,r6,8101e0 <memcmp+0x6c>
  81017c:	2144b03a 	or	r2,r4,r5
  810180:	11c4703a 	and	r2,r2,r7
  810184:	10000f26 	beq	r2,zero,8101c4 <memcmp+0x50>
  810188:	20800003 	ldbu	r2,0(r4)
  81018c:	28c00003 	ldbu	r3,0(r5)
  810190:	10c0151e 	bne	r2,r3,8101e8 <memcmp+0x74>
  810194:	31bfff84 	addi	r6,r6,-2
  810198:	01ffffc4 	movi	r7,-1
  81019c:	00000406 	br	8101b0 <memcmp+0x3c>
  8101a0:	20800003 	ldbu	r2,0(r4)
  8101a4:	28c00003 	ldbu	r3,0(r5)
  8101a8:	31bfffc4 	addi	r6,r6,-1
  8101ac:	10c00e1e 	bne	r2,r3,8101e8 <memcmp+0x74>
  8101b0:	21000044 	addi	r4,r4,1
  8101b4:	29400044 	addi	r5,r5,1
  8101b8:	31fff91e 	bne	r6,r7,8101a0 <__alt_data_end+0xff8101a0>
  8101bc:	0005883a 	mov	r2,zero
  8101c0:	f800283a 	ret
  8101c4:	20c00017 	ldw	r3,0(r4)
  8101c8:	28800017 	ldw	r2,0(r5)
  8101cc:	18bfee1e 	bne	r3,r2,810188 <__alt_data_end+0xff810188>
  8101d0:	31bfff04 	addi	r6,r6,-4
  8101d4:	21000104 	addi	r4,r4,4
  8101d8:	29400104 	addi	r5,r5,4
  8101dc:	39bff936 	bltu	r7,r6,8101c4 <__alt_data_end+0xff8101c4>
  8101e0:	303fe91e 	bne	r6,zero,810188 <__alt_data_end+0xff810188>
  8101e4:	003ff506 	br	8101bc <__alt_data_end+0xff8101bc>
  8101e8:	10c5c83a 	sub	r2,r2,r3
  8101ec:	f800283a 	ret

008101f0 <__register_exitproc>:
  8101f0:	defffa04 	addi	sp,sp,-24
  8101f4:	dc000315 	stw	r16,12(sp)
  8101f8:	04002074 	movhi	r16,129
  8101fc:	8405d404 	addi	r16,r16,5968
  810200:	80c00017 	ldw	r3,0(r16)
  810204:	dc400415 	stw	r17,16(sp)
  810208:	dfc00515 	stw	ra,20(sp)
  81020c:	18805217 	ldw	r2,328(r3)
  810210:	2023883a 	mov	r17,r4
  810214:	10003726 	beq	r2,zero,8102f4 <__register_exitproc+0x104>
  810218:	10c00117 	ldw	r3,4(r2)
  81021c:	010007c4 	movi	r4,31
  810220:	20c00e16 	blt	r4,r3,81025c <__register_exitproc+0x6c>
  810224:	1a000044 	addi	r8,r3,1
  810228:	8800221e 	bne	r17,zero,8102b4 <__register_exitproc+0xc4>
  81022c:	18c00084 	addi	r3,r3,2
  810230:	18c7883a 	add	r3,r3,r3
  810234:	18c7883a 	add	r3,r3,r3
  810238:	12000115 	stw	r8,4(r2)
  81023c:	10c7883a 	add	r3,r2,r3
  810240:	19400015 	stw	r5,0(r3)
  810244:	0005883a 	mov	r2,zero
  810248:	dfc00517 	ldw	ra,20(sp)
  81024c:	dc400417 	ldw	r17,16(sp)
  810250:	dc000317 	ldw	r16,12(sp)
  810254:	dec00604 	addi	sp,sp,24
  810258:	f800283a 	ret
  81025c:	00800034 	movhi	r2,0
  810260:	10800004 	addi	r2,r2,0
  810264:	10002626 	beq	r2,zero,810300 <__register_exitproc+0x110>
  810268:	01006404 	movi	r4,400
  81026c:	d9400015 	stw	r5,0(sp)
  810270:	d9800115 	stw	r6,4(sp)
  810274:	d9c00215 	stw	r7,8(sp)
  810278:	00000000 	call	0 <__alt_mem_new_sdram_controller_0-0x800000>
  81027c:	d9400017 	ldw	r5,0(sp)
  810280:	d9800117 	ldw	r6,4(sp)
  810284:	d9c00217 	ldw	r7,8(sp)
  810288:	10001d26 	beq	r2,zero,810300 <__register_exitproc+0x110>
  81028c:	81000017 	ldw	r4,0(r16)
  810290:	10000115 	stw	zero,4(r2)
  810294:	02000044 	movi	r8,1
  810298:	22405217 	ldw	r9,328(r4)
  81029c:	0007883a 	mov	r3,zero
  8102a0:	12400015 	stw	r9,0(r2)
  8102a4:	20805215 	stw	r2,328(r4)
  8102a8:	10006215 	stw	zero,392(r2)
  8102ac:	10006315 	stw	zero,396(r2)
  8102b0:	883fde26 	beq	r17,zero,81022c <__alt_data_end+0xff81022c>
  8102b4:	18c9883a 	add	r4,r3,r3
  8102b8:	2109883a 	add	r4,r4,r4
  8102bc:	1109883a 	add	r4,r2,r4
  8102c0:	21802215 	stw	r6,136(r4)
  8102c4:	01800044 	movi	r6,1
  8102c8:	12406217 	ldw	r9,392(r2)
  8102cc:	30cc983a 	sll	r6,r6,r3
  8102d0:	4992b03a 	or	r9,r9,r6
  8102d4:	12406215 	stw	r9,392(r2)
  8102d8:	21c04215 	stw	r7,264(r4)
  8102dc:	01000084 	movi	r4,2
  8102e0:	893fd21e 	bne	r17,r4,81022c <__alt_data_end+0xff81022c>
  8102e4:	11006317 	ldw	r4,396(r2)
  8102e8:	218cb03a 	or	r6,r4,r6
  8102ec:	11806315 	stw	r6,396(r2)
  8102f0:	003fce06 	br	81022c <__alt_data_end+0xff81022c>
  8102f4:	18805304 	addi	r2,r3,332
  8102f8:	18805215 	stw	r2,328(r3)
  8102fc:	003fc606 	br	810218 <__alt_data_end+0xff810218>
  810300:	00bfffc4 	movi	r2,-1
  810304:	003fd006 	br	810248 <__alt_data_end+0xff810248>

00810308 <__call_exitprocs>:
  810308:	defff504 	addi	sp,sp,-44
  81030c:	df000915 	stw	fp,36(sp)
  810310:	dd400615 	stw	r21,24(sp)
  810314:	dc800315 	stw	r18,12(sp)
  810318:	dfc00a15 	stw	ra,40(sp)
  81031c:	ddc00815 	stw	r23,32(sp)
  810320:	dd800715 	stw	r22,28(sp)
  810324:	dd000515 	stw	r20,20(sp)
  810328:	dcc00415 	stw	r19,16(sp)
  81032c:	dc400215 	stw	r17,8(sp)
  810330:	dc000115 	stw	r16,4(sp)
  810334:	d9000015 	stw	r4,0(sp)
  810338:	2839883a 	mov	fp,r5
  81033c:	04800044 	movi	r18,1
  810340:	057fffc4 	movi	r21,-1
  810344:	00802074 	movhi	r2,129
  810348:	1085d404 	addi	r2,r2,5968
  81034c:	12000017 	ldw	r8,0(r2)
  810350:	45005217 	ldw	r20,328(r8)
  810354:	44c05204 	addi	r19,r8,328
  810358:	a0001c26 	beq	r20,zero,8103cc <__call_exitprocs+0xc4>
  81035c:	a0800117 	ldw	r2,4(r20)
  810360:	15ffffc4 	addi	r23,r2,-1
  810364:	b8000d16 	blt	r23,zero,81039c <__call_exitprocs+0x94>
  810368:	14000044 	addi	r16,r2,1
  81036c:	8421883a 	add	r16,r16,r16
  810370:	8421883a 	add	r16,r16,r16
  810374:	84402004 	addi	r17,r16,128
  810378:	a463883a 	add	r17,r20,r17
  81037c:	a421883a 	add	r16,r20,r16
  810380:	e0001e26 	beq	fp,zero,8103fc <__call_exitprocs+0xf4>
  810384:	80804017 	ldw	r2,256(r16)
  810388:	e0801c26 	beq	fp,r2,8103fc <__call_exitprocs+0xf4>
  81038c:	bdffffc4 	addi	r23,r23,-1
  810390:	843fff04 	addi	r16,r16,-4
  810394:	8c7fff04 	addi	r17,r17,-4
  810398:	bd7ff91e 	bne	r23,r21,810380 <__alt_data_end+0xff810380>
  81039c:	00800034 	movhi	r2,0
  8103a0:	10800004 	addi	r2,r2,0
  8103a4:	10000926 	beq	r2,zero,8103cc <__call_exitprocs+0xc4>
  8103a8:	a0800117 	ldw	r2,4(r20)
  8103ac:	1000301e 	bne	r2,zero,810470 <__call_exitprocs+0x168>
  8103b0:	a0800017 	ldw	r2,0(r20)
  8103b4:	10003226 	beq	r2,zero,810480 <__call_exitprocs+0x178>
  8103b8:	a009883a 	mov	r4,r20
  8103bc:	98800015 	stw	r2,0(r19)
  8103c0:	00000000 	call	0 <__alt_mem_new_sdram_controller_0-0x800000>
  8103c4:	9d000017 	ldw	r20,0(r19)
  8103c8:	a03fe41e 	bne	r20,zero,81035c <__alt_data_end+0xff81035c>
  8103cc:	dfc00a17 	ldw	ra,40(sp)
  8103d0:	df000917 	ldw	fp,36(sp)
  8103d4:	ddc00817 	ldw	r23,32(sp)
  8103d8:	dd800717 	ldw	r22,28(sp)
  8103dc:	dd400617 	ldw	r21,24(sp)
  8103e0:	dd000517 	ldw	r20,20(sp)
  8103e4:	dcc00417 	ldw	r19,16(sp)
  8103e8:	dc800317 	ldw	r18,12(sp)
  8103ec:	dc400217 	ldw	r17,8(sp)
  8103f0:	dc000117 	ldw	r16,4(sp)
  8103f4:	dec00b04 	addi	sp,sp,44
  8103f8:	f800283a 	ret
  8103fc:	a0800117 	ldw	r2,4(r20)
  810400:	80c00017 	ldw	r3,0(r16)
  810404:	10bfffc4 	addi	r2,r2,-1
  810408:	15c01426 	beq	r2,r23,81045c <__call_exitprocs+0x154>
  81040c:	80000015 	stw	zero,0(r16)
  810410:	183fde26 	beq	r3,zero,81038c <__alt_data_end+0xff81038c>
  810414:	95c8983a 	sll	r4,r18,r23
  810418:	a0806217 	ldw	r2,392(r20)
  81041c:	a5800117 	ldw	r22,4(r20)
  810420:	2084703a 	and	r2,r4,r2
  810424:	10000b26 	beq	r2,zero,810454 <__call_exitprocs+0x14c>
  810428:	a0806317 	ldw	r2,396(r20)
  81042c:	2088703a 	and	r4,r4,r2
  810430:	20000c1e 	bne	r4,zero,810464 <__call_exitprocs+0x15c>
  810434:	89400017 	ldw	r5,0(r17)
  810438:	d9000017 	ldw	r4,0(sp)
  81043c:	183ee83a 	callr	r3
  810440:	a0800117 	ldw	r2,4(r20)
  810444:	15bfbf1e 	bne	r2,r22,810344 <__alt_data_end+0xff810344>
  810448:	98800017 	ldw	r2,0(r19)
  81044c:	153fcf26 	beq	r2,r20,81038c <__alt_data_end+0xff81038c>
  810450:	003fbc06 	br	810344 <__alt_data_end+0xff810344>
  810454:	183ee83a 	callr	r3
  810458:	003ff906 	br	810440 <__alt_data_end+0xff810440>
  81045c:	a5c00115 	stw	r23,4(r20)
  810460:	003feb06 	br	810410 <__alt_data_end+0xff810410>
  810464:	89000017 	ldw	r4,0(r17)
  810468:	183ee83a 	callr	r3
  81046c:	003ff406 	br	810440 <__alt_data_end+0xff810440>
  810470:	a0800017 	ldw	r2,0(r20)
  810474:	a027883a 	mov	r19,r20
  810478:	1029883a 	mov	r20,r2
  81047c:	003fb606 	br	810358 <__alt_data_end+0xff810358>
  810480:	0005883a 	mov	r2,zero
  810484:	003ffb06 	br	810474 <__alt_data_end+0xff810474>

00810488 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
  810488:	defffd04 	addi	sp,sp,-12
  81048c:	df000215 	stw	fp,8(sp)
  810490:	df000204 	addi	fp,sp,8
  810494:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
  810498:	0001883a 	nop
  81049c:	e0bfff17 	ldw	r2,-4(fp)
  8104a0:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
  8104a4:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  8104a8:	10000226 	beq	r2,zero,8104b4 <_exit+0x2c>
    ALT_SIM_FAIL();
  8104ac:	002af070 	cmpltui	zero,zero,43969
  8104b0:	00000106 	br	8104b8 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
  8104b4:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
  8104b8:	003fff06 	br	8104b8 <__alt_data_end+0xff8104b8>
